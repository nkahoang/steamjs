/*!
 * Stylus - CSS to Stylus conversion
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Convert the given `css` to Stylus source.
 *
 * @param {String} css
 * @return {String}
 * @api public
 */

module.exports = function(css***REMOVED***{
  return new Converter(css***REMOVED***.stylus(***REMOVED***;
};

/**
 * Initialize a new `Converter` with the given `css`.
 *
 * @param {String} css
 * @api private
 */

function Converter(css***REMOVED*** {
  var parse = require('css-parse'***REMOVED***;
  this.css = css;
  this.root = parse(css, { position: false }***REMOVED***;
  this.indents = 0;
}

/**
 * Convert to Stylus.
 *
 * @return {String}
 * @api private
 */

Converter.prototype.stylus = function(***REMOVED***{
  return this.visitRules(this.root.stylesheet.rules***REMOVED***;
};

/**
 * Return indent string.
 *
 * @return {String}
 * @api private
 */

Converter.prototype.__defineGetter__('indent', function(***REMOVED***{
  return Array(this.indents + 1***REMOVED***.join('  '***REMOVED***;
}***REMOVED***;

/**
 * Visit `node`.
 *
 * @param {*} node
 * @return {String}
 * @api private
 */

Converter.prototype.visit = function(node***REMOVED***{
  switch (node.type***REMOVED*** {
    case 'rule':
    case 'comment':
    case 'charset':
    case 'media':
    case 'import':
    case 'document':
    case 'keyframes':
    case 'page':
      var name = node.type[0].toUpperCase(***REMOVED*** + node.type.slice(1***REMOVED***;
      return this['visit' + name](node***REMOVED***;
***REMOVED***
};

/**
 * Visit the rules on `node`.
 *
 * @param {Array} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitRules = function(node***REMOVED***{
  var buf = '';
  for (var i = 0, len = node.length; i < len; ++i***REMOVED*** {
    buf += this.visit(node[i]***REMOVED***;
***REMOVED***
  return buf;
};

/**
 * Visit Media `node`.
 *
 * @param {Media} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitMedia = function(node***REMOVED***{
  var buf = this.indent + '@media ' + node.media;
  buf += '\n';
  ++this.indents;
  buf += this.visitRules(node.rules***REMOVED***;
  --this.indents;
  return buf;
};

/**
 * Visit Declaration `node`.
 *
 * @param {Declaration} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitDeclaration = function(node***REMOVED***{
  if ('comment' == node.type***REMOVED*** {
    return this.visitComment(node***REMOVED***;
***REMOVED*** else {
    var buf = this.indent + node.property + ': ' + node.value + '\n';
    return buf;
***REMOVED***
};

/**
 * Visit Rule `node`.`
 *
 * @param {Rule} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitRule = function(node***REMOVED***{
  var buf = this.indent + node.selectors.join(',\n'***REMOVED*** + '\n';
  ++this.indents;
  for (var i = 0, len = node.declarations.length; i < len; ++i***REMOVED*** {
    buf += this.visitDeclaration(node.declarations[i]***REMOVED***;
***REMOVED***
  --this.indents;
  return buf + '\n';
};

/**
 * Visit Comment `node`.`
 *
 * @param {Comment} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitComment = function(node***REMOVED***{
  var buf = this.indent + '/*' + node.comment + '*/';
  return buf + '\n';
};

/**
 * Visit Charset `node`.`
 *
 * @param {Charset} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitCharset = function(node***REMOVED***{
  var buf = this.indent + '@charset ' + node.charset;
  return buf + '\n';
};

/**
 * Visit Import `node`.`
 *
 * @param {Import} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitImport = function(node***REMOVED***{
  var buf = this.indent + '@import ' + node.import;
  return buf + '\n';
};

/**
 * Visit Document `node`.`
 *
 * @param {Document} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitDocument = function(node***REMOVED***{
  var buf = this.indent + '@' + node.vendor + 'document ' + node.document;
  buf += '\n';
  ++this.indents;
  buf += this.visitRules(node.rules***REMOVED***;
  --this.indents;
  return buf;
};

/**
 * Visit Keyframes `node`.`
 *
 * @param {Keyframes} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitKeyframes = function(node***REMOVED***{
  var buf = this.indent + '@keyframes ' + node.name;
  buf += '\n';
  ++this.indents;
  for (var i = 0, len = node.keyframes.length; i < len; ++i***REMOVED*** {
    buf += this.visitKeyframe(node.keyframes[i]***REMOVED***;
***REMOVED***
  --this.indents;
  return buf;
};

/**
 * Visit Keyframe `node`.`
 *
 * @param {Keyframe} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitKeyframe = function(node***REMOVED***{
  var buf = this.indent + node.values.join('\n,'***REMOVED***;
  buf += '\n';
  ++this.indents;
  for (var i = 0, len = node.declarations.length; i < len; ++i***REMOVED*** {
    buf += this.visitDeclaration(node.declarations[i]***REMOVED***;
***REMOVED***
  --this.indents;
  return buf;
};

/**
 * Visit Page `node`.`
 *
 * @param {Page} node
 * @return {String}
 * @api private
 */

Converter.prototype.visitPage = function(node***REMOVED***{
  var buf = this.indent + '@page' + (node.selectors.length ? ' ' + node.selectors.join(', '***REMOVED*** : ''***REMOVED***;
  buf += '\n';
  ++this.indents;
  for (var i = 0, len = node.declarations.length; i < len; ++i***REMOVED*** {
    buf += this.visitDeclaration(node.declarations[i]***REMOVED***;
***REMOVED***
  --this.indents;
  return buf;
};
