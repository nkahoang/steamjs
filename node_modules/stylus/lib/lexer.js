
/*!
 * Stylus - Lexer
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Token = require('./token'***REMOVED***
  , nodes = require('./nodes'***REMOVED***
  , errors = require('./errors'***REMOVED***
  , units = require('./units'***REMOVED***;

/**
 * Expose `Lexer`.
 */

exports = module.exports = Lexer;

/**
 * Operator aliases.
 */

var alias = {
    'and': '&&'
  , 'or': '||'
  , 'is': '=='
  , 'isnt': '!='
  , 'is not': '!='
  , ':=': '?='
};

/**
 * Units.
 */

units = units.join('|'***REMOVED***;

/**
 * Unit RegExp.
 */

var unit = new RegExp('^(-***REMOVED***?(\\d+\\.\\d+|\\d+|\\.\\d+***REMOVED***(' + units + '***REMOVED***?[ \\t]*'***REMOVED***;

/**
 * Initialize a new `Lexer` with the given `str` and `options`.
 *
 * @param {String} str
 * @param {Object} options
 * @api private
 */

function Lexer(str, options***REMOVED*** {
  var self = this;
  options = options || {};
  this.stash = [];
  this.indentStack = [];
  this.indentRe = null;
  this.lineno = 1;

  function comment(str, val, offset, s***REMOVED*** {
    var inComment = s.lastIndexOf('/*', offset***REMOVED*** > s.lastIndexOf('*/', offset***REMOVED***
      || s.lastIndexOf('//', offset***REMOVED*** > s.lastIndexOf('\n', offset***REMOVED***;
    ++self.lineno;
    return inComment
      ? str
      : val;
***REMOVED***;

  // Remove UTF-8 BOM.
  if ('\uFEFF' == str.charAt(0***REMOVED******REMOVED*** str = str.slice(1***REMOVED***;

  this.str = str
    .replace(/\s+$/, '\n'***REMOVED***
    .replace(/\r\n?/g, '\n'***REMOVED***
    .replace(/\\ *\n/g, ' '***REMOVED***
    .replace(/([,(]|:(?!\/\/[^ ]***REMOVED******REMOVED*** *(?:\/\/[^\n]****REMOVED***?\n\s*/g, comment***REMOVED***
    .replace(/\s*\n *([,***REMOVED***]***REMOVED***/g, comment***REMOVED***;
};

/**
 * Lexer prototype.
 */

Lexer.prototype = {
  
  /**
   * Custom inspect.
   */
  
  inspect: function(***REMOVED***{
    var tok
      , tmp = this.str
      , buf = [];
    while ('eos' != (tok = this.next(***REMOVED******REMOVED***.type***REMOVED*** {
      buf.push(tok.inspect(***REMOVED******REMOVED***;
  ***REMOVED***
    this.str = tmp;
    this.prevIndents = 0;
    return buf.concat(tok.inspect(***REMOVED******REMOVED***.join('\n'***REMOVED***;
***REMOVED***,

  /**
   * Lookahead `n` tokens.
   *
   * @param {Number} n
   * @return {Object}
   * @api private
   */
  
  lookahead: function(n***REMOVED***{
    var fetch = n - this.stash.length;
    while (fetch-- > 0***REMOVED*** this.stash.push(this.advance(***REMOVED******REMOVED***;
    return this.stash[--n];
***REMOVED***,
  
  /**
   * Consume the given `len`.
   *
   * @param {Number|Array} len
   * @api private
   */

  skip: function(len***REMOVED***{
    this.str = this.str.substr(Array.isArray(len***REMOVED***
      ? len[0].length
      : len***REMOVED***;
***REMOVED***,

  /**
   * Fetch next token including those stashed by peek.
   *
   * @return {Token}
   * @api private
   */

  next: function(***REMOVED*** {
    var tok = this.stashed(***REMOVED*** || this.advance(***REMOVED***;
    switch (tok.type***REMOVED*** {
      case 'newline':
      case 'indent':
        ++this.lineno;
        break;
      case 'outdent':
        if ('outdent' != this.prev.type***REMOVED*** ++this.lineno;
  ***REMOVED***
    this.prev = tok;
    tok.lineno = this.lineno;
    return tok;
***REMOVED***,

  /**
   * Check if the current token is a part of selector.
   *
   * @return {Boolean}
   * @api private
   */

  isPartOfSelector: function(***REMOVED*** {
    var tok = this.stash[this.stash.length - 1] || this.prev;
    switch (tok && tok.type***REMOVED*** {
      // #for
      case 'color':
        return 2 == tok.val.raw.length;
      // .or
      case '.':
      // [is]
      case '[':
        return true;
  ***REMOVED***
    return false;
***REMOVED***,

  /**
   * Fetch next token.
   *
   * @return {Token}
   * @api private
   */

  advance: function(***REMOVED*** {
    return this.eos(***REMOVED***
      || this.null(***REMOVED***
      || this.sep(***REMOVED***
      || this.keyword(***REMOVED***
      || this.urlchars(***REMOVED***
      || this.atrule(***REMOVED***
      || this.scope(***REMOVED***
      || this.extends(***REMOVED***
      || this.media(***REMOVED***
      || this.mozdocument(***REMOVED***
      || this.comment(***REMOVED***
      || this.newline(***REMOVED***
      || this.escaped(***REMOVED***
      || this.important(***REMOVED***
      || this.literal(***REMOVED***
      || this.function(***REMOVED***
      || this.brace(***REMOVED***
      || this.paren(***REMOVED***
      || this.color(***REMOVED***
      || this.string(***REMOVED***
      || this.unit(***REMOVED***
      || this.namedop(***REMOVED***
      || this.boolean(***REMOVED***
      || this.atblock(***REMOVED***
      || this.ident(***REMOVED***
      || this.op(***REMOVED***
      || this.space(***REMOVED***
      || this.selector(***REMOVED***;
***REMOVED***,

  /**
   * Lookahead a single token.
   *
   * @return {Token}
   * @api private
   */
  
  peek: function(***REMOVED*** {
    return this.lookahead(1***REMOVED***;
***REMOVED***,
  
  /**
   * Return the next possibly stashed token.
   *
   * @return {Token}
   * @api private
   */

  stashed: function(***REMOVED*** {
    return this.stash.shift(***REMOVED***;
***REMOVED***,

  /**
   * EOS | trailing outdents.
   */

  eos: function(***REMOVED*** {
    if (this.str.length***REMOVED*** return;
    if (this.indentStack.length***REMOVED*** {
      this.indentStack.shift(***REMOVED***;
      return new Token('outdent'***REMOVED***;
  ***REMOVED*** else {
      return new Token('eos'***REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * url char
   */

  urlchars: function(***REMOVED*** {
    var captures;
    if (!this.isURL***REMOVED*** return;
    if (captures = /^[\/:@.;?&=*!,<>#%0-9]+/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('literal', new nodes.Literal(captures[0]***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * ';' [ \t]*
   */

  sep: function(***REMOVED*** {
    var captures;
    if (captures = /^;[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token(';'***REMOVED***;
  ***REMOVED***
***REMOVED***,
  
  /**
   * ' '+
   */

  space: function(***REMOVED*** {
    var captures;
    if (captures = /^([ \t]+***REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('space'***REMOVED***;
  ***REMOVED***
***REMOVED***,
  
  /**
   * '\\' . ' '*
   */
   
  escaped: function(***REMOVED*** {
    var captures;
    if (captures = /^\\(.***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      var c = captures[1];
      this.skip(captures***REMOVED***;
      return new Token('ident', new nodes.Literal(c***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,
  
  /**
   * '@css' ' '* '{' .* '}' ' '*
   */
  
  literal: function(***REMOVED*** {
    // HACK attack !!!
    var captures;
    if (captures = /^@css[ \t]*\{/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var c
        , braces = 1
        , css = '';
      while (c = this.str[0]***REMOVED*** {
        this.str = this.str.substr(1***REMOVED***;
        switch (c***REMOVED*** {
          case '{': ++braces; break;
          case '}': --braces; break;
      ***REMOVED***
        css += c;
        if (!braces***REMOVED*** break;
    ***REMOVED***
      css = css.replace(/\s*}$/, ''***REMOVED***;
      return new Token('literal', new nodes.Literal(css***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,
  
  /**
   * '!important' ' '*
   */
  
  important: function(***REMOVED*** {
    var captures;
    if (captures = /^!important[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('ident', new nodes.Literal('!important'***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,
  
  /**
   * '{' | '}'
   */
  
  brace: function(***REMOVED*** {
    var captures;
    if (captures = /^([{}]***REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(1***REMOVED***;
      var brace = captures[1];
      return new Token(brace, brace***REMOVED***;
  ***REMOVED***
***REMOVED***,
  
  /**
   * '(' | '***REMOVED***' ' '*
   */
  
  paren: function(***REMOVED*** {
    var captures;
    if (captures = /^([(***REMOVED***]***REMOVED***([ \t]****REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      var paren = captures[1];
      this.skip(captures***REMOVED***;
      if ('***REMOVED***' == paren***REMOVED*** this.isURL = false;
      var tok = new Token(paren, paren***REMOVED***;
      tok.space = captures[2];
      return tok;
  ***REMOVED***
***REMOVED***,
  
  /**
   * 'null'
   */
  
  null: function(***REMOVED*** {
    var captures
      , tok;
    if (captures = /^(null***REMOVED***\b[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      if (this.isPartOfSelector(***REMOVED******REMOVED*** {
        tok = new Token('ident', new nodes.Ident(captures[0]***REMOVED******REMOVED***;
    ***REMOVED*** else {
        tok = new Token('null', nodes.null***REMOVED***;
    ***REMOVED***
      return tok;
  ***REMOVED***
***REMOVED***,
  
  /**
   *   'if'
   * | 'else'
   * | 'unless'
   * | 'return'
   * | 'for'
   * | 'in'
   */
  
  keyword: function(***REMOVED*** {
    var captures
      , tok;
    if (captures = /^(return|if|else|unless|for|in***REMOVED***\b[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      var keyword = captures[1];
      this.skip(captures***REMOVED***;
      if (this.isPartOfSelector(***REMOVED******REMOVED*** {
        tok = new Token('ident', new nodes.Ident(captures[0]***REMOVED******REMOVED***;
    ***REMOVED*** else {
        tok = new Token(keyword, keyword***REMOVED***;
    ***REMOVED***
      return tok;
  ***REMOVED***
***REMOVED***,
  
  /**
   *   'not'
   * | 'and'
   * | 'or'
   * | 'is'
   * | 'is not'
   * | 'isnt'
   * | 'is a'
   * | 'is defined'
   */
  
  namedop: function(***REMOVED*** {
    var captures
      , tok;
    if (captures = /^(not|and|or|is a|is defined|isnt|is not|is***REMOVED***(?!-***REMOVED***\b([ \t]****REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      var op = captures[1];
      this.skip(captures***REMOVED***;
      if (this.isPartOfSelector(***REMOVED******REMOVED*** {
        tok = new Token('ident', new nodes.Ident(captures[0]***REMOVED******REMOVED***;
    ***REMOVED*** else {
        op = alias[op] || op;
        tok = new Token(op, op***REMOVED***;
    ***REMOVED***
      tok.space = captures[2];
      return tok;
  ***REMOVED***
***REMOVED***,
  
  /**
   *   ','
   * | '+'
   * | '+='
   * | '-'
   * | '-='
   * | '*'
   * | '*='
   * | '/'
   * | '/='
   * | '%'
   * | '%='
   * | '**'
   * | '!'
   * | '&'
   * | '&&'
   * | '||'
   * | '>'
   * | '>='
   * | '<'
   * | '<='
   * | '='
   * | '=='
   * | '!='
   * | '!'
   * | '~'
   * | '?='
   * | ':='
   * | '?'
   * | ':'
   * | '['
   * | ']'
   * | '.'
   * | '..'
   * | '...'
   */
  
  op: function(***REMOVED*** {
    var captures;
    if (captures = /^([.]{1,3}|&&|\|\||[!<>=?:]=|\*\*|[-+*\/%]=?|[,=?:!~<>&\[\]]***REMOVED***([ \t]****REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      var op = captures[1];
      this.skip(captures***REMOVED***;
      op = alias[op] || op;
      var tok = new Token(op, op***REMOVED***;
      tok.space = captures[2];
      this.isURL = false;
      return tok;
  ***REMOVED***
***REMOVED***,

  /**
   * '@extends'
   */
  
  extends: function(***REMOVED*** {
    var captures;
    if (captures = /^@extends?[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('extend'***REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * '@media'
   */
  
  media: function(***REMOVED*** {
    var captures;
    if (captures = /^@media[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('media'***REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * '@-moz-document' ([^{\n]+***REMOVED***
   */

  mozdocument: function(***REMOVED*** {
    var captures;
    if (captures = /^@-moz-document[ \t]*([^\/{\n]+***REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('-moz-document', captures[1].trim(***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * '@block'
   */

  atblock: function(***REMOVED*** {
    var captures;
    if (captures = /^@block[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('atblock'***REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * '@scope' ([^{\n]+***REMOVED***
   */
  
  scope: function(***REMOVED*** {
    var captures;
    if (captures = /^@scope[ \t]*([^\/{\n]+***REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      return new Token('scope', captures[1].trim(***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * '@' ('import' | 'require' | 'keyframes' | 'charset' | 'page' | 'font-face'***REMOVED***
   */
  
  atrule: function(***REMOVED*** {
    var captures;
    if (captures = /^@(import|require|(?:-(\w+***REMOVED***-***REMOVED***?keyframes|charset|font-face|page***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var vendor = captures[2]
        , type = captures[1];
      if (vendor***REMOVED*** type = 'keyframes';
      return new Token(type, vendor***REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * '//' *
   */
  
  comment: function(***REMOVED*** {
    // Single line
    if ('/' == this.str[0] && '/' == this.str[1]***REMOVED*** {
      var end = this.str.indexOf('\n'***REMOVED***;
      if (-1 == end***REMOVED*** end = this.str.length;
      this.skip(end***REMOVED***;
      return this.advance(***REMOVED***;
  ***REMOVED***

    // Multi-line
    if ('/' == this.str[0] && '*' == this.str[1]***REMOVED*** {
      var end = this.str.indexOf('*/'***REMOVED***;
      if (-1 == end***REMOVED*** end = this.str.length;
      var str = this.str.substr(0, end + 2***REMOVED***
        , lines = str.split('\n'***REMOVED***.length - 1
        , suppress = true;
      this.lineno += lines;
      this.skip(end + 2***REMOVED***;
      // output
      if ('!' == str[2]***REMOVED*** {
        str = str.replace('*!', '*'***REMOVED***;
        suppress = false;
    ***REMOVED***
      return new Token('comment', new nodes.Comment(str, suppress***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * 'true' | 'false'
   */
  
  boolean: function(***REMOVED*** {
    var captures;
    if (captures = /^(true|false***REMOVED***\b([ \t]****REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      var val = nodes.Boolean('true' == captures[1]***REMOVED***;
      this.skip(captures***REMOVED***;
      var tok = new Token('boolean', val***REMOVED***;
      tok.space = captures[2];
      return tok;
  ***REMOVED***
***REMOVED***,

  /**
   * -*[_a-zA-Z$] [-\w\d$]* '('
   */
  
  function: function(***REMOVED*** {
    var captures;
    if (captures = /^(-*[_a-zA-Z$][-\w\d$]****REMOVED***\(([ \t]****REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      var name = captures[1];
      this.skip(captures***REMOVED***;
      this.isURL = 'url' == name;
      var tok = new Token('function', new nodes.Ident(name***REMOVED******REMOVED***;
      tok.space = captures[2];
      return tok;
  ***REMOVED*** 
***REMOVED***,

  /**
   * -*[_a-zA-Z$] [-\w\d$]*
   */
  
  ident: function(***REMOVED*** {
    var captures;
    if (captures = /^(@***REMOVED***?(-*[_a-zA-Z$][-\w\d$]****REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      var at = captures[1]
        , name = captures[2]
        , id = new nodes.Ident(name***REMOVED***;
      this.skip(captures***REMOVED***;
      id.property = !! at;
      return new Token('ident', id***REMOVED***;
  ***REMOVED***
***REMOVED***,
  
  /**
   * '\n' ' '+
   */

  newline: function(***REMOVED*** {
    var captures, re;

    // we have established the indentation regexp
    if (this.indentRe***REMOVED***{
      captures = this.indentRe.exec(this.str***REMOVED***;
    // figure out if we are using tabs or spaces
  ***REMOVED*** else {
      // try tabs
      re = /^\n([\t]****REMOVED***[ \t]*/;
      captures = re.exec(this.str***REMOVED***;

      // nope, try spaces
      if (captures && !captures[1].length***REMOVED*** {
        re = /^\n([ \t]****REMOVED***/;
        captures = re.exec(this.str***REMOVED***;
    ***REMOVED***

      // established
      if (captures && captures[1].length***REMOVED*** this.indentRe = re;
  ***REMOVED***


    if (captures***REMOVED*** {
      var tok
        , indents = captures[1].length;

      this.skip(captures***REMOVED***;
      if (this.str[0] === ' ' || this.str[0] === '\t'***REMOVED*** {
        throw new errors.SyntaxError('Invalid indentation. You can use tabs or spaces to indent, but not both.'***REMOVED***;
    ***REMOVED***

      // Reset state
      this.isVariable = false;

      // Blank line
      if ('\n' == this.str[0]***REMOVED*** {
        ++this.lineno;
        return this.advance(***REMOVED***;
    ***REMOVED***

      // Outdent
      if (this.indentStack.length && indents < this.indentStack[0]***REMOVED*** {
        while (this.indentStack.length && this.indentStack[0] > indents***REMOVED*** {
          this.stash.push(new Token('outdent'***REMOVED******REMOVED***;
          this.indentStack.shift(***REMOVED***;
      ***REMOVED***
        tok = this.stash.pop(***REMOVED***;
      // Indent
    ***REMOVED*** else if (indents && indents != this.indentStack[0]***REMOVED*** {
        this.indentStack.unshift(indents***REMOVED***;
        tok = new Token('indent'***REMOVED***;
      // Newline
    ***REMOVED*** else {
        tok = new Token('newline'***REMOVED***;
    ***REMOVED***

      return tok;
  ***REMOVED***
***REMOVED***,

  /**
   * '-'? (digit+ | digit* '.' digit+***REMOVED*** unit
   */

  unit: function(***REMOVED*** {
    var captures;
    if (captures = unit.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var n = parseFloat(captures[2]***REMOVED***;
      if ('-' == captures[1]***REMOVED*** n = -n;
      var node = new nodes.Unit(n, captures[3]***REMOVED***;
      node.raw = captures[0];
      return new Token('unit', node***REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * '"' [^"]+ '"' | "'"" [^']+ "'"
   */

  string: function(***REMOVED*** {
    var captures;
    if (captures = /^("[^"]*"|'[^']*'***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      var str = captures[1]
        , quote = captures[0][0];
      this.skip(captures***REMOVED***;
      str = str.slice(1,-1***REMOVED***.replace(/\\n/g, '\n'***REMOVED***;
      return new Token('string', new nodes.String(str, quote***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***,

  /**
   * #rrggbbaa | #rrggbb | #rgba | #rgb | #nn | #n
   */

  color: function(***REMOVED*** {
    return this.rrggbbaa(***REMOVED***
      || this.rrggbb(***REMOVED***
      || this.rgba(***REMOVED***
      || this.rgb(***REMOVED***
      || this.nn(***REMOVED***
      || this.n(***REMOVED***
***REMOVED***,

  /**
   * #n
   */
  
  n: function(***REMOVED*** {
    var captures;
    if (captures = /^#([a-fA-F0-9]{1}***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var n = parseInt(captures[1] + captures[1], 16***REMOVED***
        , color = new nodes.RGBA(n, n, n, 1***REMOVED***;
      color.raw = captures[0];
      return new Token('color', color***REMOVED***; 
  ***REMOVED***
***REMOVED***,

  /**
   * #nn
   */
  
  nn: function(***REMOVED*** {
    var captures;
    if (captures = /^#([a-fA-F0-9]{2}***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var n = parseInt(captures[1], 16***REMOVED***
        , color = new nodes.RGBA(n, n, n, 1***REMOVED***;
      color.raw = captures[0];
      return new Token('color', color***REMOVED***; 
  ***REMOVED***
***REMOVED***,

  /**
   * #rgb
   */
  
  rgb: function(***REMOVED*** {
    var captures;
    if (captures = /^#([a-fA-F0-9]{3}***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var rgb = captures[1]
        , r = parseInt(rgb[0] + rgb[0], 16***REMOVED***
        , g = parseInt(rgb[1] + rgb[1], 16***REMOVED***
        , b = parseInt(rgb[2] + rgb[2], 16***REMOVED***
        , color = new nodes.RGBA(r, g, b, 1***REMOVED***;
      color.raw = captures[0];
      return new Token('color', color***REMOVED***; 
  ***REMOVED***
***REMOVED***,
  
  /**
   * #rgba
   */
  
  rgba: function(***REMOVED*** {
    var captures;
    if (captures = /^#([a-fA-F0-9]{4}***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var rgb = captures[1]
        , r = parseInt(rgb[0] + rgb[0], 16***REMOVED***
        , g = parseInt(rgb[1] + rgb[1], 16***REMOVED***
        , b = parseInt(rgb[2] + rgb[2], 16***REMOVED***
        , a = parseInt(rgb[3] + rgb[3], 16***REMOVED***
        , color = new nodes.RGBA(r, g, b, a/255***REMOVED***;
      color.raw = captures[0];
      return new Token('color', color***REMOVED***; 
  ***REMOVED***
***REMOVED***,
  
  /**
   * #rrggbb
   */
  
  rrggbb: function(***REMOVED*** {
    var captures;
    if (captures = /^#([a-fA-F0-9]{6}***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var rgb = captures[1]
        , r = parseInt(rgb.substr(0, 2***REMOVED***, 16***REMOVED***
        , g = parseInt(rgb.substr(2, 2***REMOVED***, 16***REMOVED***
        , b = parseInt(rgb.substr(4, 2***REMOVED***, 16***REMOVED***
        , color = new nodes.RGBA(r, g, b, 1***REMOVED***;
      color.raw = captures[0];
      return new Token('color', color***REMOVED***; 
  ***REMOVED***
***REMOVED***,
  
  /**
   * #rrggbbaa
   */
  
  rrggbbaa: function(***REMOVED*** {
    var captures;
    if (captures = /^#([a-fA-F0-9]{8}***REMOVED***[ \t]*/.exec(this.str***REMOVED******REMOVED*** {
      this.skip(captures***REMOVED***;
      var rgb = captures[1]
        , r = parseInt(rgb.substr(0, 2***REMOVED***, 16***REMOVED***
        , g = parseInt(rgb.substr(2, 2***REMOVED***, 16***REMOVED***
        , b = parseInt(rgb.substr(4, 2***REMOVED***, 16***REMOVED***
        , a = parseInt(rgb.substr(6, 2***REMOVED***, 16***REMOVED***
        , color = new nodes.RGBA(r, g, b, a/255***REMOVED***;
      color.raw = captures[0];
      return new Token('color', color***REMOVED***; 
  ***REMOVED***
***REMOVED***,
  
  /**
   * [^\n,;]+
   */
  
  selector: function(***REMOVED*** {
    var captures;
    if (captures = /^.*?(?=\/\/(?![^\[]*\]***REMOVED***|[,\n{]***REMOVED***/.exec(this.str***REMOVED******REMOVED*** {
      var selector = captures[0];
      this.skip(captures***REMOVED***;
      return new Token('selector', selector***REMOVED***;
  ***REMOVED***
***REMOVED***
};
