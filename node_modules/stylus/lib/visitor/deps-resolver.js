
/**
 * Module dependencies.
 */

var Visitor = require('./'***REMOVED***
  , Parser = require('../parser'***REMOVED***
  , nodes = require('../nodes'***REMOVED***
  , utils = require('../utils'***REMOVED***
  , dirname = require('path'***REMOVED***.dirname
  , fs = require('fs'***REMOVED***;

var DepsResolver = module.exports = function DepsResolver(root, options***REMOVED*** {
  this.root = root;
  this.filename = options.filename;
  this.paths = options.paths || [];
  this.paths.push(dirname(options.filename || '.'***REMOVED******REMOVED***;
  this.functions = {};
  this.deps = [];
};

DepsResolver.prototype.__proto__ = Visitor.prototype;

DepsResolver.prototype.visitRoot = function(block***REMOVED*** {
  for (var i = 0, len = block.nodes.length; i < len; ++i***REMOVED*** {
    this.visit(block.nodes[i]***REMOVED***;
***REMOVED***
};

DepsResolver.prototype.visitGroup = function(node***REMOVED*** {
  this.visit(node.block***REMOVED***;
};

DepsResolver.prototype.visitIdent = function(ident***REMOVED*** {
  this.visit(ident.val***REMOVED***;
};

DepsResolver.prototype.visitIf = function(node***REMOVED*** {
  this.visit(node.block***REMOVED***;
  this.visit(node.cond***REMOVED***;
  for (var i = 0, len = node.elses.length; i < len; ++i***REMOVED*** {
    this.visit(node.elses[i]***REMOVED***;
***REMOVED***
};

DepsResolver.prototype.visitFunction = function(fn***REMOVED*** {
  this.functions[fn.name] = fn.block;
};

DepsResolver.prototype.visitCall = function(call***REMOVED*** {
  if (call.name in this.functions***REMOVED*** this.visit(this.functions[call.name]***REMOVED***;
  if (call.block***REMOVED*** this.visit(call.block***REMOVED***;
};

DepsResolver.prototype.visitBlock = DepsResolver.prototype.visitRoot;

DepsResolver.prototype.visitExpression = DepsResolver.prototype.visitRoot;

DepsResolver.prototype.visitMedia = DepsResolver.prototype.visitGroup;

DepsResolver.prototype.visitEach = DepsResolver.prototype.visitGroup;

DepsResolver.prototype.visitAtblock = DepsResolver.prototype.visitGroup;

DepsResolver.prototype.visitImport = function(node***REMOVED*** {
  var path = node.path.first.val
    , literal, found, oldPath;

  if (!path***REMOVED*** return;

  literal = /\.css(?:"|$***REMOVED***/.test(path***REMOVED***;

  // support optional .styl
  if (!literal && !/\.styl$/i.test(path***REMOVED******REMOVED*** {
    oldPath = path;
    path += '.styl';
***REMOVED***

  // Lookup
  found = utils.find(path, this.paths, this.filename***REMOVED***;

  // support optional index
  if (!found && oldPath***REMOVED*** found = utils.lookupIndex(oldPath, this.paths, this.filename***REMOVED***;

  if (!found***REMOVED*** return;

  this.deps = this.deps.concat(found***REMOVED***;

  if (literal***REMOVED*** return;

  // nested imports
  for (var i = 0, len = found.length; i < len; ++i***REMOVED*** {
    var file = found[i]
      , dir = dirname(file***REMOVED***
      , str = fs.readFileSync(file, 'utf-8'***REMOVED***
      , block = new nodes.Block
      , parser = new Parser(str, utils.merge({ root: block }, this.options***REMOVED******REMOVED***;

    if (!~this.paths.indexOf(dir***REMOVED******REMOVED*** this.paths.push(dir***REMOVED***;

    try {
      block = parser.parse(***REMOVED***;
  ***REMOVED*** catch (err***REMOVED*** {
      err.filename = file;
      err.lineno = parser.lexer.lineno;
      err.input = str;
      throw err;
  ***REMOVED***

    this.visit(block***REMOVED***;
***REMOVED***
};

/**
 * Get dependencies.
 */

DepsResolver.prototype.resolve = function(***REMOVED*** {
  this.visit(this.root***REMOVED***;
  return utils.uniq(this.deps***REMOVED***;
};
