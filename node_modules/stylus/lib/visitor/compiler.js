/*!
 * Stylus - Compiler
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Visitor = require('./'***REMOVED***
  , nodes = require('../nodes'***REMOVED***
  , utils = require('../utils'***REMOVED***
  , fs = require('fs'***REMOVED***;

/**
 * Initialize a new `Compiler` with the given `root` Node
 * and the following `options`.
 *
 * Options:
 *
 *   - `compress`  Compress the CSS output (default: false***REMOVED***
 *
 * @param {Node} root
 * @api public
 */

var Compiler = module.exports = function Compiler(root, options***REMOVED*** {
  options = options || {};
  this.compress = options.compress;
  this.firebug = options.firebug;
  this.linenos = options.linenos;
  this.spaces = options['indent spaces'] || 2;
  this.includeCSS = options['include css'];
  this.indents = 1;
  Visitor.call(this, root***REMOVED***;
  this.stack = [];
  this.js = '';
};

/**
 * Inherit from `Visitor.prototype`.
 */

Compiler.prototype.__proto__ = Visitor.prototype;

/**
 * Compile to css, and return a string of CSS.
 *
 * @return {String}
 * @api private
 */

Compiler.prototype.compile = function(***REMOVED***{
  return this.visit(this.root***REMOVED***;
};

/**
 * Return indentation string.
 *
 * @return {String}
 * @api private
 */

Compiler.prototype.__defineGetter__('indent', function(***REMOVED***{
  if (this.compress***REMOVED*** return '';
  return new Array(this.indents***REMOVED***.join(Array(this.spaces + 1***REMOVED***.join(' '***REMOVED******REMOVED***;
}***REMOVED***;

/**
 * Visit Root.
 */

Compiler.prototype.visitRoot = function(block***REMOVED***{
  this.buf = '';
  for (var i = 0, len = block.nodes.length; i < len; ++i***REMOVED*** {
    var node = block.nodes[i];
    if (this.linenos || this.firebug***REMOVED*** this.debugInfo(node***REMOVED***;
    var ret = this.visit(node***REMOVED***;
    if (ret***REMOVED*** this.buf += ret + '\n';
***REMOVED***
  return this.buf;
};

/**
 * Visit Block.
 */

Compiler.prototype.visitBlock = function(block***REMOVED***{
  var node;

  if (block.hasProperties && !block.lacksRenderedSelectors***REMOVED*** {
    var arr = [this.compress ? '{' : ' {'];
    ++this.indents;
    for (var i = 0, len = block.nodes.length; i < len; ++i***REMOVED*** {
      this.last = len - 1 == i;
      node = block.nodes[i];
      switch (node.nodeName***REMOVED*** {
        case 'null':
        case 'expression':
        case 'function':
        case 'jsliteral':
        case 'group':
        case 'unit':
          continue;
        case 'media':
        case 'fontface':
          // Prevent double-writing the @media/@font-face declarations when
          // nested inside of a function/mixin
          if (node.block.parent.scope***REMOVED*** {
            continue;
        ***REMOVED***
        default:
          arr.push(this.visit(node***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***
    --this.indents;
    arr.push(this.indent + '}'***REMOVED***;
    this.buf += arr.join(this.compress ? '' : '\n'***REMOVED***;
    this.buf += (this.compress ? '' : '\n'***REMOVED***;
***REMOVED***

  // Nesting
  for (var i = 0, len = block.nodes.length; i < len; ++i***REMOVED*** {
    node = block.nodes[i];
    switch (node.nodeName***REMOVED*** {
      case 'group':
      case 'print':
      case 'page':
      case 'block':
      case 'keyframes':
        if (this.linenos || this.firebug***REMOVED*** this.debugInfo(node***REMOVED***;
        this.visit(node***REMOVED***;
        break;
      case 'media':
      case 'mozdocument':
      case 'import':
      case 'fontface':
        this.visit(node***REMOVED***;
        break;
      case 'comment':
        // only show comments inside when outside of scope and unsuppressed
        if (!block.scope && !node.suppress***REMOVED*** {
          this.buf += this.visit(node***REMOVED*** + '\n';
      ***REMOVED***
        break;
      case 'literal':
        this.buf += this.visit(node***REMOVED*** + '\n';
        break;
  ***REMOVED***
***REMOVED***
};

/**
 * Visit Keyframes.
 */

Compiler.prototype.visitKeyframes = function(node***REMOVED***{
  var comma = this.compress ? ',' : ', ';

  var prefix = 'official' == node.prefix
    ? ''
    : '-' + node.prefix + '-';

  this.buf += '@' + prefix + 'keyframes '
    + this.visit(node.name***REMOVED***
    + (this.compress ? '{' : ' {'***REMOVED***;

  ++this.indents;
  node.frames.forEach(function(frame***REMOVED***{
    if (!this.compress***REMOVED*** this.buf += '\n  ';
    this.buf += this.visit(frame.pos.join(comma***REMOVED******REMOVED***;
    this.visit(frame.block***REMOVED***;
***REMOVED***, this***REMOVED***;
  --this.indents;

  this.buf += '}' + (this.compress ? '' : '\n'***REMOVED***;
};

/**
 * Visit Media.
 */

Compiler.prototype.visitMedia = function(media***REMOVED***{
  if (!media.hasProperties***REMOVED*** return '';

  this.buf += '@media ';
  this.visit(media.val***REMOVED***;
  this.buf += this.compress ? '{' : ' {\n';
  ++this.indents;
  this.visit(media.block***REMOVED***;
  --this.indents;
  this.buf += '}' + (this.compress ? '' : '\n'***REMOVED***;
};

/**
 * Visit QueryList.
 */

Compiler.prototype.visitQueryList = function(queries***REMOVED***{
  for (var i = 0, len = queries.nodes.length; i < len; ++i***REMOVED*** {
    this.visit(queries.nodes[i]***REMOVED***;
    if (len - 1 != i***REMOVED*** this.buf += ',' + (this.compress ? '' : ' '***REMOVED***;
***REMOVED***
};

/**
 * Visit Query.
 */

Compiler.prototype.visitQuery = function(node***REMOVED***{
  if (node.predicate***REMOVED*** this.buf += node.predicate + ' ';
  for (var i = 0, len = node.nodes.length; i < len; ++i***REMOVED*** {
    this.visit(node.nodes[i]***REMOVED***;
    if (len - 1 != i***REMOVED*** this.buf += ' and ';
***REMOVED***
};

/**
 * Visit QueryExpr.
 */

Compiler.prototype.visitQueryExpr = function(node***REMOVED***{
  if (!node.expr***REMOVED*** {
    this.buf += node.name;
***REMOVED*** else if (node.expr.isEmpty***REMOVED*** {
    this.buf += '(' + node.name + '***REMOVED***';
***REMOVED*** else {
    this.buf += '(' + node.name + ':' + (this.compress ? '' : ' '***REMOVED*** + this.visit(node.expr***REMOVED*** + '***REMOVED***';
***REMOVED***
};

/**
 * Visit MozDocument.
 */

Compiler.prototype.visitMozDocument = function(mozdocument***REMOVED***{
  this.buf += '@-moz-document ' + mozdocument.val;
  this.buf += this.compress ? '{' : ' {\n';
  ++this.indents;
  this.visit(mozdocument.block***REMOVED***;
  --this.indents;
  this.buf += '}' + (this.compress ? '' : '\n'***REMOVED***;
};

/**
 * Visit Page.
 */

Compiler.prototype.visitPage = function(page***REMOVED***{
  this.buf += this.indent + '@page';
  this.buf += page.selector ? ' ' + page.selector : '';
  this.visit(page.block***REMOVED***;
};

/**
 * Visit Import.
 */

Compiler.prototype.visitImport = function(imported***REMOVED***{
  this.buf += '@import ' + this.visit(imported.path***REMOVED*** + ';\n';
};

/**
 * Visit FontFace.
 */

Compiler.prototype.visitFontFace = function(face***REMOVED***{
  this.buf += this.indent + '@font-face';
  this.visit(face.block***REMOVED***;
};

/**
 * Visit JSLiteral.
 */

Compiler.prototype.visitJSLiteral = function(js***REMOVED***{
  this.js += '\n' + js.val.replace(/@selector/g, '"' + this.selector + '"'***REMOVED***;
  return '';
};

/**
 * Visit Comment.
 */

Compiler.prototype.visitComment = function(comment***REMOVED***{
  return this.compress
    ? comment.suppress
      ? ''
      : comment.str
    : comment.str;
};

/**
 * Visit Function.
 */

Compiler.prototype.visitFunction = function(fn***REMOVED***{
  return fn.name;
};

/**
 * Visit Variable.
 */

Compiler.prototype.visitVariable = function(variable***REMOVED***{
  return '';
};

/**
 * Visit Charset.
 */

Compiler.prototype.visitCharset = function(charset***REMOVED***{
  return '@charset ' + this.visit(charset.val***REMOVED*** + ';';
};

/**
 * Visit Literal.
 */

Compiler.prototype.visitLiteral = function(lit***REMOVED***{
  var val = lit.val.trim(***REMOVED***;
  if (!this.includeCSS***REMOVED*** val = val.replace(/^  /gm, ''***REMOVED***;
  return val;
};

/**
 * Visit Boolean.
 */

Compiler.prototype.visitBoolean = function(bool***REMOVED***{
  return bool.toString(***REMOVED***;
};

/**
 * Visit RGBA.
 */

Compiler.prototype.visitRGBA = function(rgba***REMOVED***{
  return rgba.toString(***REMOVED***;
};

/**
 * Visit HSLA.
 */

Compiler.prototype.visitHSLA = function(hsla***REMOVED***{
  return hsla.rgba.toString(***REMOVED***;
};

/**
 * Visit Unit.
 */

Compiler.prototype.visitUnit = function(unit***REMOVED***{
  var type = unit.type || ''
    , n = unit.val
    , float = n != (n | 0***REMOVED***;

  // Compress
  if (this.compress***REMOVED*** {
    // Always return '0' unless the unit is a percentage or time
    if ('%' != type && 's' != type && 'ms' != type && 0 == n***REMOVED*** return '0';
    // Omit leading '0' on floats
    if (float && n < 1 && n > -1***REMOVED*** {
      return n.toString(***REMOVED***.replace('0.', '.'***REMOVED*** + type;
  ***REMOVED***
***REMOVED***

  return n.toString(***REMOVED*** + type;
};

/**
 * Visit Group.
 */

Compiler.prototype.visitGroup = function(group***REMOVED***{
  var stack = this.stack;

  stack.push(group.nodes***REMOVED***;

  // selectors
  if (group.block.hasProperties***REMOVED*** {
    var selectors = utils.compileSelectors.call(this, stack***REMOVED***;
    if (selectors.length***REMOVED*** {
      this.buf += (this.selector = selectors.join(this.compress ? ',' : ',\n'***REMOVED******REMOVED***;
  ***REMOVED*** else {
      group.block.lacksRenderedSelectors = true;
  ***REMOVED***
***REMOVED***

  // output block
  this.visit(group.block***REMOVED***;
  stack.pop(***REMOVED***;
};

/**
 * Visit Ident.
 */

Compiler.prototype.visitIdent = function(ident***REMOVED***{
  return ident.name;
};

/**
 * Visit String.
 */

Compiler.prototype.visitString = function(string***REMOVED***{
  return this.isURL
    ? string.val
    : string.toString(***REMOVED***;
};

/**
 * Visit Null.
 */

Compiler.prototype.visitNull = function(node***REMOVED***{
  return '';
};

/**
 * Visit Call.
 */

Compiler.prototype.visitCall = function(call***REMOVED***{
  this.isURL = 'url' == call.name;
  var args = call.args.nodes.map(function(arg***REMOVED***{
    return this.visit(arg***REMOVED***;
***REMOVED***, this***REMOVED***.join(this.compress ? ',' : ', '***REMOVED***;
  if (this.isURL***REMOVED*** args = '"' + args + '"';
  this.isURL = false;
  return call.name + '(' + args + '***REMOVED***';
};

/**
 * Visit Expression.
 */

Compiler.prototype.visitExpression = function(expr***REMOVED***{
  var buf = []
    , self = this
    , len = expr.nodes.length
    , nodes = expr.nodes.map(function(node***REMOVED***{ return self.visit(node***REMOVED***; }***REMOVED***;

  nodes.forEach(function(node, i***REMOVED***{
    var last = i == len - 1;
    buf.push(node***REMOVED***;
    if ('/' == nodes[i + 1] || '/' == node***REMOVED*** return;
    if (last***REMOVED*** return;
    buf.push(expr.isList
      ? (self.compress ? ',' : ', '***REMOVED***
      : (self.isURL ? '' : ' '***REMOVED******REMOVED***;
***REMOVED******REMOVED***;

  return buf.join(''***REMOVED***;
};

/**
 * Visit Arguments.
 */

Compiler.prototype.visitArguments = Compiler.prototype.visitExpression;

/**
 * Visit Property.
 */

Compiler.prototype.visitProperty = function(prop***REMOVED***{
  var self = this
    , val = this.visit(prop.expr***REMOVED***.trim(***REMOVED***;
  return this.indent + (prop.name || prop.segments.join(''***REMOVED******REMOVED***
    + (this.compress ? ':' + val : ': ' + val***REMOVED***
    + (this.compress
        ? (this.last ? '' : ';'***REMOVED***
        : ';'***REMOVED***;
};

/**
 * Debug info.
 */

Compiler.prototype.debugInfo = function(node***REMOVED***{

  var path = node.filename == 'stdin' ? 'stdin' : fs.realpathSync(node.filename***REMOVED***
    , line = node.nodes && node.nodes.length ? node.nodes[0].lineno : node.lineno;

  if (this.linenos***REMOVED***{
    this.buf += '\n/* ' + 'line ' + line + ' : ' + path + ' */\n';
***REMOVED***

  if (this.firebug***REMOVED***{
    // debug info for firebug, the crazy formatting is needed
    path = 'file\\\:\\\/\\\/' + path.replace(/([.:/\\]***REMOVED***/g, function(m***REMOVED*** {
      return '\\' + (m === '\\' ? '\/' : m***REMOVED***
  ***REMOVED******REMOVED***;
    line = '\\00003' + line;
    this.buf += '\n@media -stylus-debug-info'
      + '{filename{font-family:' + path
      + '}line{font-family:' + line + '}}\n';
***REMOVED***
}
