
/*!
 * Stylus - plugin - url
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Compiler = require('../visitor/compiler'***REMOVED***
  , events = require('../renderer'***REMOVED***.events
  , nodes = require('../nodes'***REMOVED***
  , parse = require('url'***REMOVED***.parse
  , extname = require('path'***REMOVED***.extname
  , utils = require('../utils'***REMOVED***
  , fs = require('fs'***REMOVED***;

/**
 * Mime table.
 */

var defaultMimes = {
    '.gif': 'image/gif'
  , '.png': 'image/png'
  , '.jpg': 'image/jpeg'
  , '.jpeg': 'image/jpeg'
  , '.svg': 'image/svg+xml'
  , '.ttf': 'application/x-font-ttf'
  , '.eot': 'application/vnd.ms-fontobject'
  , '.woff': 'application/font-woff'
};

/**
 * Return a url(***REMOVED*** function with the given `options`.
 *
 * Options:
 *
 *    - `limit` bytesize limit defaulting to 30Kb
 *    - `paths` image resolution path(s***REMOVED***, merged with general lookup paths
 *
 * Examples:
 *
 *    stylus(str***REMOVED***
 *      .set('filename', __dirname + '/css/test.styl'***REMOVED***
 *      .define('url', stylus.url({ paths: [__dirname + '/public'] }***REMOVED******REMOVED***
 *      .render(function(err, css***REMOVED***{ ... }***REMOVED***
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

module.exports = function(options***REMOVED*** {
  options = options || {};

  var _paths = options.paths || [];
  var sizeLimit = null != options.limit ? options.limit : 30000;
  var mimes = options.mimes || defaultMimes;

  function fn(url***REMOVED***{
    // Compile the url
    var compiler = new Compiler(url***REMOVED***;
    compiler.isURL = true;
    url = url.nodes.map(function(node***REMOVED***{
      return compiler.visit(node***REMOVED***;
  ***REMOVED******REMOVED***.join(''***REMOVED***;

    // Parse literal
    url = parse(url***REMOVED***;
    var ext = extname(url.pathname***REMOVED***
      , mime = mimes[ext]
      , hash = url.hash || ''
      , literal = new nodes.Literal('url("' + url.href + '"***REMOVED***'***REMOVED***
      , paths = _paths.concat(this.paths***REMOVED***
      , buf;

    // Not supported
    if (!mime***REMOVED*** return literal;

    // Absolute
    if (url.protocol***REMOVED*** return literal;

    // Lookup
    var found = utils.lookup(url.pathname, paths***REMOVED***;

    // Failed to lookup
    if (!found***REMOVED*** {
      events.emit(
          'file not found'
        , 'File ' + literal + ' could not be found, literal url retained!'
      ***REMOVED***;

      return literal;
  ***REMOVED***

    // Read data
    buf = fs.readFileSync(found***REMOVED***;

    // To large
    if (false !== sizeLimit && buf.length > sizeLimit***REMOVED*** return literal;

    // Encode
    return new nodes.Literal('url("data:' + mime + ';base64,' + buf.toString('base64'***REMOVED*** + hash + '"***REMOVED***'***REMOVED***;
***REMOVED***;

  fn.raw = true;
  return fn;
};

// Exporting default mimes so we could easily access them
module.exports.mimes = defaultMimes;

