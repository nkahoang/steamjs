vendors = moz webkit o ms official

// stringify the given arg

-string(arg***REMOVED***
  type(arg***REMOVED*** + ' ' + arg

// require a color

require-color(color***REMOVED***
  unless color is a 'color'
    error('RGB or HSL value expected, got a ' + -string(color***REMOVED******REMOVED***

// require a unit

require-unit(n***REMOVED***
  unless n is a 'unit'
    error('unit expected, got a ' + -string(n***REMOVED******REMOVED***

// require a string

require-string(str***REMOVED***
  unless str is a 'string' or str is a 'ident'
    error('string expected, got a ' + -string(str***REMOVED******REMOVED***

// apply js Math function

math(n, fn***REMOVED***
  require-unit(n***REMOVED***
  require-string(fn***REMOVED***
  -math(n, fn***REMOVED***

// adjust the given color's property by amount

adjust(color, prop, amount***REMOVED***
  require-color(color***REMOVED***
  require-string(prop***REMOVED***
  require-unit(amount***REMOVED***
  -adjust(color, prop, amount***REMOVED***

// Math functions

abs(n***REMOVED*** { math(n, 'abs'***REMOVED*** }
min(a, b***REMOVED*** { a < b ? a : b }
max(a, b***REMOVED*** { a > b ? a : b }

// Trigonometrics
PI = -math-prop('PI'***REMOVED***

radians-to-degrees(angle***REMOVED***
  angle * (180 / PI***REMOVED***

degrees-to-radians(angle***REMOVED***
  unit(angle * (PI / 180***REMOVED***,''***REMOVED***

sin(n***REMOVED***
  n = degrees-to-radians(n***REMOVED*** if unit(n***REMOVED*** == 'deg'
  round(math(n, 'sin'***REMOVED***, 9***REMOVED***

cos(n***REMOVED***
  n = degrees-to-radians(n***REMOVED*** if unit(n***REMOVED*** == 'deg'
  round(math(n, 'cos'***REMOVED***, 9***REMOVED***

// Rounding Math functions

ceil(n, precision = 0***REMOVED***
  multiplier = 10 ** precision
  math(n * multiplier, 'ceil'***REMOVED*** / multiplier

floor(n, precision = 0***REMOVED***
  multiplier = 10 ** precision
  math(n * multiplier, 'floor'***REMOVED*** / multiplier

round(n, precision = 0***REMOVED***
  multiplier = 10 ** precision
  math(n * multiplier, 'round'***REMOVED*** / multiplier

// return the sum of the given numbers

sum(nums***REMOVED***
  sum = 0
  sum += n for n in nums

// return the average of the given numbers

avg(nums***REMOVED***
  sum(nums***REMOVED*** / length(nums***REMOVED***

// return a unitless number, or pass through

remove-unit(n***REMOVED***
  if typeof(n***REMOVED*** is "unit"
    unit(n, ""***REMOVED***
  else
    n

// convert a percent to a decimal, or pass through

percent-to-decimal(n***REMOVED***
  if unit(n***REMOVED*** is "%"
    remove-unit(n***REMOVED*** / 100
  else
    n

// color components

alpha(color***REMOVED*** { component(hsl(color***REMOVED***, 'alpha'***REMOVED*** }
hue(color***REMOVED*** { component(hsl(color***REMOVED***, 'hue'***REMOVED*** }
saturation(color***REMOVED*** { component(hsl(color***REMOVED***, 'saturation'***REMOVED*** }
lightness(color***REMOVED*** { component(hsl(color***REMOVED***, 'lightness'***REMOVED*** }

// check if n is an odd number

odd(n***REMOVED***
  1 == n % 2

// check if n is an even number

even(n***REMOVED***
  0 == n % 2

// check if color is light

light(color***REMOVED***
  lightness(color***REMOVED*** >= 50%

// check if color is dark

dark(color***REMOVED***
  lightness(color***REMOVED*** < 50%

// desaturate color by amount

desaturate(color, amount***REMOVED***
  adjust(color, 'saturation', - amount***REMOVED***

// saturate color by amount

saturate(color = '', amount = 100%***REMOVED***
  if color is a 'color'
    adjust(color, 'saturation', amount***REMOVED***
  else
    unquote( "saturate(" + color + "***REMOVED***" ***REMOVED***

// darken by the given amount

darken(color, amount***REMOVED***
  adjust(color, 'lightness', - amount***REMOVED***

// lighten by the given amount

lighten(color, amount***REMOVED***
  adjust(color, 'lightness', amount***REMOVED***

// decerase opacity by amount

fade-out(color, amount***REMOVED***
  color - rgba(black, percent-to-decimal(amount***REMOVED******REMOVED***

// increase opacity by amount

fade-in(color, amount***REMOVED***
  color + rgba(black, percent-to-decimal(amount***REMOVED******REMOVED***

// spin hue by a given amount

spin(color, amount***REMOVED***
  color + unit(amount, deg***REMOVED***

// mix two colors by a given amount

mix(color1, color2, weight = 50%***REMOVED***
  unless weight in 0..100
    error("Weight must be between 0% and 100%"***REMOVED***

  if length(color1***REMOVED*** == 2
    weight = color1[0]
    color1 = color1[1]

  else if length(color2***REMOVED*** == 2
    weight = 100 - color2[0]
    color2 = color2[1]

  require-color(color1***REMOVED***
  require-color(color2***REMOVED***

  p = unit(weight / 100, ''***REMOVED***
  w = p * 2 - 1

  a = alpha(color1***REMOVED*** - alpha(color2***REMOVED***

  w1 = (((w * a == -1***REMOVED*** ? w : (w + a***REMOVED*** / (1 + w * a***REMOVED******REMOVED*** + 1***REMOVED*** / 2
  w2 = 1 - w1

  channels = (red(color1***REMOVED*** red(color2***REMOVED******REMOVED*** (green(color1***REMOVED*** green(color2***REMOVED******REMOVED*** (blue(color1***REMOVED*** blue(color2***REMOVED******REMOVED***
  rgb = (***REMOVED***

  for pair in channels
    push(rgb, floor(pair[0] * w1 + pair[1] * w2***REMOVED******REMOVED***

  a1 = alpha(color1***REMOVED*** * p
  a2 = alpha(color1***REMOVED*** * (1 - p***REMOVED***
  alpha = a1 + a2

  rgba(rgb[0], rgb[1], rgb[2], alpha***REMOVED***

// invert colors, leave alpha intact

invert(color = ''***REMOVED***
  if color is a 'color'
    r = 255 - red(color***REMOVED***
    g = 255 - green(color***REMOVED***
    b = 255 - blue(color***REMOVED***
    rgba(r,g,b,alpha(color***REMOVED******REMOVED***
  else
    unquote( "invert(" + color + "***REMOVED***" ***REMOVED***

// give complement of the given color

complement( color ***REMOVED***
  spin( color, 180 ***REMOVED***

// give grayscale of the given color

grayscale( color = '' ***REMOVED***
  if color is a 'color'
    desaturate( color, 100% ***REMOVED***
  else
    unquote( "grayscale(" + color + "***REMOVED***" ***REMOVED***

// mix the given color with white

tint( color, percent ***REMOVED***
  mix( white, color, percent ***REMOVED***

// mix the given color with black

shade( color, percent ***REMOVED***
  mix( black, color, percent ***REMOVED***

// return the last value in the given expr

last(expr***REMOVED***
  expr[length(expr***REMOVED*** - 1]

// return keys in the given pairs or object

keys(pairs***REMOVED***
  ret = (***REMOVED***
  if type(pairs***REMOVED*** == 'object'
    for key in pairs
      push(ret, key***REMOVED***
  else
    for pair in pairs
      push(ret, pair[0]***REMOVED***;
  ret

// return values in the given pairs or object

values(pairs***REMOVED***
  ret = (***REMOVED***
  if type(pairs***REMOVED*** == 'object'
    for key, val in pairs
      push(ret, val***REMOVED***
  else
    for pair in pairs
      push(ret, pair[1]***REMOVED***;
  ret

// join values with the given delimiter

join(delim, vals...***REMOVED***
  buf = ''
  vals = vals[0] if length(vals***REMOVED*** == 1
  for val, i in vals
    buf += i ? delim + val : val

// add a CSS rule to the containing block

// - This definition allows add-property to be used as a mixin
// - It has the same effect as interpolation but allows users
//   to opt for a functional style

add-property-function = add-property
add-property(name, expr***REMOVED***
  if mixin
    {name} expr
  else
    add-property-function(name, expr***REMOVED***

prefix-classes(prefix***REMOVED***
  -prefix-classes(prefix, block***REMOVED***
