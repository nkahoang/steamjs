

/*!
 * Stylus - plugin - url
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var utils = require('../utils'***REMOVED***
  , nodes = require('../nodes'***REMOVED***
  , fs = require('fs'***REMOVED***
  , ***REMOVED***
  , sax = require('sax'***REMOVED***;

/**
 * Initialize a new `Image` with the given `ctx` and `path.
 *
 * @param {Evaluator} ctx
 * @param {String} path
 * @api private
 */

var Image = module.exports = function Image(ctx, path***REMOVED*** {
  this.ctx = ctx;
  this.path = utils.lookup(path, ctx.paths***REMOVED***;
  if (!this.path***REMOVED*** throw new Error('failed to locate file ' + path***REMOVED***;
};

/**
 * Open the image for reading.
 *
 * @api private
 */

Image.prototype.open = function(***REMOVED***{
  this.fd = fs.openSync(this.path, 'r'***REMOVED***;
  this.length = fs.fstatSync(this.fd***REMOVED***.size;
  this.extname = path.extname(this.path***REMOVED***.slice(1***REMOVED***;
};

/**
 * Close the file.
 *
 * @api private
 */

Image.prototype.close = function(***REMOVED***{
  if (this.fd***REMOVED*** fs.closeSync(this.fd***REMOVED***;
};

/**
 * Return the type of image, supports:
 *
 *  - gif
 *  - png
 *  - jpeg
 *  - svg
 *
 * @return {String}
 * @api private
 */

Image.prototype.type = function(***REMOVED***{
  var type
    , buf = new Buffer(4***REMOVED***;
  
  fs.readSync(this.fd, buf, 0, 4, 0***REMOVED***;

  // GIF
  if (0x47 == buf[0] && 0x49 == buf[1] && 0x46 == buf[2]***REMOVED*** type = 'gif';

  // PNG
  else if (0x50 == buf[1] && 0x4E == buf[2] && 0x47 == buf[3]***REMOVED*** type = 'png';

  // JPEG
  else if (0xff == buf[0] && 0xd8 == buf[1]***REMOVED*** type = 'jpeg';

  // SVG
  else if ('svg' == this.extname***REMOVED*** type = this.extname;

  return type;
};

/**
 * Return image dimensions `[width, height]`.
 *
 * @return {Array}
 * @api private
 */

Image.prototype.size = function(***REMOVED***{
  var type = this.type(***REMOVED***
    , width
    , height
    , buf
    , offset
    , blockSize
    , parser;

  function uint16(b***REMOVED*** { return b[1] << 8 | b[0]; }
  function uint32(b***REMOVED*** { return b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]; } 

  // Determine dimensions
  switch (type***REMOVED*** {
    case 'jpeg':
      buf = new Buffer(this.length***REMOVED***;
      fs.readSync(this.fd, buf, 0, this.length, 0***REMOVED***;
      offset = 4;
      blockSize = buf[offset] << 8 | buf[offset + 1];

      while (offset < this.length***REMOVED*** {
        offset += blockSize;
        if (offset >= this.length || 0xff != buf[offset]***REMOVED*** break;
        // SOF0 or SOF2 (progressive***REMOVED***
        if (0xc0 == buf[offset + 1] || 0xc2 == buf[offset + 1]***REMOVED*** {
          height = buf[offset + 5] << 8 | buf[offset + 6];
          width = buf[offset + 7] << 8 | buf[offset + 8];
      ***REMOVED*** else {
          offset += 2;
          blockSize = buf[offset] << 8 | buf[offset + 1];
      ***REMOVED***
    ***REMOVED***
      break;
    case 'png':
      buf = new Buffer(8***REMOVED***;
      // IHDR chunk width / height uint32_t big-endian
      fs.readSync(this.fd, buf, 0, 8, 16***REMOVED***;
      width = uint32(buf***REMOVED***;
      height = uint32(buf.slice(4, 8***REMOVED******REMOVED***;
      break;
    case 'gif':
      buf = new Buffer(4***REMOVED***;
      // width / height uint16_t little-endian
      fs.readSync(this.fd, buf, 0, 4, 6***REMOVED***;
      width = uint16(buf***REMOVED***;
      height = uint16(buf.slice(2, 4***REMOVED******REMOVED***;
      break;
    case 'svg':
      offset = Math.min(this.length, 1024***REMOVED***;
      buf = new Buffer(offset***REMOVED***;
      fs.readSync(this.fd, buf, 0, offset, 0***REMOVED***;
      buf = buf.toString('utf8'***REMOVED***;
      parser = sax.parser(true***REMOVED***;
      parser.onopentag = function(node***REMOVED*** {
        if ('svg' == node.name && node.attributes.width && node.attributes.height***REMOVED*** {
          width = parseInt(node.attributes.width, 10***REMOVED***;
          height = parseInt(node.attributes.height, 10***REMOVED***;
      ***REMOVED***
    ***REMOVED***;
      parser.write(buf***REMOVED***.close(***REMOVED***;
      break;
***REMOVED***

  if ('number' != typeof width***REMOVED*** throw new Error('failed to find width of "' + this.path + '"'***REMOVED***;
  if ('number' != typeof height***REMOVED*** throw new Error('failed to find height of "' + this.path + '"'***REMOVED***;

  return [width, height];
};
