/**
 * Module dependencies.
 */

var Compiler = require('../visitor/compiler'***REMOVED***
  , nodes = require('../nodes'***REMOVED***
  , parse = require('url'***REMOVED***.parse
  , relative = require('path'***REMOVED***.relative
  , dirname = require('path'***REMOVED***.dirname
  , extname = require('path'***REMOVED***.extname
  , sep = require('path'***REMOVED***.sep
  , utils = require('../utils'***REMOVED***;

/**
 * Return a url(***REMOVED*** function with the given `options`.
 *
 * Options:
 *
 *    - `paths` resolution path(s***REMOVED***, merged with general lookup paths
 *
 * Examples:
 *
 *    stylus(str***REMOVED***
 *      .set('filename', __dirname + '/css/test.styl'***REMOVED***
 *      .define('url', stylus.resolver({ paths: [__dirname + '/public'] }***REMOVED******REMOVED***
 *      .render(function(err, css***REMOVED***{ ... }***REMOVED***
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

module.exports = function(options***REMOVED*** {
  options = options || {};

  var _paths = options.paths || [];

  function url(url***REMOVED*** {
    // Compile the url
    var compiler = new Compiler(url***REMOVED***;
    compiler.isURL = true;
    var url = url.nodes.map(function(node***REMOVED***{
      return compiler.visit(node***REMOVED***;
  ***REMOVED******REMOVED***.join(''***REMOVED***;

    // Parse literal 
    var url = parse(url***REMOVED***
      , literal = new nodes.Literal('url("' + url.href + '"***REMOVED***'***REMOVED***
      , paths = _paths.concat(this.paths***REMOVED***
      , tail = ''
      , res
      , found;

    // Absolute
    if (url.protocol***REMOVED*** return literal;

    // Lookup
    found = utils.lookup(url.pathname, paths, '', true***REMOVED***;

    // Failed to lookup
    if (!found***REMOVED*** return literal;

    if (url.search***REMOVED*** tail += url.search;
    if (url.hash***REMOVED*** tail += url.hash;

    if (this.includeCSS && extname(found***REMOVED*** == '.css'***REMOVED*** {
      return new nodes.Literal(found + tail***REMOVED***;
  ***REMOVED*** else {
      res = relative(dirname(this.filename***REMOVED***, found***REMOVED*** + tail;
      if ('\\' == sep***REMOVED*** res = res.replace(/\\/g, '/'***REMOVED***;
      return new nodes.Literal('url("' + res + '"***REMOVED***'***REMOVED***;
  ***REMOVED***
***REMOVED***;

  url.raw = true;
  return url;
};
