
/*!
 * Stylus - Call
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Node = require('./node'***REMOVED***;

/**
 * Initialize a new `Call` with `name` and `args`.
 *
 * @param {String} name
 * @param {Expression} args
 * @api public
 */

var Call = module.exports = function Call(name, args***REMOVED***{
  Node.call(this***REMOVED***;
  this.name = name;
  this.args = args;
};

/**
 * Inherit from `Node.prototype`.
 */

Call.prototype.__proto__ = Node.prototype;

/**
 * Return a clone of this node.
 * 
 * @return {Node}
 * @api public
 */

Call.prototype.clone = function(***REMOVED***{
  var clone = new Call(this.name, this.args.clone(***REMOVED******REMOVED***;
  if (this.block***REMOVED*** clone.block = this.block.clone(***REMOVED***;
  clone.lineno = this.lineno;
  clone.filename = this.filename;
  return clone;
};

/**
 * Return <name>(param1, param2, ...***REMOVED***.
 *
 * @return {String}
 * @api public
 */

Call.prototype.toString = function(***REMOVED***{
  var args = this.args.nodes.map(function(node***REMOVED*** {
    var str = node.toString(***REMOVED***;
    return str.slice(1, str.length - 1***REMOVED***;
***REMOVED******REMOVED***.join(', '***REMOVED***;

  return this.name + '(' + args + '***REMOVED***';
};
