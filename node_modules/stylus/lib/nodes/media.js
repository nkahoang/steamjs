
/*!
 * Stylus - Media
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Node = require('./node'***REMOVED***
  , nodes = require('./'***REMOVED***;

/**
 * Initialize a new `Media` with the given `val`
 *
 * @param {String} val
 * @api public
 */

var Media = module.exports = function Media(val***REMOVED***{
  Node.call(this***REMOVED***;
  this.val = val;
};

/**
 * Inherit from `Node.prototype`.
 */

Media.prototype.__proto__ = Node.prototype;

/**
 * Clone this node.
 *
 * @return {Media}
 * @api public
 */

Media.prototype.clone = function(***REMOVED***{
  var clone = new Media(this.val.clone(***REMOVED******REMOVED***;
  clone.block = this.block.clone(***REMOVED***;
  return clone;
};

/**
 * Check if media block has properties.
 *
 * @return {Boolean}
 * @api public
 */

Media.prototype.__defineGetter__('hasProperties', function(***REMOVED***{
  return hasProperties(this.block***REMOVED***;
}***REMOVED***;

/**
 * Return @media "val".
 *
 * @return {String}
 * @api public
 */

Media.prototype.toString = function(***REMOVED***{
  return '@media ' + this.val;
};

function hasProperties(block***REMOVED*** {
  for (var i = 0, len = block.nodes.length; i < len; i++***REMOVED*** {
    var node = block.nodes[i];
    switch (node.nodeName***REMOVED*** {
      case 'property':
        return true;
      case 'group':
        return !node.hasOnlyPlaceholders && hasProperties(node.block***REMOVED***;
      case 'block':
        return hasProperties(node***REMOVED***;
      default:
        if (node.block***REMOVED*** return hasProperties(node.block***REMOVED***;
  ***REMOVED***
***REMOVED***
}
