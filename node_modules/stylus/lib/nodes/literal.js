
/*!
 * Stylus - Literal
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Node = require('./node'***REMOVED***
  , nodes = require('./'***REMOVED***;

/**
 * Initialize a new `Literal` with the given `str`.
 *
 * @param {String} str
 * @api public
 */

var Literal = module.exports = function Literal(str***REMOVED***{
  Node.call(this***REMOVED***;
  this.val = str;
  this.string = str;
  this.prefixed = false;
};

/**
 * Inherit from `Node.prototype`.
 */

Literal.prototype.__proto__ = Node.prototype;

/**
 * Return hash.
 *
 * @return {String}
 * @api public
 */

Literal.prototype.__defineGetter__('hash', function(***REMOVED***{
  return this.val;
}***REMOVED***;

/**
 * Return literal value.
 *
 * @return {String}
 * @api public
 */

Literal.prototype.toString = function(***REMOVED***{
  return this.val;
};

/**
 * Coerce `other` to a literal.
 *
 * @param {Node} other
 * @return {String}
 * @api public
 */

Literal.prototype.coerce = function(other***REMOVED***{
  switch (other.nodeName***REMOVED*** {
    case 'ident':
    case 'string':
    case 'literal':
      return new Literal(other.string***REMOVED***;
    default:
      return Node.prototype.coerce.call(this, other***REMOVED***;
***REMOVED***
};

/**
 * Operate on `right` with the given `op`.
 *
 * @param {String} op
 * @param {Node} right
 * @return {Node}
 * @api public
 */

Literal.prototype.operate = function(op, right***REMOVED***{
  var val = right.first;
  switch (op***REMOVED*** {
    case '+':
      return new nodes.Literal(this.string + this.coerce(val***REMOVED***.string***REMOVED***;
    default:
      return Node.prototype.operate.call(this, op, right***REMOVED***;
***REMOVED***
};
