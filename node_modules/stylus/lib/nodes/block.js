
/*!
 * Stylus - Block
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Node = require('./node'***REMOVED***;

/**
 * Initialize a new `Block` node with `parent` Block.
 *
 * @param {Block} parent
 * @api public
 */

var Block = module.exports = function Block(parent, node***REMOVED***{
  Node.call(this***REMOVED***;
  this.nodes = [];
  this.parent = parent;
  this.node = node;
  this.scope = true;
};

/**
 * Inherit from `Node.prototype`.
 */

Block.prototype.__proto__ = Node.prototype;

/**
 * Check if this block has properties..
 *
 * @return {Boolean}
 * @api public
 */

Block.prototype.__defineGetter__('hasProperties', function(***REMOVED***{
  for (var i = 0, len = this.nodes.length; i < len; ++i***REMOVED*** {
    if ('property' == this.nodes[i].nodeName***REMOVED*** {
      return true;
  ***REMOVED***
***REMOVED***
}***REMOVED***;

/**
 * Check if this block has @media nodes.
 *
 * @return {Boolean}
 * @api public
 */

Block.prototype.__defineGetter__('hasMedia', function(***REMOVED***{
  for (var i = 0, len = this.nodes.length; i < len; ++i***REMOVED*** {
    var nodeName = this.nodes[i].nodeName;
    if ('media' == nodeName***REMOVED*** {
      return true;
  ***REMOVED***
***REMOVED***
  return false;
}***REMOVED***;

/**
 * Check if this block is empty.
 *
 * @return {Boolean}
 * @api public
 */

Block.prototype.__defineGetter__('isEmpty', function(***REMOVED***{
  return !this.nodes.length;
}***REMOVED***;

/**
 * Return a clone of this node.
 * 
 * @return {Node}
 * @api public
 */

Block.prototype.clone = function(***REMOVED***{
  var clone = new Block(this.parent, this.node***REMOVED***;
  clone.lineno = this.lineno;
  clone.filename = this.filename;
  clone.scope = this.scope;
  this.nodes.forEach(function(node***REMOVED***{
    node = node.clone(***REMOVED***;
    switch (node.nodeName***REMOVED*** {
      case 'each':
      case 'group':
        node.block.parent = clone;
        break;
      case 'media':
      case 'fontface':
        clone.scope = true;
        node.block.parent = clone;
        break;
      case 'ident':
        if ('function' == node.val.nodeName***REMOVED*** {
          node.val.block.parent = clone;
      ***REMOVED***
  ***REMOVED***
    clone.push(node***REMOVED***;
***REMOVED******REMOVED***;
  return clone;
};

/**
 * Push a `node` to this block.
 *
 * @param {Node} node
 * @api public
 */

Block.prototype.push = function(node***REMOVED***{
  this.nodes.push(node***REMOVED***;
};
