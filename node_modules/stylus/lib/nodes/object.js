
/*!
 * Stylus - Object
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Node = require('./node'***REMOVED***
  , nodes = require('./'***REMOVED***
  , nativeObj = {}.constructor;

/**
 * Initialize a new `Object`.
 *
 * @api public
 */

var Object = module.exports = function Object(***REMOVED***{
  Node.call(this***REMOVED***;
  this.vals = {};
};

/**
 * Inherit from `Node.prototype`.
 */

Object.prototype.__proto__ = Node.prototype;

/**
 * Set `key` to `val`.
 *
 * @param {String} key
 * @param {Node} val
 * @return {Object} for chaining
 * @api public
 */

Object.prototype.set = function(key, val***REMOVED***{
  this.vals[key] = val;
  return this;
};

/**
 * Return length.
 *
 * @return {Number}
 * @api public
 */

Object.prototype.__defineGetter__('length', function(***REMOVED*** {
  return nativeObj.keys(this.vals***REMOVED***.length;
}***REMOVED***;

/**
 * Get `key`.
 *
 * @param {String} key
 * @return {Node}
 * @api public
 */

Object.prototype.get = function(key***REMOVED***{
  return this.vals[key] || nodes.null;
};

/**
 * Has `key`?
 *
 * @param {String} key
 * @return {Boolean}
 * @api public
 */

Object.prototype.has = function(key***REMOVED***{
  return key in this.vals;
};

/**
 * Operate on `right` with the given `op`.
 *
 * @param {String} op
 * @param {Node} right
 * @return {Node}
 * @api public
 */

Object.prototype.operate = function(op, right***REMOVED***{
  switch (op***REMOVED*** {
    case '.':
    case '[]':
      return this.get(right.hash***REMOVED***;
    default:
      return Node.prototype.operate.call(this, op, right***REMOVED***;
***REMOVED***
};

/**
 * Return Boolean based on the length of this object.
 *
 * @return {Boolean}
 * @api public
 */

Object.prototype.toBoolean = function(***REMOVED***{
  return nodes.Boolean(this.length***REMOVED***;
};

/**
 * Convert object to string with properties.
 *
 * @return {String}
 * @api private
 */

Object.prototype.toBlock = function(***REMOVED***{
  var str = '{'
    , key
    , val;
  for (key in this.vals***REMOVED*** {
    val = this.get(key***REMOVED***;
    if ('object' == val.first.nodeName***REMOVED*** {
      str += key + ' ' + this.toBlock.call(val.first***REMOVED***;
  ***REMOVED*** else {
      switch (key***REMOVED*** {
        case '@charset':
          str += key + ' ' + val.first.toString(***REMOVED*** + ';';
          break;
        default:
          str += key + ':' + val.toString(***REMOVED*** + ';';
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  str += '}';
  return str;
};

/**
 * Return a clone of this node.
 * 
 * @return {Node}
 * @api public
 */

Object.prototype.clone = function(***REMOVED***{
  var clone = new Object;
  clone.lineno = this.lineno;
  clone.filename = this.filename;
  for (var key in this.vals***REMOVED*** {
    clone.vals[key] = this.vals[key].clone(***REMOVED***;
***REMOVED***
  return clone;
};

/**
 * Return "{ <prop>: <val> }"
 *
 * @return {String}
 * @api public
 */

Object.prototype.toString = function(***REMOVED***{
  var obj = {};
  for (var prop in this.vals***REMOVED*** {
    obj[prop] = this.vals[prop].toString(***REMOVED***;
***REMOVED***
  return JSON.stringify(obj***REMOVED***;
};
