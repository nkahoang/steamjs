
/*!
 * Stylus - BinOp
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Node = require('./node'***REMOVED***;

/**
 * Initialize a new `BinOp` with `op`, `left` and `right`.
 *
 * @param {String} op
 * @param {Node} left
 * @param {Node} right
 * @api public
 */

var BinOp = module.exports = function BinOp(op, left, right***REMOVED***{
  Node.call(this***REMOVED***;
  this.op = op;
  this.left = left;
  this.right = right;
};

/**
 * Inherit from `Node.prototype`.
 */

BinOp.prototype.__proto__ = Node.prototype;

/**
 * Return a clone of this node.
 * 
 * @return {Node}
 * @api public
 */

BinOp.prototype.clone = function(***REMOVED***{
  var clone = new BinOp(
      this.op
    , this.left.clone(***REMOVED***
    , this.right ?
      this.right.clone(***REMOVED***
      : null***REMOVED***;
  clone.lineno = this.lineno;
  clone.filename = this.filename;
  if (this.val***REMOVED*** clone.val = this.val.clone(***REMOVED***;
  return clone;
};

/**
 * Return <left> <op> <right>
 *
 * @return {String}
 * @api public
 */
BinOp.prototype.toString = function(***REMOVED*** {
  return this.left.toString(***REMOVED*** + ' ' + this.op + ' ' + this.right.toString(***REMOVED***;
};
