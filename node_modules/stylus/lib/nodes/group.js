
/*!
 * Stylus - Group
 * Copyright(c***REMOVED*** 2010 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Node = require('./node'***REMOVED***;

/**
 * Initialize a new `Group`.
 *
 * @api public
 */

var Group = module.exports = function Group(***REMOVED***{
  Node.call(this***REMOVED***;
  this.nodes = [];
  this.extends = [];
};

/**
 * Inherit from `Node.prototype`.
 */

Group.prototype.__proto__ = Node.prototype;

/**
 * Push the given `selector` node.
 *
 * @param {Selector} selector
 * @api public
 */

Group.prototype.push = function(selector***REMOVED***{
  this.nodes.push(selector***REMOVED***;
};

/**
 * Return this set's `Block`.
 */

Group.prototype.__defineGetter__('block', function(***REMOVED***{
  return this.nodes[0].block;
}***REMOVED***;

/**
 * Assign `block` to each selector in this set.
 *
 * @param {Block} block
 * @api public
 */

Group.prototype.__defineSetter__('block', function(block***REMOVED***{
  for (var i = 0, len = this.nodes.length; i < len; ++i***REMOVED*** {
    this.nodes[i].block = block;
***REMOVED***
}***REMOVED***;

/**
 * Check if this set has only placeholders.
 *
 * @return {Boolean}
 * @api public
 */

Group.prototype.__defineGetter__('hasOnlyPlaceholders', function(***REMOVED***{
  return this.nodes.every(function(selector***REMOVED*** { return selector.isPlaceholder; }***REMOVED***;
}***REMOVED***;

/**
 * Return a clone of this node.
 * 
 * @return {Node}
 * @api public
 */

Group.prototype.clone = function(***REMOVED***{
  var clone = new Group;
  clone.lineno = this.lineno;
  this.nodes.forEach(function(node***REMOVED***{
    clone.push(node.clone(***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
  clone.filename = this.filename;
  clone.block = this.block.clone(***REMOVED***;
  return clone;
};
