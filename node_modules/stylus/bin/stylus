#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs'***REMOVED***
  , stylus = require('../lib/stylus'***REMOVED***
  , basename = require('path'***REMOVED***.basename
  , dirname = require('path'***REMOVED***.dirname
  , resolve = require('path'***REMOVED***.resolve
  , join = require('path'***REMOVED***.join
  , isWindows = process.platform === 'win32';

/**
 * Arguments.
 */

var args = process.argv.slice(2***REMOVED***;

/**
 * Compare flag.
 */

var compare = false;

/**
 * Compress flag.
 */

var compress = false;

/**
 * CSS conversion flag.
 */

var convertCSS = false;

/**
 * Line numbers flag.
 */

var linenos = false;

/**
 * CSS class prefix.
 */
var prefix = '';

/**
 * Print to stdout flag.
 */
var print = false;

/**
 * Firebug flag
 */

var firebug = false;

/**
 * Files to processes.
 */

var files = [];

/**
 * Import paths.
 */

var paths = [];

/**
 * Destination directory.
 */

var dest;

/**
 * Watcher hash.
 */

var watchers;

/**
 * Enable REPL.
 */

var interactive;

/**
 * Plugins.
 */

var plugins = [];

/**
 * Optional url(***REMOVED*** function.
 */

var urlFunction = false;

/**
 * Include CSS on import.
 */

var includeCSS = false;

/**
 * Set file imports.
 */

var imports = [];

/**
 * Resolve relative urls
 */

var resolveURL = false;

/**
 * Display dependencies flag.
 */

var deps = false;

/**
 * Usage docs.
 */

var usage = [
    ''
  , '  Usage: stylus [options] [command] [< in [> out]]'
  , '                [file|dir ...]'
  , ''
  , '  Commands:'
  , ''
  , '    help [<type>:]<prop> Opens help info at MDN for <prop> in'
  , '                         your default browser. Optionally'
  , '                         searches other resources of <type>:'
  , '                         safari opera w3c ms caniuse quirksmode'
  , ''
  , '  Options:'
  , ''
  , '    -i, --interactive       Start interactive REPL'
  , '    -u, --use <path>        Utilize the Stylus plugin at <path>'
  , '    -U, --inline            Utilize image inlining via data URI support'
  , '    -w, --watch             Watch file(s***REMOVED*** for changes and re-compile'
  , '    -o, --out <dir>         Output to <dir> when passing files'
  , '    -C, --css <src> [dest]  Convert CSS input to Stylus'
  , '    -I, --include <path>    Add <path> to lookup paths'
  , '    -c, --compress          Compress CSS output'
  , '    -d, --compare           Display input along with output'
  , '    -f, --firebug           Emits debug infos in the generated CSS that'
  , '                            can be used by the FireStylus Firebug plugin'
  , '    -l, --line-numbers      Emits comments in the generated CSS'
  , '                            indicating the corresponding Stylus line'
  , '    -P, --prefix [prefix]   prefix all css classes'
  , '    -p, --print             Print out the compiled CSS'
  , '    --import <file>         Import stylus <file>'
  , '    --include-css           Include regular CSS on @import'
  , '    -D, --deps              Display dependencies of the compiled file'
  , '    -r, --resolve-url       Resolve relative urls inside imports'
  , '    -V, --version           Display the version of Stylus'
  , '    -h, --help              Display help information'
  , ''
].join('\n'***REMOVED***;

/**
 * Handle arguments.
 */

var arg;
while (args.length***REMOVED*** {
  arg = args.shift(***REMOVED***;
  switch (arg***REMOVED*** {
    case '-h':
    case '--help':
      console.error(usage***REMOVED***;
      process.exit(1***REMOVED***;
    case '-d':
    case '--compare':
      compare = true;
      break;
    case '-c':
    case '--compress':
      compress = true;
      break;
    case '-C':
    case '--css':
      convertCSS = true;
      break;
    case '-f':
    case '--firebug':
      firebug = true;
      break;
    case '-l':
    case '--line-numbers':
      linenos = true;
      break;
    case '-P':
    case '--prefix':
      prefix = args.shift(***REMOVED***;
      if (!prefix***REMOVED*** throw new Error('--prefix <prefix> required'***REMOVED***;
      break;
    case '-p':
    case '--print':
      print = true;
      break;
    case '-V':
    case '--version':
      console.log(stylus.version***REMOVED***;
      process.exit(0***REMOVED***;
      break;
    case '-o':
    case '--out':
      dest = args.shift(***REMOVED***;
      if (!dest***REMOVED*** throw new Error('--out <dir> required'***REMOVED***;
      break;
    case 'help':
      var name = args.shift(***REMOVED***
        , browser = name.split(':'***REMOVED***;
      if (browser.length > 1***REMOVED*** {
        name = [].slice.call(browser, 1***REMOVED***.join(':'***REMOVED***;
        browser = browser[0];
    ***REMOVED*** else {
        name = browser[0];
        browser = '';
    ***REMOVED***
      if (!name***REMOVED*** throw new Error('help <property> required'***REMOVED***;
      help(name***REMOVED***;
      break;
    case '--include-css':
      includeCSS = true;
      break;
    case '-i':
    case '--repl':
    case '--interactive':
      interactive = true;
      break;
    case '-I':
    case '--include':
      var path = args.shift(***REMOVED***;
      if (!path***REMOVED*** throw new Error('--include <path> required'***REMOVED***;
      paths.push(path***REMOVED***;
      break;
    case '-w':
    case '--watch':
      watchers = {};
      break;
    case '-U':
    case '--inline':
      args.unshift('--use', 'url'***REMOVED***;
      break;
    case '-u':
    case '--use':
      var options;
      var path = args.shift(***REMOVED***;
      if (!path***REMOVED*** throw new Error('--use <path> required'***REMOVED***;

      // options
      if ('--with' == args[0]***REMOVED*** {
        args.shift(***REMOVED***;
        options = args.shift(***REMOVED***;
        if (!options***REMOVED*** throw new Error('--with <options> required'***REMOVED***;
        options = eval('(' + options + '***REMOVED***'***REMOVED***;
    ***REMOVED***

      // url support
      if ('url' == path***REMOVED*** {
        urlFunction = options || {};
    ***REMOVED*** else {
        paths.push(dirname(path***REMOVED******REMOVED***;
        plugins.push({ path: path, options: options }***REMOVED***;
    ***REMOVED***
      break;
    case '--import':
      var file = args.shift(***REMOVED***;
      if (!file***REMOVED*** throw new Error('--import <file> required'***REMOVED***;
      imports.push(file***REMOVED***;
      break;
    case '-r':
    case '--resolve-url':
      resolveURL = true;
      break;
    case '-D':
    case '--deps':
      deps = true;
      break;
    default:
      files.push(arg***REMOVED***;
***REMOVED***
}

// if --watch is used, assume we are
// not working with stdio

if (watchers && !files.length***REMOVED*** {
  files = fs.readdirSync(process.cwd(***REMOVED******REMOVED***
    .filter(function(file***REMOVED***{
    return file.match(/\.styl$/***REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * Open the default browser to the CSS property `name`.
 *
 * @param {String} name
 */

function help(name***REMOVED*** {
  var url
    , exec = require('child_process'***REMOVED***.exec
    , command;

  name = encodeURIComponent(name***REMOVED***;

  switch (browser***REMOVED*** {
    case 'safari':
    case 'webkit':
      url = 'https://developer.apple.com/library/safari/search/?q=' + name;
      break;
    case 'opera':
      url = 'http://dev.opera.com/search/?term=' + name;
      break;
    case 'w3c':
      url = 'http://www.google.com/search?q=site%3Awww.w3.org%2FTR+' + name;
      break;
    case 'ms':
      url = 'http://social.msdn.microsoft.com/search/en-US/ie?query=' + name + '&refinement=59%2c61';
      break;
    case 'caniuse':
      url = 'http://caniuse.com/#search=' + name;
      break;
    case 'quirksmode':
      url = 'http://www.google.com/search?q=site%3Awww.quirksmode.org+' + name;
      break;
    default:
      url = 'https://developer.mozilla.org/en/CSS/' + name;
***REMOVED***

  switch (process.platform***REMOVED*** {
    case 'linux': command = 'x-www-browser'; break;
    default: command = 'open';
***REMOVED***

  exec(command + ' "' + url + '"', function(***REMOVED***{
    process.exit(0***REMOVED***;
***REMOVED******REMOVED***;
}

// Compilation options

var options = {
    filename: 'stdin'
  , compress: compress
  , firebug: firebug
  , linenos: linenos
  , paths: [process.cwd(***REMOVED***].concat(paths***REMOVED***
  , prefix: prefix
};

// Buffer stdin

var str = '';

// Convert CSS to Stylus

if (convertCSS***REMOVED*** {
    switch (files.length***REMOVED*** {
    case 2:
      compileCSSFile(files[0], files[1]***REMOVED***;
      break;
    case 1:
      compileCSSFile(files[0], files[0].replace(/\.css$/i, '.styl'***REMOVED******REMOVED***;
      break;
    default:
      var stdin = process.openStdin(***REMOVED***;
      stdin.setEncoding('utf8'***REMOVED***;
      stdin.on('data', function(chunk***REMOVED***{ str += chunk; }***REMOVED***;
      stdin.on('end', function(***REMOVED***{
        var out = stylus.convertCSS(str***REMOVED***;
        console.log(out***REMOVED***;
    ***REMOVED******REMOVED***;
***REMOVED***
} else if (interactive***REMOVED*** {
  repl(***REMOVED***;
} else if (deps***REMOVED*** {
  // if --deps is used, just display list of the dependencies
  // not working with stdio and dirs
  displayDeps(***REMOVED***;
} else {
  if (files.length***REMOVED*** {
    compileFiles(files***REMOVED***;
***REMOVED*** else {
    compileStdio(***REMOVED***;
***REMOVED***
}

/**
 * Start Stylus REPL.
 */

function repl(***REMOVED*** {
  var options = { filename: 'stdin', imports: [join(__dirname, '..', 'lib', 'functions'***REMOVED***] }
    , parser = new stylus.Parser('', options***REMOVED***
    , evaluator = new stylus.Evaluator(parser.parse(***REMOVED***, options***REMOVED***
    , rl = require('readline'***REMOVED***
    , repl = rl.createInterface(process.stdin, process.stdout, autocomplete***REMOVED***
    , global = evaluator.global.scope;

  // expose BIFs
  evaluator.evaluate(***REMOVED***;

  // readline
  repl.setPrompt('> '***REMOVED***;
  repl.prompt(***REMOVED***;

  // HACK: flat-list auto-complete
  function autocomplete(line***REMOVED***{
    var out = process.stdout
      , keys = Object.keys(global.locals***REMOVED***
      , len = keys.length
      , words = line.split(/\s+/***REMOVED***
      , word = words.pop(***REMOVED***
      , names = []
      , name
      , node
      , key;

    // find words that match
    for (var i = 0; i < len; ++i***REMOVED*** {
      key = keys[i];
      if (0 == key.indexOf(word***REMOVED******REMOVED*** {
        node = global.lookup(key***REMOVED***;
        switch (node.nodeName***REMOVED*** {
          case 'function':
            names.push(node.toString(***REMOVED******REMOVED***;
            break;
          default:
            names.push(key***REMOVED***;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

    return [names, line];
***REMOVED***;

  repl.on('line', function(line***REMOVED***{
    if (!line.trim(***REMOVED***.length***REMOVED*** return repl.prompt(***REMOVED***;
    parser = new stylus.Parser(line, options***REMOVED***;
    parser.state.push('expression'***REMOVED***;
    evaluator.return = true;
    try {
      var expr = parser.parse(***REMOVED***;
      var ret = evaluator.visit(expr***REMOVED***;
      var node;
      while (node = ret.nodes.pop(***REMOVED******REMOVED*** {
        if (!node.suppress***REMOVED*** {
          var str = node.toString(***REMOVED***;
          if ('(' == str[0]***REMOVED*** str = str.replace(/^\(|\***REMOVED***$/g, ''***REMOVED***;
          console.log('\033[90m=> \033[0m' + highlight(str***REMOVED******REMOVED***;
          break;
      ***REMOVED***
    ***REMOVED***
      repl.prompt(***REMOVED***;
  ***REMOVED*** catch (err***REMOVED*** {
      console.error('\033[31merror: %s\033[0m', err.message || err.stack***REMOVED***;
      repl.prompt(***REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;

  repl.on('SIGINT', function(***REMOVED***{
    console.log(***REMOVED***;
    process.exit(0***REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * Highlight the given string of Stylus.
 */

function highlight(str***REMOVED*** {
  return str
    .replace(/(#***REMOVED***?(\d+(\.\d+***REMOVED***?***REMOVED***/g, function($0, $1, $2***REMOVED***{
      return $1 ? $0 : '\033[36m' + $2 + '\033[0m';
  ***REMOVED******REMOVED***
    .replace(/(#[\da-fA-F]+***REMOVED***/g, '\033[33m$1\033[0m'***REMOVED***
    .replace(/('.*?'|".*?"***REMOVED***/g, '\033[32m$1\033[0m'***REMOVED***;
}

/**
 * Convert a CSS file to a Styl file
 */

function compileCSSFile(file, fileOut***REMOVED*** {
  fs.lstat(file, function(err, stat***REMOVED***{
    if (err***REMOVED*** throw err;
    if (stat.isFile(***REMOVED******REMOVED*** {
      fs.readFile(file, 'utf8', function(err, str***REMOVED***{
        if (err***REMOVED*** throw err;
        var styl = stylus.convertCSS(str***REMOVED***;
        fs.writeFile(fileOut, styl, function(err***REMOVED***{
         if (err***REMOVED*** throw err;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;
}

/**
 * Compile with stdio.
 */

function compileStdio(***REMOVED*** {
  process.stdin.setEncoding('utf8'***REMOVED***;
  process.stdin.on('data', function(chunk***REMOVED***{ str += chunk; }***REMOVED***;
  process.stdin.on('end', function(***REMOVED***{
    // Compile to css
    var style = stylus(str, options***REMOVED***;
    if (includeCSS***REMOVED*** style.set('include css', true***REMOVED***;
    if (resolveURL***REMOVED*** style.set('resolve url', true***REMOVED***;
    usePlugins(style***REMOVED***;
    importFiles(style***REMOVED***;
    style.render(function(err, css***REMOVED***{
      if (err***REMOVED*** throw err;
      if (compare***REMOVED*** {
        console.log('\n\x1b[1mInput:\x1b[0m'***REMOVED***;
        console.log(str***REMOVED***;
        console.log('\n\x1b[1mOutput:\x1b[0m'***REMOVED***;
    ***REMOVED***
      console.log(css***REMOVED***;
      if (compare***REMOVED*** console.log(***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***.resume(***REMOVED***;
}

/**
 * Compile the given files.
 */

function compileFiles(files***REMOVED*** {
  files.forEach(compileFile***REMOVED***;
}

/**
 * Display dependencies of the compiled files.
 */

function displayDeps(***REMOVED*** {
  files.forEach(function(file***REMOVED***{
    // ensure file exists
    fs.lstat(file, function(err, stat***REMOVED***{
      if (err***REMOVED*** throw err;
      fs.readFile(file, 'utf8', function(err, str***REMOVED***{
        if (err***REMOVED*** throw err;
        options.filename = file;
        var style = stylus(str, options***REMOVED***;
        if (resolveURL***REMOVED*** style.set('resolve url', true***REMOVED***;

        usePlugins(style***REMOVED***;
        importFiles(style***REMOVED***;
        console.log(style.deps(***REMOVED***.join('\n'***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * Compile the given file.
 */

function compileFile(file***REMOVED*** {
  // ensure file exists
  fs.lstat(file, function(err, stat***REMOVED***{
    if (err***REMOVED*** throw err;
    // file
    if (stat.isFile(***REMOVED******REMOVED*** {
      fs.readFile(file, 'utf8', function(err, str***REMOVED***{
        if (err***REMOVED*** throw err;
        options.filename = file;
        options._imports = [];
        var style = stylus(str, options***REMOVED***;
        if (includeCSS***REMOVED*** style.set('include css', true***REMOVED***;
        if (resolveURL***REMOVED*** style.set('resolve url', true***REMOVED***;

        usePlugins(style***REMOVED***;
        importFiles(style***REMOVED***;
        style.render(function(err, css***REMOVED***{
          watchImports(file, options._imports***REMOVED***;
          if (err***REMOVED*** {
            if (watchers***REMOVED*** {
              console.error(err.stack || err.message***REMOVED***;
          ***REMOVED*** else {
              throw err;
          ***REMOVED***
        ***REMOVED*** else {
            writeFile(file, css***REMOVED***;
        ***REMOVED***
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
    // directory
  ***REMOVED*** else if (stat.isDirectory(***REMOVED******REMOVED*** {
      fs.readdir(file, function(err, files***REMOVED***{
        if (err***REMOVED*** throw err;
        files.filter(function(path***REMOVED***{
          return path.match(/\.styl$/***REMOVED***;
      ***REMOVED******REMOVED***.map(function(path***REMOVED***{
          return join(file, path***REMOVED***;
      ***REMOVED******REMOVED***.forEach(compileFile***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;
}

/**
 * Write the given CSS output.
 */

function writeFile(file, css***REMOVED*** {
  // --print support
  if (print***REMOVED*** return process.stdout.write(css***REMOVED***;
  // --out support
  var path = dest
    ? join(dest, basename(file, '.styl'***REMOVED*** + '.css'***REMOVED***
    : file.replace(/\.styl$/i, '.css'***REMOVED***;
  fs.writeFile(path, css, function(err***REMOVED***{
    if (err***REMOVED*** throw err;
    console.log('  \033[90mcompiled\033[0m %s', path***REMOVED***;
    // --watch support
    watch(file, file***REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * Watch the given `file` and recompiling `rootFile` when modified.
 */

function watch(file, rootFile***REMOVED*** {
  // not watching
  if (!watchers***REMOVED*** return;

  // already watched
  if (watchers[file]***REMOVED*** {
    watchers[file][rootFile] = true;
    return;
***REMOVED***

  // watch the file itself
  watchers[file] = {};
  watchers[file][rootFile] = true;
  console.log('  \033[90mwatching\033[0m %s', file***REMOVED***;
  // if is windows use fs.watch api instead
  // TODO: remove watchFile when fs.watch(***REMOVED*** works on osx etc
  if (isWindows***REMOVED*** {
    fs.watch(file, function(event***REMOVED*** {
      if (event === 'change'***REMOVED*** compile(***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED*** else {
    fs.watchFile(file, { interval: 300 }, function(curr, prev***REMOVED*** {
      if (curr.mtime > prev.mtime***REMOVED*** compile(***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***

  function compile(***REMOVED*** {
    for (var rootFile in watchers[file]***REMOVED*** {
      compileFile(rootFile***REMOVED***;
  ***REMOVED***
***REMOVED***
}

/**
 * Watch `imports`, re-compiling `file` when they change.
 */

function watchImports(file, imports***REMOVED*** {
  imports.forEach(function(imported***REMOVED***{
    if (!imported.path***REMOVED*** return;
    watch(imported.path, file***REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * Utilize plugins.
 */

function usePlugins(style***REMOVED*** {
  plugins.forEach(function(plugin***REMOVED***{
    var path = plugin.path;
    var options = plugin.options;
    fn = require(/^\.+\//.test(path***REMOVED*** ? resolve(path***REMOVED*** : path***REMOVED***;
    if ('function' != typeof fn***REMOVED*** {
      throw new Error('plugin ' + path + ' does not export a function'***REMOVED***;
  ***REMOVED***
    style.use(fn(options***REMOVED******REMOVED***;
***REMOVED******REMOVED***;

  if (urlFunction***REMOVED*** {
    style.define('url', stylus.url(urlFunction***REMOVED******REMOVED***;
***REMOVED*** else if (resolveURL***REMOVED*** {
    style.define('url', stylus.resolver(***REMOVED******REMOVED***;
***REMOVED***
}

/**
 * Imports the indicated files.
 */

function importFiles(style***REMOVED*** {
  imports.forEach(function(file***REMOVED*** {
    style.import(file***REMOVED***;
***REMOVED******REMOVED***;
}
