
module.exports = function(css, options***REMOVED***{
  options = options || {};

  /**
   * Positional.
   */

  var lineno = 1;
  var column = 1;

  /**
   * Update lineno and column based on `str`.
   */

  function updatePosition(str***REMOVED*** {
    var lines = str.match(/\n/g***REMOVED***;
    if (lines***REMOVED*** lineno += lines.length;
    var i = str.lastIndexOf('\n'***REMOVED***;
    column = ~i ? str.length - i : column + str.length;
***REMOVED***

  /**
   * Mark position and patch `node.position`.
   */

  function position(***REMOVED*** {
    var start = { line: lineno, column: column };
    if (!options.position***REMOVED*** return positionNoop;

    return function(node***REMOVED***{
      node.position = {
        start: start,
        end: { line: lineno, column: column },
        source: options.source
    ***REMOVED***;

      whitespace(***REMOVED***;
      return node;
  ***REMOVED***
***REMOVED***

  /**
   * Return `node`.
   */

  function positionNoop(node***REMOVED*** {
    whitespace(***REMOVED***;
    return node;
***REMOVED***

  /**
   * Error `msg`.
   */

  function error(msg***REMOVED*** {
    var err = new Error(msg + ' near line ' + lineno + ':' + column***REMOVED***;
    err.filename = options.source;
    err.line = lineno;
    err.column = column;
    err.source = css;
    throw err;
***REMOVED***

  /**
   * Parse stylesheet.
   */

  function stylesheet(***REMOVED*** {
    return {
      type: 'stylesheet',
      stylesheet: {
        rules: rules(***REMOVED***
    ***REMOVED***
  ***REMOVED***;
***REMOVED***

  /**
   * Opening brace.
   */

  function open(***REMOVED*** {
    return match(/^{\s*/***REMOVED***;
***REMOVED***

  /**
   * Closing brace.
   */

  function close(***REMOVED*** {
    return match(/^}/***REMOVED***;
***REMOVED***

  /**
   * Parse ruleset.
   */

  function rules(***REMOVED*** {
    var node;
    var rules = [];
    whitespace(***REMOVED***;
    comments(rules***REMOVED***;
    while (css.charAt(0***REMOVED*** != '}' && (node = atrule(***REMOVED*** || rule(***REMOVED******REMOVED******REMOVED*** {
      rules.push(node***REMOVED***;
      comments(rules***REMOVED***;
  ***REMOVED***
    return rules;
***REMOVED***

  /**
   * Match `re` and return captures.
   */

  function match(re***REMOVED*** {
    var m = re.exec(css***REMOVED***;
    if (!m***REMOVED*** return;
    var str = m[0];
    updatePosition(str***REMOVED***;
    css = css.slice(str.length***REMOVED***;
    return m;
***REMOVED***

  /**
   * Parse whitespace.
   */

  function whitespace(***REMOVED*** {
    match(/^\s*/***REMOVED***;
***REMOVED***

  /**
   * Parse comments;
   */

  function comments(rules***REMOVED*** {
    var c;
    rules = rules || [];
    while (c = comment(***REMOVED******REMOVED*** rules.push(c***REMOVED***;
    return rules;
***REMOVED***

  /**
   * Parse comment.
   */

  function comment(***REMOVED*** {
    var pos = position(***REMOVED***;
    if ('/' != css.charAt(0***REMOVED*** || '*' != css.charAt(1***REMOVED******REMOVED*** return;

    var i = 2;
    while (null != css.charAt(i***REMOVED*** && ('*' != css.charAt(i***REMOVED*** || '/' != css.charAt(i + 1***REMOVED******REMOVED******REMOVED*** ++i;
    i += 2;

    var str = css.slice(2, i - 2***REMOVED***;
    column += 2;
    updatePosition(str***REMOVED***;
    css = css.slice(i***REMOVED***;
    column += 2;

    return pos({
      type: 'comment',
      comment: str
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse selector.
   */

  function selector(***REMOVED*** {
    var m = match(/^([^{]+***REMOVED***/***REMOVED***;
    if (!m***REMOVED*** return;
    return trim(m[0]***REMOVED***.split(/\s*,\s*/***REMOVED***;
***REMOVED***

  /**
   * Parse declaration.
   */

  function declaration(***REMOVED*** {
    var pos = position(***REMOVED***;

    // prop
    var prop = match(/^(\*?[-#\/\*\w]+(\[[0-9a-z_-]+\]***REMOVED***?***REMOVED***\s*/***REMOVED***;
    if (!prop***REMOVED*** return;
    prop = trim(prop[0]***REMOVED***;

    // :
    if (!match(/^:\s*/***REMOVED******REMOVED*** return error("property missing ':'"***REMOVED***;

    // val
    var val = match(/^((?:'(?:\\'|.***REMOVED****?'|"(?:\\"|.***REMOVED****?"|\([^\***REMOVED***]*?\***REMOVED***|[^};]***REMOVED***+***REMOVED***/***REMOVED***;
    if (!val***REMOVED*** return error('property missing value'***REMOVED***;

    var ret = pos({
      type: 'declaration',
      property: prop,
      value: trim(val[0]***REMOVED***
  ***REMOVED******REMOVED***;

    // ;
    match(/^[;\s]*/***REMOVED***;

    return ret;
***REMOVED***

  /**
   * Parse declarations.
   */

  function declarations(***REMOVED*** {
    var decls = [];

    if (!open(***REMOVED******REMOVED*** return error("missing '{'"***REMOVED***;
    comments(decls***REMOVED***;

    // declarations
    var decl;
    while (decl = declaration(***REMOVED******REMOVED*** {
      decls.push(decl***REMOVED***;
      comments(decls***REMOVED***;
  ***REMOVED***

    if (!close(***REMOVED******REMOVED*** return error("missing '}'"***REMOVED***;
    return decls;
***REMOVED***

  /**
   * Parse keyframe.
   */

  function keyframe(***REMOVED*** {
    var m;
    var vals = [];
    var pos = position(***REMOVED***;

    while (m = match(/^((\d+\.\d+|\.\d+|\d+***REMOVED***%?|[a-z]+***REMOVED***\s*/***REMOVED******REMOVED*** {
      vals.push(m[1]***REMOVED***;
      match(/^,\s*/***REMOVED***;
  ***REMOVED***

    if (!vals.length***REMOVED*** return;

    return pos({
      type: 'keyframe',
      values: vals,
      declarations: declarations(***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse keyframes.
   */

  function atkeyframes(***REMOVED*** {
    var pos = position(***REMOVED***;
    var m = match(/^@([-\w]+***REMOVED***?keyframes */***REMOVED***;

    if (!m***REMOVED*** return;
    var vendor = m[1];

    // identifier
    var m = match(/^([-\w]+***REMOVED***\s*/***REMOVED***;
    if (!m***REMOVED*** return error("@keyframes missing name"***REMOVED***;
    var name = m[1];

    if (!open(***REMOVED******REMOVED*** return error("@keyframes missing '{'"***REMOVED***;

    var frame;
    var frames = comments(***REMOVED***;
    while (frame = keyframe(***REMOVED******REMOVED*** {
      frames.push(frame***REMOVED***;
      frames = frames.concat(comments(***REMOVED******REMOVED***;
  ***REMOVED***

    if (!close(***REMOVED******REMOVED*** return error("@keyframes missing '}'"***REMOVED***;

    return pos({
      type: 'keyframes',
      name: name,
      vendor: vendor,
      keyframes: frames
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse supports.
   */

  function atsupports(***REMOVED*** {
    var pos = position(***REMOVED***;
    var m = match(/^@supports *([^{]+***REMOVED***/***REMOVED***;

    if (!m***REMOVED*** return;
    var supports = trim(m[1]***REMOVED***;

    if (!open(***REMOVED******REMOVED*** return error("@supports missing '{'"***REMOVED***;

    var style = comments(***REMOVED***.concat(rules(***REMOVED******REMOVED***;

    if (!close(***REMOVED******REMOVED*** return error("@supports missing '}'"***REMOVED***;

    return pos({
      type: 'supports',
      supports: supports,
      rules: style
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse host.
   */

  function athost(***REMOVED*** {
    var pos = position(***REMOVED***;
    var m = match(/^@host */***REMOVED***;

    if (!m***REMOVED*** return;

    if (!open(***REMOVED******REMOVED*** return error("@host missing '{'"***REMOVED***;

    var style = comments(***REMOVED***.concat(rules(***REMOVED******REMOVED***;

    if (!close(***REMOVED******REMOVED*** return error("@host missing '}'"***REMOVED***;

    return pos({
      type: 'host',
      rules: style
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse media.
   */

  function atmedia(***REMOVED*** {
    var pos = position(***REMOVED***;
    var m = match(/^@media *([^{]+***REMOVED***/***REMOVED***;

    if (!m***REMOVED*** return;
    var media = trim(m[1]***REMOVED***;

    if (!open(***REMOVED******REMOVED*** return error("@media missing '{'"***REMOVED***;

    var style = comments(***REMOVED***.concat(rules(***REMOVED******REMOVED***;

    if (!close(***REMOVED******REMOVED*** return error("@media missing '}'"***REMOVED***;

    return pos({
      type: 'media',
      media: media,
      rules: style
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse paged media.
   */

  function atpage(***REMOVED*** {
    var pos = position(***REMOVED***;
    var m = match(/^@page */***REMOVED***;
    if (!m***REMOVED*** return;

    var sel = selector(***REMOVED*** || [];

    if (!open(***REMOVED******REMOVED*** return error("@page missing '{'"***REMOVED***;
    var decls = comments(***REMOVED***;

    // declarations
    var decl;
    while (decl = declaration(***REMOVED******REMOVED*** {
      decls.push(decl***REMOVED***;
      decls = decls.concat(comments(***REMOVED******REMOVED***;
  ***REMOVED***

    if (!close(***REMOVED******REMOVED*** return error("@page missing '}'"***REMOVED***;

    return pos({
      type: 'page',
      selectors: sel,
      declarations: decls
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse document.
   */

  function atdocument(***REMOVED*** {
    var pos = position(***REMOVED***;
    var m = match(/^@([-\w]+***REMOVED***?document *([^{]+***REMOVED***/***REMOVED***;
    if (!m***REMOVED*** return;

    var vendor = trim(m[1]***REMOVED***;
    var doc = trim(m[2]***REMOVED***;

    if (!open(***REMOVED******REMOVED*** return error("@document missing '{'"***REMOVED***;

    var style = comments(***REMOVED***.concat(rules(***REMOVED******REMOVED***;

    if (!close(***REMOVED******REMOVED*** return error("@document missing '}'"***REMOVED***;

    return pos({
      type: 'document',
      document: doc,
      vendor: vendor,
      rules: style
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Parse import
   */

  function atimport(***REMOVED*** {
    return _atrule('import'***REMOVED***;
***REMOVED***

  /**
   * Parse charset
   */

  function atcharset(***REMOVED*** {
    return _atrule('charset'***REMOVED***;
***REMOVED***

  /**
   * Parse namespace
   */

  function atnamespace(***REMOVED*** {
    return _atrule('namespace'***REMOVED***
***REMOVED***

  /**
   * Parse non-block at-rules
   */

  function _atrule(name***REMOVED*** {
    var pos = position(***REMOVED***;
    var m = match(new RegExp('^@' + name + ' *([^;\\n]+***REMOVED***;'***REMOVED******REMOVED***;
    if (!m***REMOVED*** return;
    var ret = { type: name };
    ret[name] = trim(m[1]***REMOVED***;
    return pos(ret***REMOVED***;
***REMOVED***

  /**
   * Parse at rule.
   */

  function atrule(***REMOVED*** {
    if (css[0] != '@'***REMOVED*** return;

    return atkeyframes(***REMOVED***
      || atmedia(***REMOVED***
      || atsupports(***REMOVED***
      || atimport(***REMOVED***
      || atcharset(***REMOVED***
      || atnamespace(***REMOVED***
      || atdocument(***REMOVED***
      || atpage(***REMOVED***
      || athost(***REMOVED***;
***REMOVED***

  /**
   * Parse rule.
   */

  function rule(***REMOVED*** {
    var pos = position(***REMOVED***;
    var sel = selector(***REMOVED***;

    if (!sel***REMOVED*** return;
    comments(***REMOVED***;

    return pos({
      type: 'rule',
      selectors: sel,
      declarations: declarations(***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED***

  return stylesheet(***REMOVED***;
};

/**
 * Trim `str`.
 */

function trim(str***REMOVED*** {
  return str ? str.replace(/^\s+|\s+$/g, ''***REMOVED*** : '';
}
