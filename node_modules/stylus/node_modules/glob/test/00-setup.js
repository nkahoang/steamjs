// just a little pre-run script to set up the fixtures.
// zz-finish cleans it up

var mkdirp = require("mkdirp"***REMOVED***
var path = require("path"***REMOVED***
var i = 0
var tap = require("tap"***REMOVED***
var fs = require("fs"***REMOVED***
var rimraf = require("rimraf"***REMOVED***

var files =
[ "a/.abcdef/x/y/z/a"
, "a/abcdef/g/h"
, "a/abcfed/g/h"
, "a/b/c/d"
, "a/bc/e/f"
, "a/c/d/c/b"
, "a/cb/e/f"
]

var symlinkTo = path.resolve(__dirname, "a/symlink/a/b/c"***REMOVED***
var symlinkFrom = "../.."

files = files.map(function (f***REMOVED*** {
  return path.resolve(__dirname, f***REMOVED***
}***REMOVED***

tap.test("remove fixtures", function (t***REMOVED*** {
  rimraf(path.resolve(__dirname, "a"***REMOVED***, function (er***REMOVED*** {
    t.ifError(er, "remove fixtures"***REMOVED***
    t.end(***REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

files.forEach(function (f***REMOVED*** {
  tap.test(f, function (t***REMOVED*** {
    var d = path.dirname(f***REMOVED***
    mkdirp(d, 0755, function (er***REMOVED*** {
      if (er***REMOVED*** {
        t.fail(er***REMOVED***
        return t.bailout(***REMOVED***
    ***REMOVED***
      fs.writeFile(f, "i like tests", function (er***REMOVED*** {
        t.ifError(er, "make file"***REMOVED***
        t.end(***REMOVED***
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

if (process.platform !== "win32"***REMOVED*** {
  tap.test("symlinky", function (t***REMOVED*** {
    var d = path.dirname(symlinkTo***REMOVED***
    console.error("mkdirp", d***REMOVED***
    mkdirp(d, 0755, function (er***REMOVED*** {
      t.ifError(er***REMOVED***
      fs.symlink(symlinkFrom, symlinkTo, "dir", function (er***REMOVED*** {
        t.ifError(er, "make symlink"***REMOVED***
        t.end(***REMOVED***
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}

;["foo","bar","baz","asdf","quux","qwer","rewq"].forEach(function (w***REMOVED*** {
  w = "/tmp/glob-test/" + w
  tap.test("create " + w, function (t***REMOVED*** {
    mkdirp(w, function (er***REMOVED*** {
      if (er***REMOVED***
        throw er
      t.pass(w***REMOVED***
      t.end(***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***


// generate the bash pattern test-fixtures if possible
if (process.platform === "win32" || !process.env.TEST_REGEN***REMOVED*** {
  console.error("Windows, or TEST_REGEN unset.  Using cached fixtures."***REMOVED***
  return
}

var spawn = require("child_process"***REMOVED***.spawn;
var globs =
  // put more patterns here.
  // anything that would be directly in / should be in /tmp/glob-test
  ["test/a/*/+(c|g***REMOVED***/./d"
  ,"test/a/**/[cg]/../[cg]"
  ,"test/a/{b,c,d,e,f}/**/g"
  ,"test/a/b/**"
  ,"test/**/g"
  ,"test/a/abc{fed,def}/g/h"
  ,"test/a/abc{fed/g,def}/**/"
  ,"test/a/abc{fed/g,def}/**///**/"
  ,"test/**/a/**/"
  ,"test/+(a|b|c***REMOVED***/a{/,bc*}/**"
  ,"test/*/*/*/f"
  ,"test/**/f"
  ,"test/a/symlink/a/b/c/a/b/c/a/b/c//a/b/c////a/b/c/**/b/c/**"
  ,"{./*/*,/tmp/glob-test/*}"
  ,"{/tmp/glob-test/*,*}" // evil owl face!  how you taunt me!
  ,"test/a/!(symlink***REMOVED***/**"
  ]
var bashOutput = {}
var fs = require("fs"***REMOVED***

globs.forEach(function (pattern***REMOVED*** {
  tap.test("generate fixture " + pattern, function (t***REMOVED*** {
    var cmd = "shopt -s globstar && " +
              "shopt -s extglob && " +
              "shopt -s nullglob && " +
              // "shopt >&2; " +
              "eval \'for i in " + pattern + "; do echo $i; done\'"
    var cp = spawn("bash", ["-c", cmd], { cwd: path.dirname(__dirname***REMOVED*** }***REMOVED***
    var out = []
    cp.stdout.on("data", function (c***REMOVED*** {
      out.push(c***REMOVED***
  ***REMOVED******REMOVED***
    cp.stderr.pipe(process.stderr***REMOVED***
    cp.on("close", function (code***REMOVED*** {
      out = flatten(out***REMOVED***
      if (!out***REMOVED***
        out = []
      else
        out = cleanResults(out.split(/\r*\n/***REMOVED******REMOVED***

      bashOutput[pattern] = out
      t.notOk(code, "bash test should finish nicely"***REMOVED***
      t.end(***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

tap.test("save fixtures", function (t***REMOVED*** {
  var fname = path.resolve(__dirname, "bash-results.json"***REMOVED***
  var data = JSON.stringify(bashOutput, null, 2***REMOVED*** + "\n"
  fs.writeFile(fname, data, function (er***REMOVED*** {
    t.ifError(er***REMOVED***
    t.end(***REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

function cleanResults (m***REMOVED*** {
  // normalize discrepancies in ordering, duplication,
  // and ending slashes.
  return m.map(function (m***REMOVED*** {
    return m.replace(/\/+/g, "/"***REMOVED***.replace(/\/$/, ""***REMOVED***
***REMOVED******REMOVED***.sort(alphasort***REMOVED***.reduce(function (set, f***REMOVED*** {
    if (f !== set[set.length - 1]***REMOVED*** set.push(f***REMOVED***
    return set
***REMOVED***, []***REMOVED***.sort(alphasort***REMOVED***.map(function (f***REMOVED*** {
    // de-windows
    return (process.platform !== 'win32'***REMOVED*** ? f
           : f.replace(/^[a-zA-Z]:\\\\/, '/'***REMOVED***.replace(/\\/g, '/'***REMOVED***
***REMOVED******REMOVED***
}

function flatten (chunks***REMOVED*** {
  var s = 0
  chunks.forEach(function (c***REMOVED*** { s += c.length }***REMOVED***
  var out = new Buffer(s***REMOVED***
  s = 0
  chunks.forEach(function (c***REMOVED*** {
    c.copy(out, s***REMOVED***
    s += c.length
***REMOVED******REMOVED***

  return out.toString(***REMOVED***.trim(***REMOVED***
}

function alphasort (a, b***REMOVED*** {
  a = a.toLowerCase(***REMOVED***
  b = b.toLowerCase(***REMOVED***
  return a > b ? 1 : a < b ? -1 : 0
}
