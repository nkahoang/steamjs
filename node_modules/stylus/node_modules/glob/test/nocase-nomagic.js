var fs = require('fs'***REMOVED***;
var test = require('tap'***REMOVED***.test;
var glob = require('../'***REMOVED***;

test('mock fs', function(t***REMOVED*** {
  var stat = fs.stat
  var statSync = fs.statSync
  var readdir = fs.readdir
  var readdirSync = fs.readdirSync

  function fakeStat(path***REMOVED*** {
    var ret
    switch (path.toLowerCase(***REMOVED******REMOVED*** {
      case '/tmp': case '/tmp/':
        ret = { isDirectory: function(***REMOVED*** { return true } }
        break
      case '/tmp/a':
        ret = { isDirectory: function(***REMOVED*** { return false } }
        break
  ***REMOVED***
    return ret
***REMOVED***

  fs.stat = function(path, cb***REMOVED*** {
    var f = fakeStat(path***REMOVED***;
    if (f***REMOVED*** {
      process.nextTick(function(***REMOVED*** {
        cb(null, f***REMOVED***
    ***REMOVED******REMOVED***
  ***REMOVED*** else {
      stat.call(fs, path, cb***REMOVED***
  ***REMOVED***
***REMOVED***

  fs.statSync = function(path***REMOVED*** {
    return fakeStat(path***REMOVED*** || statSync.call(fs, path***REMOVED***
***REMOVED***

  function fakeReaddir(path***REMOVED*** {
    var ret
    switch (path.toLowerCase(***REMOVED******REMOVED*** {
      case '/tmp': case '/tmp/':
        ret = [ 'a', 'A' ]
        break
      case '/':
        ret = ['tmp', 'tMp', 'tMP', 'TMP']
  ***REMOVED***
    return ret
***REMOVED***

  fs.readdir = function(path, cb***REMOVED*** {
    var f = fakeReaddir(path***REMOVED***
    if (f***REMOVED***
      process.nextTick(function(***REMOVED*** {
        cb(null, f***REMOVED***
    ***REMOVED******REMOVED***
    else
      readdir.call(fs, path, cb***REMOVED***
***REMOVED***

  fs.readdirSync = function(path***REMOVED*** {
    return fakeReaddir(path***REMOVED*** || readdirSync.call(fs, path***REMOVED***
***REMOVED***

  t.pass('mocked'***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test('nocase, nomagic', function(t***REMOVED*** {
  var n = 2
  var want = [ '/TMP/A',
               '/TMP/a',
               '/tMP/A',
               '/tMP/a',
               '/tMp/A',
               '/tMp/a',
               '/tmp/A',
               '/tmp/a' ]
  glob('/tmp/a', { nocase: true }, function(er, res***REMOVED*** {
    if (er***REMOVED***
      throw er
    t.same(res.sort(***REMOVED***, want***REMOVED***
    if (--n === 0***REMOVED*** t.end(***REMOVED***
***REMOVED******REMOVED***
  glob('/tmp/A', { nocase: true }, function(er, res***REMOVED*** {
    if (er***REMOVED***
      throw er
    t.same(res.sort(***REMOVED***, want***REMOVED***
    if (--n === 0***REMOVED*** t.end(***REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

test('nocase, with some magic', function(t***REMOVED*** {
  t.plan(2***REMOVED***
  var want = [ '/TMP/A',
               '/TMP/a',
               '/tMP/A',
               '/tMP/a',
               '/tMp/A',
               '/tMp/a',
               '/tmp/A',
               '/tmp/a' ]
  glob('/tmp/*', { nocase: true }, function(er, res***REMOVED*** {
    if (er***REMOVED***
      throw er
    t.same(res.sort(***REMOVED***, want***REMOVED***
***REMOVED******REMOVED***
  glob('/tmp/*', { nocase: true }, function(er, res***REMOVED*** {
    if (er***REMOVED***
      throw er
    t.same(res.sort(***REMOVED***, want***REMOVED***
***REMOVED******REMOVED***
}***REMOVED***
