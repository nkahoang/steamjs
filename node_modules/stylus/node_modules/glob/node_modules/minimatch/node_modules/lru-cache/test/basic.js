var test = require("tap"***REMOVED***.test
  , LRU = require("../"***REMOVED***

test("basic", function (t***REMOVED*** {
  var cache = new LRU({max: 10}***REMOVED***
  cache.set("key", "value"***REMOVED***
  t.equal(cache.get("key"***REMOVED***, "value"***REMOVED***
  t.equal(cache.get("nada"***REMOVED***, undefined***REMOVED***
  t.equal(cache.length, 1***REMOVED***
  t.equal(cache.max, 10***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("least recently set", function (t***REMOVED*** {
  var cache = new LRU(2***REMOVED***
  cache.set("a", "A"***REMOVED***
  cache.set("b", "B"***REMOVED***
  cache.set("c", "C"***REMOVED***
  t.equal(cache.get("c"***REMOVED***, "C"***REMOVED***
  t.equal(cache.get("b"***REMOVED***, "B"***REMOVED***
  t.equal(cache.get("a"***REMOVED***, undefined***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("lru recently gotten", function (t***REMOVED*** {
  var cache = new LRU(2***REMOVED***
  cache.set("a", "A"***REMOVED***
  cache.set("b", "B"***REMOVED***
  cache.get("a"***REMOVED***
  cache.set("c", "C"***REMOVED***
  t.equal(cache.get("c"***REMOVED***, "C"***REMOVED***
  t.equal(cache.get("b"***REMOVED***, undefined***REMOVED***
  t.equal(cache.get("a"***REMOVED***, "A"***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("del", function (t***REMOVED*** {
  var cache = new LRU(2***REMOVED***
  cache.set("a", "A"***REMOVED***
  cache.del("a"***REMOVED***
  t.equal(cache.get("a"***REMOVED***, undefined***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("max", function (t***REMOVED*** {
  var cache = new LRU(3***REMOVED***

  // test changing the max, verify that the LRU items get dropped.
  cache.max = 100
  for (var i = 0; i < 100; i ++***REMOVED*** cache.set(i, i***REMOVED***
  t.equal(cache.length, 100***REMOVED***
  for (var i = 0; i < 100; i ++***REMOVED*** {
    t.equal(cache.get(i***REMOVED***, i***REMOVED***
***REMOVED***
  cache.max = 3
  t.equal(cache.length, 3***REMOVED***
  for (var i = 0; i < 97; i ++***REMOVED*** {
    t.equal(cache.get(i***REMOVED***, undefined***REMOVED***
***REMOVED***
  for (var i = 98; i < 100; i ++***REMOVED*** {
    t.equal(cache.get(i***REMOVED***, i***REMOVED***
***REMOVED***

  // now remove the max restriction, and try again.
  cache.max = "hello"
  for (var i = 0; i < 100; i ++***REMOVED*** cache.set(i, i***REMOVED***
  t.equal(cache.length, 100***REMOVED***
  for (var i = 0; i < 100; i ++***REMOVED*** {
    t.equal(cache.get(i***REMOVED***, i***REMOVED***
***REMOVED***
  // should trigger an immediate resize
  cache.max = 3
  t.equal(cache.length, 3***REMOVED***
  for (var i = 0; i < 97; i ++***REMOVED*** {
    t.equal(cache.get(i***REMOVED***, undefined***REMOVED***
***REMOVED***
  for (var i = 98; i < 100; i ++***REMOVED*** {
    t.equal(cache.get(i***REMOVED***, i***REMOVED***
***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("reset", function (t***REMOVED*** {
  var cache = new LRU(10***REMOVED***
  cache.set("a", "A"***REMOVED***
  cache.set("b", "B"***REMOVED***
  cache.reset(***REMOVED***
  t.equal(cache.length, 0***REMOVED***
  t.equal(cache.max, 10***REMOVED***
  t.equal(cache.get("a"***REMOVED***, undefined***REMOVED***
  t.equal(cache.get("b"***REMOVED***, undefined***REMOVED***
  t.end(***REMOVED***
}***REMOVED***


// Note: `<cache>.dump(***REMOVED***` is a debugging tool only. No guarantees are made
// about the format/layout of the response.
test("dump", function (t***REMOVED*** {
  var cache = new LRU(10***REMOVED***
  var d = cache.dump(***REMOVED***;
  t.equal(Object.keys(d***REMOVED***.length, 0, "nothing in dump for empty cache"***REMOVED***
  cache.set("a", "A"***REMOVED***
  var d = cache.dump(***REMOVED***  // { a: { key: "a", value: "A", lu: 0 } }
  t.ok(d.a***REMOVED***
  t.equal(d.a.key, "a"***REMOVED***
  t.equal(d.a.value, "A"***REMOVED***
  t.equal(d.a.lu, 0***REMOVED***

  cache.set("b", "B"***REMOVED***
  cache.get("b"***REMOVED***
  d = cache.dump(***REMOVED***
  t.ok(d.b***REMOVED***
  t.equal(d.b.key, "b"***REMOVED***
  t.equal(d.b.value, "B"***REMOVED***
  t.equal(d.b.lu, 2***REMOVED***

  t.end(***REMOVED***
}***REMOVED***


test("basic with weighed length", function (t***REMOVED*** {
  var cache = new LRU({
    max: 100,
    length: function (item***REMOVED*** { return item.size }
***REMOVED******REMOVED***
  cache.set("key", {val: "value", size: 50}***REMOVED***
  t.equal(cache.get("key"***REMOVED***.val, "value"***REMOVED***
  t.equal(cache.get("nada"***REMOVED***, undefined***REMOVED***
  t.equal(cache.lengthCalculator(cache.get("key"***REMOVED******REMOVED***, 50***REMOVED***
  t.equal(cache.length, 50***REMOVED***
  t.equal(cache.max, 100***REMOVED***
  t.end(***REMOVED***
}***REMOVED***


test("weighed length item too large", function (t***REMOVED*** {
  var cache = new LRU({
    max: 10,
    length: function (item***REMOVED*** { return item.size }
***REMOVED******REMOVED***
  t.equal(cache.max, 10***REMOVED***

  // should fall out immediately
  cache.set("key", {val: "value", size: 50}***REMOVED***

  t.equal(cache.length, 0***REMOVED***
  t.equal(cache.get("key"***REMOVED***, undefined***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("least recently set with weighed length", function (t***REMOVED*** {
  var cache = new LRU({
    max:8,
    length: function (item***REMOVED*** { return item.length }
***REMOVED******REMOVED***
  cache.set("a", "A"***REMOVED***
  cache.set("b", "BB"***REMOVED***
  cache.set("c", "CCC"***REMOVED***
  cache.set("d", "DDDD"***REMOVED***
  t.equal(cache.get("d"***REMOVED***, "DDDD"***REMOVED***
  t.equal(cache.get("c"***REMOVED***, "CCC"***REMOVED***
  t.equal(cache.get("b"***REMOVED***, undefined***REMOVED***
  t.equal(cache.get("a"***REMOVED***, undefined***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("lru recently gotten with weighed length", function (t***REMOVED*** {
  var cache = new LRU({
    max: 8,
    length: function (item***REMOVED*** { return item.length }
***REMOVED******REMOVED***
  cache.set("a", "A"***REMOVED***
  cache.set("b", "BB"***REMOVED***
  cache.set("c", "CCC"***REMOVED***
  cache.get("a"***REMOVED***
  cache.get("b"***REMOVED***
  cache.set("d", "DDDD"***REMOVED***
  t.equal(cache.get("c"***REMOVED***, undefined***REMOVED***
  t.equal(cache.get("d"***REMOVED***, "DDDD"***REMOVED***
  t.equal(cache.get("b"***REMOVED***, "BB"***REMOVED***
  t.equal(cache.get("a"***REMOVED***, "A"***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("set returns proper booleans", function(t***REMOVED*** {
  var cache = new LRU({
    max: 5,
    length: function (item***REMOVED*** { return item.length }
***REMOVED******REMOVED***

  t.equal(cache.set("a", "A"***REMOVED***, true***REMOVED***

  // should return false for max exceeded
  t.equal(cache.set("b", "donuts"***REMOVED***, false***REMOVED***

  t.equal(cache.set("b", "B"***REMOVED***, true***REMOVED***
  t.equal(cache.set("c", "CCCC"***REMOVED***, true***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("drop the old items", function(t***REMOVED*** {
  var cache = new LRU({
    max: 5,
    maxAge: 50
***REMOVED******REMOVED***

  cache.set("a", "A"***REMOVED***

  setTimeout(function (***REMOVED*** {
    cache.set("b", "b"***REMOVED***
    t.equal(cache.get("a"***REMOVED***, "A"***REMOVED***
***REMOVED***, 25***REMOVED***

  setTimeout(function (***REMOVED*** {
    cache.set("c", "C"***REMOVED***
    // timed out
    t.notOk(cache.get("a"***REMOVED******REMOVED***
***REMOVED***, 60***REMOVED***

  setTimeout(function (***REMOVED*** {
    t.notOk(cache.get("b"***REMOVED******REMOVED***
    t.equal(cache.get("c"***REMOVED***, "C"***REMOVED***
***REMOVED***, 90***REMOVED***

  setTimeout(function (***REMOVED*** {
    t.notOk(cache.get("c"***REMOVED******REMOVED***
    t.end(***REMOVED***
***REMOVED***, 155***REMOVED***
}***REMOVED***

test("disposal function", function(t***REMOVED*** {
  var disposed = false
  var cache = new LRU({
    max: 1,
    dispose: function (k, n***REMOVED*** {
      disposed = n
  ***REMOVED***
***REMOVED******REMOVED***

  cache.set(1, 1***REMOVED***
  cache.set(2, 2***REMOVED***
  t.equal(disposed, 1***REMOVED***
  cache.set(3, 3***REMOVED***
  t.equal(disposed, 2***REMOVED***
  cache.reset(***REMOVED***
  t.equal(disposed, 3***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("disposal function on too big of item", function(t***REMOVED*** {
  var disposed = false
  var cache = new LRU({
    max: 1,
    length: function (k***REMOVED*** {
      return k.length
  ***REMOVED***,
    dispose: function (k, n***REMOVED*** {
      disposed = n
  ***REMOVED***
***REMOVED******REMOVED***
  var obj = [ 1, 2 ]

  t.equal(disposed, false***REMOVED***
  cache.set("obj", obj***REMOVED***
  t.equal(disposed, obj***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("has(***REMOVED***", function(t***REMOVED*** {
  var cache = new LRU({
    max: 1,
    maxAge: 10
***REMOVED******REMOVED***

  cache.set('foo', 'bar'***REMOVED***
  t.equal(cache.has('foo'***REMOVED***, true***REMOVED***
  cache.set('blu', 'baz'***REMOVED***
  t.equal(cache.has('foo'***REMOVED***, false***REMOVED***
  t.equal(cache.has('blu'***REMOVED***, true***REMOVED***
  setTimeout(function(***REMOVED*** {
    t.equal(cache.has('blu'***REMOVED***, false***REMOVED***
    t.end(***REMOVED***
***REMOVED***, 15***REMOVED***
}***REMOVED***

test("stale", function(t***REMOVED*** {
  var cache = new LRU({
    maxAge: 10,
    stale: true
***REMOVED******REMOVED***

  cache.set('foo', 'bar'***REMOVED***
  t.equal(cache.get('foo'***REMOVED***, 'bar'***REMOVED***
  t.equal(cache.has('foo'***REMOVED***, true***REMOVED***
  setTimeout(function(***REMOVED*** {
    t.equal(cache.has('foo'***REMOVED***, false***REMOVED***
    t.equal(cache.get('foo'***REMOVED***, 'bar'***REMOVED***
    t.equal(cache.get('foo'***REMOVED***, undefined***REMOVED***
    t.end(***REMOVED***
***REMOVED***, 15***REMOVED***
}***REMOVED***

test("lru update via set", function(t***REMOVED*** {
  var cache = LRU({ max: 2 }***REMOVED***;

  cache.set('foo', 1***REMOVED***;
  cache.set('bar', 2***REMOVED***;
  cache.del('bar'***REMOVED***;
  cache.set('baz', 3***REMOVED***;
  cache.set('qux', 4***REMOVED***;

  t.equal(cache.get('foo'***REMOVED***, undefined***REMOVED***
  t.equal(cache.get('bar'***REMOVED***, undefined***REMOVED***
  t.equal(cache.get('baz'***REMOVED***, 3***REMOVED***
  t.equal(cache.get('qux'***REMOVED***, 4***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("least recently set w/ peek", function (t***REMOVED*** {
  var cache = new LRU(2***REMOVED***
  cache.set("a", "A"***REMOVED***
  cache.set("b", "B"***REMOVED***
  t.equal(cache.peek("a"***REMOVED***, "A"***REMOVED***
  cache.set("c", "C"***REMOVED***
  t.equal(cache.get("c"***REMOVED***, "C"***REMOVED***
  t.equal(cache.get("b"***REMOVED***, "B"***REMOVED***
  t.equal(cache.get("a"***REMOVED***, undefined***REMOVED***
  t.end(***REMOVED***
}***REMOVED***

test("pop the least used item", function (t***REMOVED*** {
  var cache = new LRU(3***REMOVED***
  , last

  cache.set("a", "A"***REMOVED***
  cache.set("b", "B"***REMOVED***
  cache.set("c", "C"***REMOVED***

  t.equal(cache.length, 3***REMOVED***
  t.equal(cache.max, 3***REMOVED***

  // Ensure we pop a, c, b
  cache.get("b", "B"***REMOVED***

  last = cache.pop(***REMOVED***
  t.equal(last.key, "a"***REMOVED***
  t.equal(last.value, "A"***REMOVED***
  t.equal(cache.length, 2***REMOVED***
  t.equal(cache.max, 3***REMOVED***

  last = cache.pop(***REMOVED***
  t.equal(last.key, "c"***REMOVED***
  t.equal(last.value, "C"***REMOVED***
  t.equal(cache.length, 1***REMOVED***
  t.equal(cache.max, 3***REMOVED***

  last = cache.pop(***REMOVED***
  t.equal(last.key, "b"***REMOVED***
  t.equal(last.value, "B"***REMOVED***
  t.equal(cache.length, 0***REMOVED***
  t.equal(cache.max, 3***REMOVED***

  last = cache.pop(***REMOVED***
  t.equal(last, null***REMOVED***
  t.equal(cache.length, 0***REMOVED***
  t.equal(cache.max, 3***REMOVED***

  t.end(***REMOVED***
}***REMOVED***
