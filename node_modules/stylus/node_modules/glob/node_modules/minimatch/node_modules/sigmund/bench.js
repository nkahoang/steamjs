// different ways to id objects
// use a req/res pair, since it's crazy deep and cyclical

// sparseFE10 and sigmund are usually pretty close, which is to be expected,
// since they are essentially the same algorithm, except that sigmund handles
// regular expression objects properly.


var ***REMOVED***
var util = require('util'***REMOVED***
var sigmund = require('./sigmund.js'***REMOVED***
var sreq, sres, creq, cres, test

http.createServer(function (q, s***REMOVED*** {
  sreq = q
  sres = s
  sres.end('ok'***REMOVED***
  this.close(function (***REMOVED*** { setTimeout(function (***REMOVED*** {
    start(***REMOVED***
***REMOVED***, 200***REMOVED*** }***REMOVED***
}***REMOVED***.listen(1337, function (***REMOVED*** {
  creq = http.get({ port: 1337 }***REMOVED***
  creq.on('response', function (s***REMOVED*** { cres = s }***REMOVED***
}***REMOVED***

function start (***REMOVED*** {
  test = [sreq, sres, creq, cres]
  // test = sreq
  // sreq.sres = sres
  // sreq.creq = creq
  // sreq.cres = cres

  for (var i in exports.compare***REMOVED*** {
    console.log(i***REMOVED***
    var hash = exports.compare[i](***REMOVED***
    console.log(hash***REMOVED***
    console.log(hash.length***REMOVED***
    console.log(''***REMOVED***
***REMOVED***

  require('bench'***REMOVED***.runMain(***REMOVED***
}

function customWs (obj, md, d***REMOVED*** {
  d = d || 0
  var to = typeof obj
  if (to === 'undefined' || to === 'function' || to === null***REMOVED*** return ''
  if (d > md || !obj || to !== 'object'***REMOVED*** return ('' + obj***REMOVED***.replace(/[\n ]+/g, ''***REMOVED***

  if (Array.isArray(obj***REMOVED******REMOVED*** {
    return obj.map(function (i, _, __***REMOVED*** {
      return customWs(i, md, d + 1***REMOVED***
  ***REMOVED******REMOVED***.reduce(function (a, b***REMOVED*** { return a + b }, ''***REMOVED***
***REMOVED***

  var keys = Object.keys(obj***REMOVED***
  return keys.map(function (k, _, __***REMOVED*** {
    return k + ':' + customWs(obj[k], md, d + 1***REMOVED***
***REMOVED******REMOVED***.reduce(function (a, b***REMOVED*** { return a + b }, ''***REMOVED***
}

function custom (obj, md, d***REMOVED*** {
  d = d || 0
  var to = typeof obj
  if (to === 'undefined' || to === 'function' || to === null***REMOVED*** return ''
  if (d > md || !obj || to !== 'object'***REMOVED*** return '' + obj

  if (Array.isArray(obj***REMOVED******REMOVED*** {
    return obj.map(function (i, _, __***REMOVED*** {
      return custom(i, md, d + 1***REMOVED***
  ***REMOVED******REMOVED***.reduce(function (a, b***REMOVED*** { return a + b }, ''***REMOVED***
***REMOVED***

  var keys = Object.keys(obj***REMOVED***
  return keys.map(function (k, _, __***REMOVED*** {
    return k + ':' + custom(obj[k], md, d + 1***REMOVED***
***REMOVED******REMOVED***.reduce(function (a, b***REMOVED*** { return a + b }, ''***REMOVED***
}

function sparseFE2 (obj, maxDepth***REMOVED*** {
  var seen = []
  var soFar = ''
  function ch (v, depth***REMOVED*** {
    if (depth > maxDepth***REMOVED*** return
    if (typeof v === 'function' || typeof v === 'undefined'***REMOVED*** return
    if (typeof v !== 'object' || !v***REMOVED*** {
      soFar += v
      return
  ***REMOVED***
    if (seen.indexOf(v***REMOVED*** !== -1 || depth === maxDepth***REMOVED*** return
    seen.push(v***REMOVED***
    soFar += '{'
    Object.keys(v***REMOVED***.forEach(function (k, _, __***REMOVED*** {
      // pseudo-private values.  skip those.
      if (k.charAt(0***REMOVED*** === '_'***REMOVED*** return
      var to = typeof v[k]
      if (to === 'function' || to === 'undefined'***REMOVED*** return
      soFar += k + ':'
      ch(v[k], depth + 1***REMOVED***
  ***REMOVED******REMOVED***
    soFar += '}'
***REMOVED***
  ch(obj, 0***REMOVED***
  return soFar
}

function sparseFE (obj, maxDepth***REMOVED*** {
  var seen = []
  var soFar = ''
  function ch (v, depth***REMOVED*** {
    if (depth > maxDepth***REMOVED*** return
    if (typeof v === 'function' || typeof v === 'undefined'***REMOVED*** return
    if (typeof v !== 'object' || !v***REMOVED*** {
      soFar += v
      return
  ***REMOVED***
    if (seen.indexOf(v***REMOVED*** !== -1 || depth === maxDepth***REMOVED*** return
    seen.push(v***REMOVED***
    soFar += '{'
    Object.keys(v***REMOVED***.forEach(function (k, _, __***REMOVED*** {
      // pseudo-private values.  skip those.
      if (k.charAt(0***REMOVED*** === '_'***REMOVED*** return
      var to = typeof v[k]
      if (to === 'function' || to === 'undefined'***REMOVED*** return
      soFar += k
      ch(v[k], depth + 1***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED***
  ch(obj, 0***REMOVED***
  return soFar
}

function sparse (obj, maxDepth***REMOVED*** {
  var seen = []
  var soFar = ''
  function ch (v, depth***REMOVED*** {
    if (depth > maxDepth***REMOVED*** return
    if (typeof v === 'function' || typeof v === 'undefined'***REMOVED*** return
    if (typeof v !== 'object' || !v***REMOVED*** {
      soFar += v
      return
  ***REMOVED***
    if (seen.indexOf(v***REMOVED*** !== -1 || depth === maxDepth***REMOVED*** return
    seen.push(v***REMOVED***
    soFar += '{'
    for (var k in v***REMOVED*** {
      // pseudo-private values.  skip those.
      if (k.charAt(0***REMOVED*** === '_'***REMOVED*** continue
      var to = typeof v[k]
      if (to === 'function' || to === 'undefined'***REMOVED*** continue
      soFar += k
      ch(v[k], depth + 1***REMOVED***
  ***REMOVED***
***REMOVED***
  ch(obj, 0***REMOVED***
  return soFar
}

function noCommas (obj, maxDepth***REMOVED*** {
  var seen = []
  var soFar = ''
  function ch (v, depth***REMOVED*** {
    if (depth > maxDepth***REMOVED*** return
    if (typeof v === 'function' || typeof v === 'undefined'***REMOVED*** return
    if (typeof v !== 'object' || !v***REMOVED*** {
      soFar += v
      return
  ***REMOVED***
    if (seen.indexOf(v***REMOVED*** !== -1 || depth === maxDepth***REMOVED*** return
    seen.push(v***REMOVED***
    soFar += '{'
    for (var k in v***REMOVED*** {
      // pseudo-private values.  skip those.
      if (k.charAt(0***REMOVED*** === '_'***REMOVED*** continue
      var to = typeof v[k]
      if (to === 'function' || to === 'undefined'***REMOVED*** continue
      soFar += k + ':'
      ch(v[k], depth + 1***REMOVED***
  ***REMOVED***
    soFar += '}'
***REMOVED***
  ch(obj, 0***REMOVED***
  return soFar
}


function flatten (obj, maxDepth***REMOVED*** {
  var seen = []
  var soFar = ''
  function ch (v, depth***REMOVED*** {
    if (depth > maxDepth***REMOVED*** return
    if (typeof v === 'function' || typeof v === 'undefined'***REMOVED*** return
    if (typeof v !== 'object' || !v***REMOVED*** {
      soFar += v
      return
  ***REMOVED***
    if (seen.indexOf(v***REMOVED*** !== -1 || depth === maxDepth***REMOVED*** return
    seen.push(v***REMOVED***
    soFar += '{'
    for (var k in v***REMOVED*** {
      // pseudo-private values.  skip those.
      if (k.charAt(0***REMOVED*** === '_'***REMOVED*** continue
      var to = typeof v[k]
      if (to === 'function' || to === 'undefined'***REMOVED*** continue
      soFar += k + ':'
      ch(v[k], depth + 1***REMOVED***
      soFar += ','
  ***REMOVED***
    soFar += '}'
***REMOVED***
  ch(obj, 0***REMOVED***
  return soFar
}

exports.compare =
{
  // 'custom 2': function (***REMOVED*** {
  //   return custom(test, 2, 0***REMOVED***
  // },
  // 'customWs 2': function (***REMOVED*** {
  //   return customWs(test, 2, 0***REMOVED***
  // },
  'JSON.stringify (guarded***REMOVED***': function (***REMOVED*** {
    var seen = []
    return JSON.stringify(test, function (k, v***REMOVED*** {
      if (typeof v !== 'object' || !v***REMOVED*** return v
      if (seen.indexOf(v***REMOVED*** !== -1***REMOVED*** return undefined
      seen.push(v***REMOVED***
      return v
  ***REMOVED******REMOVED***
***REMOVED***,

  'flatten 10': function (***REMOVED*** {
    return flatten(test, 10***REMOVED***
***REMOVED***,

  // 'flattenFE 10': function (***REMOVED*** {
  //   return flattenFE(test, 10***REMOVED***
  // },

  'noCommas 10': function (***REMOVED*** {
    return noCommas(test, 10***REMOVED***
***REMOVED***,

  'sparse 10': function (***REMOVED*** {
    return sparse(test, 10***REMOVED***
***REMOVED***,

  'sparseFE 10': function (***REMOVED*** {
    return sparseFE(test, 10***REMOVED***
***REMOVED***,

  'sparseFE2 10': function (***REMOVED*** {
    return sparseFE2(test, 10***REMOVED***
***REMOVED***,

  sigmund: function(***REMOVED*** {
    return sigmund(test, 10***REMOVED***
***REMOVED***,


  // 'util.inspect 1': function (***REMOVED*** {
  //   return util.inspect(test, false, 1, false***REMOVED***
  // },
  // 'util.inspect undefined': function (***REMOVED*** {
  //   util.inspect(test***REMOVED***
  // },
  // 'util.inspect 2': function (***REMOVED*** {
  //   util.inspect(test, false, 2, false***REMOVED***
  // },
  // 'util.inspect 3': function (***REMOVED*** {
  //   util.inspect(test, false, 3, false***REMOVED***
  // },
  // 'util.inspect 4': function (***REMOVED*** {
  //   util.inspect(test, false, 4, false***REMOVED***
  // },
  // 'util.inspect Infinity': function (***REMOVED*** {
  //   util.inspect(test, false, Infinity, false***REMOVED***
  // }
}

/** results
**/
