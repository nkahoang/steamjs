// Approach:
//
// 1. Get the minimatch set
// 2. For each pattern in the set, PROCESS(pattern***REMOVED***
// 3. Store matches per-set, then uniq them
//
// PROCESS(pattern***REMOVED***
// Get the first [n] items from pattern that are all strings
// Join these together.  This is PREFIX.
//   If there is no more remaining, then stat(PREFIX***REMOVED*** and
//   add to matches if it succeeds.  END.
// readdir(PREFIX***REMOVED*** as ENTRIES
//   If fails, END
//   If pattern[n] is GLOBSTAR
//     // handle the case where the globstar match is empty
//     // by pruning it out, and testing the resulting pattern
//     PROCESS(pattern[0..n] + pattern[n+1 .. $]***REMOVED***
//     // handle other cases.
//     for ENTRY in ENTRIES (not dotfiles***REMOVED***
//       // attach globstar + tail onto the entry
//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $]***REMOVED***
//
//   else // not globstar
//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot***REMOVED***
//       Test ENTRY against pattern[n]
//       If fails, continue
//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $]***REMOVED***
//
// Caveat:
//   Cache all stats and readdirs results to minimize syscall.  Since all
//   we ever care about is existence and directory-ness, we can just keep
//   `true` for files, and [children,...] for directories, or `false` for
//   things that don't exist.



module.exports = glob

var fs = require("fs"***REMOVED***
, minimatch = require("minimatch"***REMOVED***
, Minimatch = minimatch.Minimatch
, inherits = require("inherits"***REMOVED***
, EE = require("events"***REMOVED***.EventEmitter
, path = require("path"***REMOVED***
, isDir = {}
, assert = require("assert"***REMOVED***.ok

function glob (pattern, options, cb***REMOVED*** {
  if (typeof options === "function"***REMOVED*** cb = options, options = {}
  if (!options***REMOVED*** options = {}

  if (typeof options === "number"***REMOVED*** {
    deprecated(***REMOVED***
    return
***REMOVED***

  var g = new Glob(pattern, options, cb***REMOVED***
  return g.sync ? g.found : g
}

glob.fnmatch = deprecated

function deprecated (***REMOVED*** {
  throw new Error("glob's interface has changed. Please see the docs."***REMOVED***
}

glob.sync = globSync
function globSync (pattern, options***REMOVED*** {
  if (typeof options === "number"***REMOVED*** {
    deprecated(***REMOVED***
    return
***REMOVED***

  options = options || {}
  options.sync = true
  return glob(pattern, options***REMOVED***
}

this._processingEmitQueue = false

glob.Glob = Glob
inherits(Glob, EE***REMOVED***
function Glob (pattern, options, cb***REMOVED*** {
  if (!(this instanceof Glob***REMOVED******REMOVED*** {
    return new Glob(pattern, options, cb***REMOVED***
***REMOVED***

  if (typeof options === "function"***REMOVED*** {
    cb = options
    options = null
***REMOVED***

  if (typeof cb === "function"***REMOVED*** {
    this.on("error", cb***REMOVED***
    this.on("end", function (matches***REMOVED*** {
      cb(null, matches***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED***

  options = options || {}

  this._endEmitted = false
  this.EOF = {}
  this._emitQueue = []

  this.paused = false
  this._processingEmitQueue = false

  this.maxDepth = options.maxDepth || 1000
  this.maxLength = options.maxLength || Infinity
  this.cache = options.cache || {}
  this.statCache = options.statCache || {}

  this.changedCwd = false
  var cwd = process.cwd(***REMOVED***
  if (!options.hasOwnProperty("cwd"***REMOVED******REMOVED*** this.cwd = cwd
  else {
    this.cwd = options.cwd
    this.changedCwd = path.resolve(options.cwd***REMOVED*** !== cwd
***REMOVED***

  this.root = options.root || path.resolve(this.cwd, "/"***REMOVED***
  this.root = path.resolve(this.root***REMOVED***
  if (process.platform === "win32"***REMOVED***
    this.root = this.root.replace(/\\/g, "/"***REMOVED***

  this.nomount = !!options.nomount

  if (!pattern***REMOVED*** {
    throw new Error("must provide pattern"***REMOVED***
***REMOVED***

  // base-matching: just use globstar for that.
  if (options.matchBase && -1 === pattern.indexOf("/"***REMOVED******REMOVED*** {
    if (options.noglobstar***REMOVED*** {
      throw new Error("base matching requires globstar"***REMOVED***
  ***REMOVED***
    pattern = "**/" + pattern
***REMOVED***

  this.strict = options.strict !== false
  this.dot = !!options.dot
  this.mark = !!options.mark
  this.sync = !!options.sync
  this.nounique = !!options.nounique
  this.nonull = !!options.nonull
  this.nosort = !!options.nosort
  this.nocase = !!options.nocase
  this.stat = !!options.stat

  this.debug = !!options.debug || !!options.globDebug
  if (this.debug***REMOVED***
    this.log = console.error

  this.silent = !!options.silent

  var mm = this.minimatch = new Minimatch(pattern, options***REMOVED***
  this.options = mm.options
  pattern = this.pattern = mm.pattern

  this.error = null
  this.aborted = false

  // list of all the patterns that ** has resolved do, so
  // we can avoid visiting multiple times.
  this._globstars = {}

  EE.call(this***REMOVED***

  // process each pattern in the minimatch set
  var n = this.minimatch.set.length

  // The matches are stored as {<filename>: true,...} so that
  // duplicates are automagically pruned.
  // Later, we do an Object.keys(***REMOVED*** on these.
  // Keep them as a list so we can fill in when nonull is set.
  this.matches = new Array(n***REMOVED***

  this.minimatch.set.forEach(iterator.bind(this***REMOVED******REMOVED***
  function iterator (pattern, i, set***REMOVED*** {
    this._process(pattern, 0, i, function (er***REMOVED*** {
      if (er***REMOVED*** this.emit("error", er***REMOVED***
      if (-- n <= 0***REMOVED*** this._finish(***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED***
}

Glob.prototype.log = function (***REMOVED*** {}

Glob.prototype._finish = function (***REMOVED*** {
  assert(this instanceof Glob***REMOVED***

  var nou = this.nounique
  , all = nou ? [] : {}

  for (var i = 0, l = this.matches.length; i < l; i ++***REMOVED*** {
    var matches = this.matches[i]
    this.log("matches[%d] =", i, matches***REMOVED***
    // do like the shell, and spit out the literal glob
    if (!matches***REMOVED*** {
      if (this.nonull***REMOVED*** {
        var literal = this.minimatch.globSet[i]
        if (nou***REMOVED*** all.push(literal***REMOVED***
        else all[literal] = true
    ***REMOVED***
  ***REMOVED*** else {
      // had matches
      var m = Object.keys(matches***REMOVED***
      if (nou***REMOVED*** all.push.apply(all, m***REMOVED***
      else m.forEach(function (m***REMOVED*** {
        all[m] = true
    ***REMOVED******REMOVED***
  ***REMOVED***
***REMOVED***

  if (!nou***REMOVED*** all = Object.keys(all***REMOVED***

  if (!this.nosort***REMOVED*** {
    all = all.sort(this.nocase ? alphasorti : alphasort***REMOVED***
***REMOVED***

  if (this.mark***REMOVED*** {
    // at *some* point we statted all of these
    all = all.map(this._mark, this***REMOVED***
***REMOVED***

  this.log("emitting end", all***REMOVED***

  this.EOF = this.found = all
  this.emitMatch(this.EOF***REMOVED***
}

function alphasorti (a, b***REMOVED*** {
  a = a.toLowerCase(***REMOVED***
  b = b.toLowerCase(***REMOVED***
  return alphasort(a, b***REMOVED***
}

function alphasort (a, b***REMOVED*** {
  return a > b ? 1 : a < b ? -1 : 0
}

Glob.prototype._mark = function (p***REMOVED*** {
  var c = this.cache[p]
  var m = p
  if (c***REMOVED*** {
    var isDir = c === 2 || Array.isArray(c***REMOVED***
    var slash = p.slice(-1***REMOVED*** === '/'

    if (isDir && !slash***REMOVED***
      m += '/'
    else if (!isDir && slash***REMOVED***
      m = m.slice(0, -1***REMOVED***

    if (m !== p***REMOVED*** {
      this.statCache[m] = this.statCache[p]
      this.cache[m] = this.cache[p]
  ***REMOVED***
***REMOVED***

  return m
}

Glob.prototype.abort = function (***REMOVED*** {
  this.aborted = true
  this.emit("abort"***REMOVED***
}

Glob.prototype.pause = function (***REMOVED*** {
  if (this.paused***REMOVED*** return
  if (this.sync***REMOVED***
    this.emit("error", new Error("Can't pause/resume sync glob"***REMOVED******REMOVED***
  this.paused = true
  this.emit("pause"***REMOVED***
}

Glob.prototype.resume = function (***REMOVED*** {
  if (!this.paused***REMOVED*** return
  if (this.sync***REMOVED***
    this.emit("error", new Error("Can't pause/resume sync glob"***REMOVED******REMOVED***
  this.paused = false
  this.emit("resume"***REMOVED***
  this._processEmitQueue(***REMOVED***
  //process.nextTick(this.emit.bind(this, "resume"***REMOVED******REMOVED***
}

Glob.prototype.emitMatch = function (m***REMOVED*** {
  this.log('emitMatch', m***REMOVED***
  this._emitQueue.push(m***REMOVED***
  this._processEmitQueue(***REMOVED***
}

Glob.prototype._processEmitQueue = function (m***REMOVED*** {
  this.log("pEQ paused=%j processing=%j m=%j", this.paused,
           this._processingEmitQueue, m***REMOVED***
  var done = false
  while (!this._processingEmitQueue &&
         !this.paused***REMOVED*** {
    this._processingEmitQueue = true
    var m = this._emitQueue.shift(***REMOVED***
    this.log(">processEmitQueue", m === this.EOF ? ":EOF:" : m***REMOVED***
    if (!m***REMOVED*** {
      this.log(">processEmitQueue, falsey m"***REMOVED***
      this._processingEmitQueue = false
      break
  ***REMOVED***

    if (m === this.EOF || !(this.mark && !this.stat***REMOVED******REMOVED*** {
      this.log("peq: unmarked, or eof"***REMOVED***
      next.call(this, 0, false***REMOVED***
  ***REMOVED*** else if (this.statCache[m]***REMOVED*** {
      var sc = this.statCache[m]
      var exists
      if (sc***REMOVED***
        exists = sc.isDirectory(***REMOVED*** ? 2 : 1
      this.log("peq: stat cached"***REMOVED***
      next.call(this, exists, exists === 2***REMOVED***
  ***REMOVED*** else {
      this.log("peq: _stat, then next"***REMOVED***
      this._stat(m, next***REMOVED***
  ***REMOVED***

    function next(exists, isDir***REMOVED*** {
      this.log("next", m, exists, isDir***REMOVED***
      var ev = m === this.EOF ? "end" : "match"

      // "end" can only happen once.
      assert(!this._endEmitted***REMOVED***
      if (ev === "end"***REMOVED***
        this._endEmitted = true

      if (exists***REMOVED*** {
        // Doesn't mean it necessarily doesn't exist, it's possible
        // we just didn't check because we don't care that much, or
        // this is EOF anyway.
        if (isDir && !m.match(/\/$/***REMOVED******REMOVED*** {
          m = m + "/"
      ***REMOVED*** else if (!isDir && m.match(/\/$/***REMOVED******REMOVED*** {
          m = m.replace(/\/+$/, ""***REMOVED***
      ***REMOVED***
    ***REMOVED***
      this.log("emit", ev, m***REMOVED***
      this.emit(ev, m***REMOVED***
      this._processingEmitQueue = false
      if (done && m !== this.EOF && !this.paused***REMOVED***
        this._processEmitQueue(***REMOVED***
  ***REMOVED***
***REMOVED***
  done = true
}

Glob.prototype._process = function (pattern, depth, index, cb_***REMOVED*** {
  assert(this instanceof Glob***REMOVED***

  var cb = function cb (er, res***REMOVED*** {
    assert(this instanceof Glob***REMOVED***
    if (this.paused***REMOVED*** {
      if (!this._processQueue***REMOVED*** {
        this._processQueue = []
        this.once("resume", function (***REMOVED*** {
          var q = this._processQueue
          this._processQueue = null
          q.forEach(function (cb***REMOVED*** { cb(***REMOVED*** }***REMOVED***
      ***REMOVED******REMOVED***
    ***REMOVED***
      this._processQueue.push(cb_.bind(this, er, res***REMOVED******REMOVED***
  ***REMOVED*** else {
      cb_.call(this, er, res***REMOVED***
  ***REMOVED***
***REMOVED***.bind(this***REMOVED***

  if (this.aborted***REMOVED*** return cb(***REMOVED***

  if (depth > this.maxDepth***REMOVED*** return cb(***REMOVED***

  // Get the first [n] parts of pattern that are all strings.
  var n = 0
  while (typeof pattern[n] === "string"***REMOVED*** {
    n ++
***REMOVED***
  // now n is the index of the first one that is *not* a string.

  // see if there's anything else
  var prefix
  switch (n***REMOVED*** {
    // if not, then this is rather simple
    case pattern.length:
      prefix = pattern.join("/"***REMOVED***
      this._stat(prefix, function (exists, isDir***REMOVED*** {
        // either it's there, or it isn't.
        // nothing more to do, either way.
        if (exists***REMOVED*** {
          if (prefix && isAbsolute(prefix***REMOVED*** && !this.nomount***REMOVED*** {
            if (prefix.charAt(0***REMOVED*** === "/"***REMOVED*** {
              prefix = path.join(this.root, prefix***REMOVED***
          ***REMOVED*** else {
              prefix = path.resolve(this.root, prefix***REMOVED***
          ***REMOVED***
        ***REMOVED***

          if (process.platform === "win32"***REMOVED***
            prefix = prefix.replace(/\\/g, "/"***REMOVED***

          this.matches[index] = this.matches[index] || {}
          this.matches[index][prefix] = true
          this.emitMatch(prefix***REMOVED***
      ***REMOVED***
        return cb(***REMOVED***
    ***REMOVED******REMOVED***
      return

    case 0:
      // pattern *starts* with some non-trivial item.
      // going to readdir(cwd***REMOVED***, but not include the prefix in matches.
      prefix = null
      break

    default:
      // pattern has some string bits in the front.
      // whatever it starts with, whether that's "absolute" like /foo/bar,
      // or "relative" like "../baz"
      prefix = pattern.slice(0, n***REMOVED***
      prefix = prefix.join("/"***REMOVED***
      break
***REMOVED***

  // get the list of entries.
  var read
  if (prefix === null***REMOVED*** read = "."
  else if (isAbsolute(prefix***REMOVED*** || isAbsolute(pattern.join("/"***REMOVED******REMOVED******REMOVED*** {
    if (!prefix || !isAbsolute(prefix***REMOVED******REMOVED*** {
      prefix = path.join("/", prefix***REMOVED***
  ***REMOVED***
    read = prefix = path.resolve(prefix***REMOVED***

    // if (process.platform === "win32"***REMOVED***
    //   read = prefix = prefix.replace(/^[a-zA-Z]:|\\/g, "/"***REMOVED***

    this.log('absolute: ', prefix, this.root, pattern, read***REMOVED***
***REMOVED*** else {
    read = prefix
***REMOVED***

  this.log('readdir(%j***REMOVED***', read, this.cwd, this.root***REMOVED***

  return this._readdir(read, function (er, entries***REMOVED*** {
    if (er***REMOVED*** {
      // not a directory!
      // this means that, whatever else comes after this, it can never match
      return cb(***REMOVED***
  ***REMOVED***

    // globstar is special
    if (pattern[n] === minimatch.GLOBSTAR***REMOVED*** {
      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var s = [ pattern.slice(0, n***REMOVED***.concat(pattern.slice(n + 1***REMOVED******REMOVED*** ]
      entries.forEach(function (e***REMOVED*** {
        if (e.charAt(0***REMOVED*** === "." && !this.dot***REMOVED*** return
        // instead of the globstar
        s.push(pattern.slice(0, n***REMOVED***.concat(e***REMOVED***.concat(pattern.slice(n + 1***REMOVED******REMOVED******REMOVED***
        // below the globstar
        s.push(pattern.slice(0, n***REMOVED***.concat(e***REMOVED***.concat(pattern.slice(n***REMOVED******REMOVED******REMOVED***
    ***REMOVED***, this***REMOVED***

      s = s.filter(function (pattern***REMOVED*** {
        var key = gsKey(pattern***REMOVED***
        var seen = !this._globstars[key]
        this._globstars[key] = true
        return seen
    ***REMOVED***, this***REMOVED***

      if (!s.length***REMOVED***
        return cb(***REMOVED***

      // now asyncForEach over this
      var l = s.length
      , errState = null
      s.forEach(function (gsPattern***REMOVED*** {
        this._process(gsPattern, depth + 1, index, function (er***REMOVED*** {
          if (errState***REMOVED*** return
          if (er***REMOVED*** return cb(errState = er***REMOVED***
          if (--l <= 0***REMOVED*** return cb(***REMOVED***
      ***REMOVED******REMOVED***
    ***REMOVED***, this***REMOVED***

      return
  ***REMOVED***

    // not a globstar
    // It will only match dot entries if it starts with a dot, or if
    // dot is set.  Stuff like @(.foo|.bar***REMOVED*** isn't allowed.
    var pn = pattern[n]
    var rawGlob = pattern[n]._glob
    , dotOk = this.dot || rawGlob.charAt(0***REMOVED*** === "."

    entries = entries.filter(function (e***REMOVED*** {
      return (e.charAt(0***REMOVED*** !== "." || dotOk***REMOVED*** &&
             e.match(pattern[n]***REMOVED***
  ***REMOVED******REMOVED***

    // If n === pattern.length - 1, then there's no need for the extra stat
    // *unless* the user has specified "mark" or "stat" explicitly.
    // We know that they exist, since the readdir returned them.
    if (n === pattern.length - 1 &&
        !this.mark &&
        !this.stat***REMOVED*** {
      entries.forEach(function (e***REMOVED*** {
        if (prefix***REMOVED*** {
          if (prefix !== "/"***REMOVED*** e = prefix + "/" + e
          else e = prefix + e
      ***REMOVED***
        if (e.charAt(0***REMOVED*** === "/" && !this.nomount***REMOVED*** {
          e = path.join(this.root, e***REMOVED***
      ***REMOVED***

        if (process.platform === "win32"***REMOVED***
          e = e.replace(/\\/g, "/"***REMOVED***

        this.matches[index] = this.matches[index] || {}
        this.matches[index][e] = true
        this.emitMatch(e***REMOVED***
    ***REMOVED***, this***REMOVED***
      return cb.call(this***REMOVED***
  ***REMOVED***


    // now test all the remaining entries as stand-ins for that part
    // of the pattern.
    var l = entries.length
    , errState = null
    if (l === 0***REMOVED*** return cb(***REMOVED*** // no matches possible
    entries.forEach(function (e***REMOVED*** {
      var p = pattern.slice(0, n***REMOVED***.concat(e***REMOVED***.concat(pattern.slice(n + 1***REMOVED******REMOVED***
      this._process(p, depth + 1, index, function (er***REMOVED*** {
        if (errState***REMOVED*** return
        if (er***REMOVED*** return cb(errState = er***REMOVED***
        if (--l === 0***REMOVED*** return cb.call(this***REMOVED***
    ***REMOVED******REMOVED***
  ***REMOVED***, this***REMOVED***
***REMOVED******REMOVED***

}

function gsKey (pattern***REMOVED*** {
  return '**' + pattern.map(function (p***REMOVED*** {
    return (p === minimatch.GLOBSTAR***REMOVED*** ? '**' : (''+p***REMOVED***
***REMOVED******REMOVED***.join('/'***REMOVED***
}

Glob.prototype._stat = function (f, cb***REMOVED*** {
  assert(this instanceof Glob***REMOVED***
  var abs = f
  if (f.charAt(0***REMOVED*** === "/"***REMOVED*** {
    abs = path.join(this.root, f***REMOVED***
***REMOVED*** else if (this.changedCwd***REMOVED*** {
    abs = path.resolve(this.cwd, f***REMOVED***
***REMOVED***

  if (f.length > this.maxLength***REMOVED*** {
    var er = new Error("Path name too long"***REMOVED***
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterStat(f, abs, cb, er***REMOVED***
***REMOVED***

  this.log('stat', [this.cwd, f, '=', abs]***REMOVED***

  if (!this.stat && this.cache.hasOwnProperty(f***REMOVED******REMOVED*** {
    var exists = this.cache[f]
    , isDir = exists && (Array.isArray(exists***REMOVED*** || exists === 2***REMOVED***
    if (this.sync***REMOVED*** return cb.call(this, !!exists, isDir***REMOVED***
    return process.nextTick(cb.bind(this, !!exists, isDir***REMOVED******REMOVED***
***REMOVED***

  var stat = this.statCache[abs]
  if (this.sync || stat***REMOVED*** {
    var er
    try {
      stat = fs.statSync(abs***REMOVED***
  ***REMOVED*** catch (e***REMOVED*** {
      er = e
  ***REMOVED***
    this._afterStat(f, abs, cb, er, stat***REMOVED***
***REMOVED*** else {
    fs.stat(abs, this._afterStat.bind(this, f, abs, cb***REMOVED******REMOVED***
***REMOVED***
}

Glob.prototype._afterStat = function (f, abs, cb, er, stat***REMOVED*** {
  var exists
  assert(this instanceof Glob***REMOVED***

  if (abs.slice(-1***REMOVED*** === "/" && stat && !stat.isDirectory(***REMOVED******REMOVED*** {
    this.log("should be ENOTDIR, fake it"***REMOVED***

    er = new Error("ENOTDIR, not a directory '" + abs + "'"***REMOVED***
    er.path = abs
    er.code = "ENOTDIR"
    stat = null
***REMOVED***

  var emit = !this.statCache[abs]
  this.statCache[abs] = stat

  if (er || !stat***REMOVED*** {
    exists = false
***REMOVED*** else {
    exists = stat.isDirectory(***REMOVED*** ? 2 : 1
    if (emit***REMOVED***
      this.emit('stat', f, stat***REMOVED***
***REMOVED***
  this.cache[f] = this.cache[f] || exists
  cb.call(this, !!exists, exists === 2***REMOVED***
}

Glob.prototype._readdir = function (f, cb***REMOVED*** {
  assert(this instanceof Glob***REMOVED***
  var abs = f
  if (f.charAt(0***REMOVED*** === "/"***REMOVED*** {
    abs = path.join(this.root, f***REMOVED***
***REMOVED*** else if (isAbsolute(f***REMOVED******REMOVED*** {
    abs = f
***REMOVED*** else if (this.changedCwd***REMOVED*** {
    abs = path.resolve(this.cwd, f***REMOVED***
***REMOVED***

  if (f.length > this.maxLength***REMOVED*** {
    var er = new Error("Path name too long"***REMOVED***
    er.code = "ENAMETOOLONG"
    er.path = f
    return this._afterReaddir(f, abs, cb, er***REMOVED***
***REMOVED***

  this.log('readdir', [this.cwd, f, abs]***REMOVED***
  if (this.cache.hasOwnProperty(f***REMOVED******REMOVED*** {
    var c = this.cache[f]
    if (Array.isArray(c***REMOVED******REMOVED*** {
      if (this.sync***REMOVED*** return cb.call(this, null, c***REMOVED***
      return process.nextTick(cb.bind(this, null, c***REMOVED******REMOVED***
  ***REMOVED***

    if (!c || c === 1***REMOVED*** {
      // either ENOENT or ENOTDIR
      var code = c ? "ENOTDIR" : "ENOENT"
      , er = new Error((c ? "Not a directory" : "Not found"***REMOVED*** + ": " + f***REMOVED***
      er.path = f
      er.code = code
      this.log(f, er***REMOVED***
      if (this.sync***REMOVED*** return cb.call(this, er***REMOVED***
      return process.nextTick(cb.bind(this, er***REMOVED******REMOVED***
  ***REMOVED***

    // at this point, c === 2, meaning it's a dir, but we haven't
    // had to read it yet, or c === true, meaning it's *something*
    // but we don't have any idea what.  Need to read it, either way.
***REMOVED***

  if (this.sync***REMOVED*** {
    var er, entries
    try {
      entries = fs.readdirSync(abs***REMOVED***
  ***REMOVED*** catch (e***REMOVED*** {
      er = e
  ***REMOVED***
    return this._afterReaddir(f, abs, cb, er, entries***REMOVED***
***REMOVED***

  fs.readdir(abs, this._afterReaddir.bind(this, f, abs, cb***REMOVED******REMOVED***
}

Glob.prototype._afterReaddir = function (f, abs, cb, er, entries***REMOVED*** {
  assert(this instanceof Glob***REMOVED***
  if (entries && !er***REMOVED*** {
    this.cache[f] = entries
    // if we haven't asked to stat everything for suresies, then just
    // assume that everything in there exists, so we can avoid
    // having to stat it a second time.  This also gets us one step
    // further into ELOOP territory.
    if (!this.mark && !this.stat***REMOVED*** {
      entries.forEach(function (e***REMOVED*** {
        if (f === "/"***REMOVED*** e = f + e
        else e = f + "/" + e
        this.cache[e] = true
    ***REMOVED***, this***REMOVED***
  ***REMOVED***

    return cb.call(this, er, entries***REMOVED***
***REMOVED***

  // now handle errors, and cache the information
  if (er***REMOVED*** switch (er.code***REMOVED*** {
    case "ENOTDIR": // totally normal. means it *does* exist.
      this.cache[f] = 1
      return cb.call(this, er***REMOVED***
    case "ENOENT": // not terribly unusual
    case "ELOOP":
    case "ENAMETOOLONG":
    case "UNKNOWN":
      this.cache[f] = false
      return cb.call(this, er***REMOVED***
    default: // some unusual error.  Treat as failure.
      this.cache[f] = false
      if (this.strict***REMOVED*** this.emit("error", er***REMOVED***
      if (!this.silent***REMOVED*** console.error("glob error", er***REMOVED***
      return cb.call(this, er***REMOVED***
***REMOVED***
}

var isAbsolute = process.platform === "win32" ? absWin : absUnix

function absWin (p***REMOVED*** {
  if (absUnix(p***REMOVED******REMOVED*** return true
  // pull off the device/UNC bit from a windows path.
  // from node's lib/path.js
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+***REMOVED***?([\\\/]***REMOVED***?([\s\S]*?***REMOVED***$/
    , result = splitDeviceRe.exec(p***REMOVED***
    , device = result[1] || ''
    , isUnc = device && device.charAt(1***REMOVED*** !== ':'
    , isAbsolute = !!result[2] || isUnc // UNC paths are always absolute

  return isAbsolute
}

function absUnix (p***REMOVED*** {
  return p.charAt(0***REMOVED*** === "/" || p === ""
}
