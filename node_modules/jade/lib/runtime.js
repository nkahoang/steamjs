'use strict';

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = function merge(a, b***REMOVED*** {
  if (arguments.length === 1***REMOVED*** {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++***REMOVED*** {
      attrs = merge(attrs, a[i]***REMOVED***;
  ***REMOVED***
    return attrs;
***REMOVED***
  var ac = a['class'];
  var bc = b['class'];

  if (ac || bc***REMOVED*** {
    ac = ac || [];
    bc = bc || [];
    if (!Array.isArray(ac***REMOVED******REMOVED*** ac = [ac];
    if (!Array.isArray(bc***REMOVED******REMOVED*** bc = [bc];
    a['class'] = ac.concat(bc***REMOVED***.filter(nulls***REMOVED***;
***REMOVED***

  for (var key in b***REMOVED*** {
    if (key != 'class'***REMOVED*** {
      a[key] = b[key];
  ***REMOVED***
***REMOVED***

  return a;
};

/**
 * Filter null `val`s.
 *
 * @param {*} val
 * @return {Boolean}
 * @api private
 */

function nulls(val***REMOVED*** {
  return val != null && val !== '';
}

/**
 * join array as classes.
 *
 * @param {*} val
 * @return {String}
 */
exports.joinClasses = joinClasses;
function joinClasses(val***REMOVED*** {
  return Array.isArray(val***REMOVED*** ? val.map(joinClasses***REMOVED***.filter(nulls***REMOVED***.join(' '***REMOVED*** : val;
}

/**
 * Render the given classes.
 *
 * @param {Array} classes
 * @param {Array.<Boolean>} escaped
 * @return {String}
 */
exports.cls = function cls(classes, escaped***REMOVED*** {
  var buf = [];
  for (var i = 0; i < classes.length; i++***REMOVED*** {
    if (escaped && escaped[i]***REMOVED*** {
      buf.push(exports.escape(joinClasses([classes[i]]***REMOVED******REMOVED******REMOVED***;
  ***REMOVED*** else {
      buf.push(joinClasses(classes[i]***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***
  var text = joinClasses(buf***REMOVED***;
  if (text.length***REMOVED*** {
    return ' class="' + text + '"';
***REMOVED*** else {
    return '';
***REMOVED***
};

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = function attr(key, val, escaped, terse***REMOVED*** {
  if ('boolean' == typeof val || null == val***REMOVED*** {
    if (val***REMOVED*** {
      return ' ' + (terse ? key : key + '="' + key + '"'***REMOVED***;
  ***REMOVED*** else {
      return '';
  ***REMOVED***
***REMOVED*** else if (0 == key.indexOf('data'***REMOVED*** && 'string' != typeof val***REMOVED*** {
    return ' ' + key + "='" + JSON.stringify(val***REMOVED***.replace(/'/g, '&apos;'***REMOVED*** + "'";
***REMOVED*** else if (escaped***REMOVED*** {
    return ' ' + key + '="' + exports.escape(val***REMOVED*** + '"';
***REMOVED*** else {
    return ' ' + key + '="' + val + '"';
***REMOVED***
};

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} escaped
 * @return {String}
 */
exports.attrs = function attrs(obj, terse***REMOVED***{
  var buf = [];

  var keys = Object.keys(obj***REMOVED***;

  if (keys.length***REMOVED*** {
    for (var i = 0; i < keys.length; ++i***REMOVED*** {
      var key = keys[i]
        , val = obj[key];

      if ('class' == key***REMOVED*** {
        if (val = joinClasses(val***REMOVED******REMOVED*** {
          buf.push(' ' + key + '="' + val + '"'***REMOVED***;
      ***REMOVED***
    ***REMOVED*** else {
        buf.push(exports.attr(key, val, false, terse***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  return buf.join(''***REMOVED***;
};

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

exports.escape = function escape(html***REMOVED***{
  var result = String(html***REMOVED***
    .replace(/&/g, '&amp;'***REMOVED***
    .replace(/</g, '&lt;'***REMOVED***
    .replace(/>/g, '&gt;'***REMOVED***
    .replace(/"/g, '&quot;'***REMOVED***;
  if (result === '' + html***REMOVED*** return html;
  else return result;
};

/**
 * Re-throw the given `err` in context to the
 * the jade in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @api private
 */

exports.rethrow = function rethrow(err, filename, lineno, str***REMOVED***{
  if (!(err instanceof Error***REMOVED******REMOVED*** throw err;
  if ((typeof window != 'undefined' || !filename***REMOVED*** && !str***REMOVED*** {
    err.message += ' on line ' + lineno;
    throw err;
***REMOVED***
  try {
    str =  str || require('fs'***REMOVED***.readFileSync(filename, 'utf8'***REMOVED***
***REMOVED*** catch (ex***REMOVED*** {
    rethrow(err, null, lineno***REMOVED***
***REMOVED***
  var context = 3
    , lines = str.split('\n'***REMOVED***
    , start = Math.max(lineno - context, 0***REMOVED***
    , end = Math.min(lines.length, lineno + context***REMOVED***;

  // Error context
  var context = lines.slice(start, end***REMOVED***.map(function(line, i***REMOVED***{
    var curr = i + start + 1;
    return (curr == lineno ? '  > ' : '    '***REMOVED***
      + curr
      + '| '
      + line;
***REMOVED******REMOVED***.join('\n'***REMOVED***;

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'Jade'***REMOVED*** + ':' + lineno
    + '\n' + context + '\n\n' + err.message;
  throw err;
};
