'use strict';

var Attrs = require('./attrs'***REMOVED***;
var Block = require('./block'***REMOVED***;
var inlineTags = require('../inline-tags'***REMOVED***;

/**
 * Initialize a `Tag` node with the given tag `name` and optional `block`.
 *
 * @param {String} name
 * @param {Block} block
 * @api public
 */

var Tag = module.exports = function Tag(name, block***REMOVED*** {
  Attrs.call(this***REMOVED***;
  this.name = name;
  this.block = block || new Block;
};

// Inherit from `Attrs`.
Tag.prototype = Object.create(Attrs.prototype***REMOVED***;
Tag.prototype.constructor = Tag;

Tag.prototype.type = 'Tag';

/**
 * Clone this tag.
 *
 * @return {Tag}
 * @api private
 */

Tag.prototype.clone = function(***REMOVED***{
  var err = new Error('tag.clone is deprecated and will be removed in v2.0.0'***REMOVED***;
  console.warn(err.stack***REMOVED***;

  var clone = new Tag(this.name, this.block.clone(***REMOVED******REMOVED***;
  clone.line = this.line;
  clone.attrs = this.attrs;
  clone.textOnly = this.textOnly;
  return clone;
};

/**
 * Check if this tag is an inline tag.
 *
 * @return {Boolean}
 * @api private
 */

Tag.prototype.isInline = function(***REMOVED***{
  return ~inlineTags.indexOf(this.name***REMOVED***;
};

/**
 * Check if this tag's contents can be inlined.  Used for pretty printing.
 *
 * @return {Boolean}
 * @api private
 */

Tag.prototype.canInline = function(***REMOVED***{
  var nodes = this.block.nodes;

  function isInline(node***REMOVED***{
    // Recurse if the node is a block
    if (node.isBlock***REMOVED*** return node.nodes.every(isInline***REMOVED***;
    return node.isText || (node.isInline && node.isInline(***REMOVED******REMOVED***;
***REMOVED***

  // Empty tag
  if (!nodes.length***REMOVED*** return true;

  // Text-only or inline-only tag
  if (1 == nodes.length***REMOVED*** return isInline(nodes[0]***REMOVED***;

  // Multi-line inline-only tag
  if (this.block.nodes.every(isInline***REMOVED******REMOVED*** {
    for (var i = 1, len = nodes.length; i < len; ++i***REMOVED*** {
      if (nodes[i-1].isText && nodes[i].isText***REMOVED***
        return false;
  ***REMOVED***
    return true;
***REMOVED***

  // Mixed tag
  return false;
};
