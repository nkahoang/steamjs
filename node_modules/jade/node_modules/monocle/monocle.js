var path        = require('path'***REMOVED***;
var fs          = require('fs'***REMOVED***;
var readdirp    = require('readdirp'***REMOVED***;
var use_fs_watch  = process.platform === 'win32' || process.env.USE_FS_WATCH;

module.exports = function(***REMOVED*** {
  var watched_files       = {};
  var watched_directories = {};
  var check_dir_pause     = 1000;
  var checkInterval       = undefined;

  // @api public
  // Watches the directory passed and its contained files
  // accepts args as an object.

  // @param root(string***REMOVED***: the root directory to watch
  // @param fileFilter(array***REMOVED***: ignore these files
  // @param directoryFilter(array***REMOVED***: ignore these files
  // @param listener(fn(file***REMOVED******REMOVED***: on file change event this will be called
  // @param complete(fn***REMOVED***: on complete of file watching setup
  function watchDirectory(args***REMOVED*** {
    readdirp({ root: args.root, fileFilter: args.fileFilter, directoryFilter: args.directoryFilter }, function(err, res***REMOVED*** {
      res.files.forEach(function(file***REMOVED*** {
        watchFile(file, args.listener, args.partial***REMOVED***;
    ***REMOVED******REMOVED***;
      typeof args.complete == "function" && args.complete(***REMOVED***;
  ***REMOVED******REMOVED***;

    !args.partial && (checkInterval = setInterval(function(***REMOVED*** {checkDirectory(args***REMOVED***}, check_dir_pause***REMOVED******REMOVED***;
***REMOVED***

  // @api public
  // Watches the files passed
  // accepts args as an object.
  // @param files(array***REMOVED***: a list of files to watch
  // @param listener(fn(file***REMOVED******REMOVED***: on file change event this will be called
  // @param complete(fn***REMOVED***: on complete of file watching setup
  function watchFiles(args***REMOVED*** {
    args.files.forEach(function(file***REMOVED*** {
      var o = {
            fullPath: fs.realpathSync(file***REMOVED***,
            name: fs.realpathSync(file***REMOVED***.split('/'***REMOVED***.pop(***REMOVED***
        ***REMOVED***;
      o.fullParentDir = o.fullPath.split('/'***REMOVED***.slice(0, o.fullPath.split('/'***REMOVED***.length - 1***REMOVED***.join('/'***REMOVED***

      watchFile(o, args.listener***REMOVED***;
  ***REMOVED******REMOVED***;

    typeof args.complete == "function" && args.complete(***REMOVED***;
***REMOVED***

  function unwatchAll(***REMOVED*** {
    if (use_fs_watch***REMOVED*** {
      Object.keys(watched_files***REMOVED***.forEach(function(key***REMOVED*** {
        watched_files[key].close(***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED*** else {
      Object.keys(watched_files***REMOVED***.forEach(function(key***REMOVED*** {
        fs.unwatchFile(key***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***

    clearInterval(checkInterval***REMOVED***;
    watched_files       = {};
    watched_directories = {};
***REMOVED***

  // Checks to see if something in the directory has changed
  function checkDirectory(args***REMOVED*** {
    Object.keys(watched_directories***REMOVED***.forEach(function(path***REMOVED*** {
      var lastModified = watched_directories[path];
      fs.stat(path, function(err, stats***REMOVED*** {
        var stats_stamp = lastModified;
        if (!err***REMOVED*** {
          stats_stamp = (new Date(stats.mtime***REMOVED******REMOVED***.getTime(***REMOVED***;
      ***REMOVED***
        if (stats_stamp != lastModified***REMOVED*** {
          watched_directories[path] = stats_stamp;
          watchDirectory({
            root: path,
            listener: args.listener,
            fileFilter: args.fileFilter,
            directoryFilter: args.directoryFilter,
            partial: true
        ***REMOVED******REMOVED***;
      ***REMOVED***
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***

  // sets the absolute path to the file from the current working dir
  function setAbsolutePath(file***REMOVED*** {
    file.absolutePath = path.resolve(process.cwd(***REMOVED***, file.fullPath***REMOVED***;
    return file.absolutePath;
***REMOVED***

  // Watches the file passed and its containing directory
  // on change calls given listener with file object
  function watchFile(file, cb, partial***REMOVED*** {
    setAbsolutePath(file***REMOVED***;
    storeDirectory(file***REMOVED***;
    if (!watched_files[file.fullPath]***REMOVED*** {
      if (use_fs_watch***REMOVED*** {
        (function(***REMOVED*** {
          watched_files[file.fullPath] = fs.watch(file.fullPath, function(***REMOVED*** {
            typeof cb === "function" && cb(file***REMOVED***;
        ***REMOVED******REMOVED***;
          partial && cb(file***REMOVED***;
      ***REMOVED******REMOVED***(file, cb***REMOVED***;
    ***REMOVED*** else {
        (function(file, cb***REMOVED*** {
          watched_files[file.fullPath] = true;
          fs.watchFile(file.fullPath, {interval: 150}, function(***REMOVED*** {
            typeof cb === "function" && cb(file***REMOVED***;
        ***REMOVED******REMOVED***;
          partial && cb(file***REMOVED***;
      ***REMOVED******REMOVED***(file, cb***REMOVED***;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  // Sets up a store of the folders being watched
  // and saves the last modification timestamp for it
  function storeDirectory(file***REMOVED*** {
    var directory = file.fullParentDir;
    if (!watched_directories[directory]***REMOVED*** {
      fs.stat(directory, function(err, stats***REMOVED*** {
        if (err***REMOVED*** {
          watched_directories[directory] = (new Date***REMOVED***.getTime(***REMOVED***;
      ***REMOVED*** else {
          watched_directories[directory] = (new Date(stats.mtime***REMOVED******REMOVED***.getTime(***REMOVED***;
      ***REMOVED***
    ***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***

  // distinguish between files and directories
  // @returns {Object} contains directories and files array

  function distinguishPaths(paths***REMOVED*** {
    paths = Array.isArray(paths***REMOVED*** ? paths : [paths];
    var result = {
      directories: [],
      files: []
  ***REMOVED***;
    paths.forEach(function(name***REMOVED*** {
      if (fs.statSync(name***REMOVED***.isDirectory(***REMOVED******REMOVED*** {
        result.directories.push(name***REMOVED***;
    ***REMOVED*** else {
        result.files.push(name***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;
    return result;
***REMOVED***;

  // for functions accepts an object as paramter
  // copy the object and modify with attributes
  function extend(prototype, attributes***REMOVED*** {
    var object = {};
    Object.keys(prototype***REMOVED***.forEach(function(key***REMOVED*** {
      object[key] = prototype[key];
  ***REMOVED******REMOVED***;
    Object.keys(attributes***REMOVED***.forEach(function(key***REMOVED*** {
      object[key] = attributes[key];
  ***REMOVED******REMOVED***;
    return object;
***REMOVED***;

  // watch files if the paths refer to files, or directories
  function watchPaths(args***REMOVED*** {
    var result = distinguishPaths(args.path***REMOVED***
    if (result.directories.length***REMOVED*** {
      result.directories.forEach(function(directory***REMOVED*** {
        watchDirectory(extend(args, {root: directory}***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***
    if (result.files.length***REMOVED***
      watchFiles(extend(args, {files: result.files}***REMOVED******REMOVED***;
***REMOVED***

  return {
    watchDirectory: watchDirectory,
    watchFiles: watchFiles,
    watchPaths: watchPaths,
    unwatchAll: unwatchAll
***REMOVED***;
}
