'use strict';
var readdirp =  require('..'***REMOVED***
  , util     =  require('util'***REMOVED***
  , fs       =  require('fs'***REMOVED***
  , path     =  require('path'***REMOVED***
  , Stream   =  require('stream'***REMOVED***
  , tap      =  require('tap-stream'***REMOVED***
  , es       =  require('event-stream'***REMOVED***
  ;

function findLinesMatching (searchTerm***REMOVED*** {

  return es.through(function (entry***REMOVED*** {
    var lineno = 0
      , matchingLines = []
      , fileStream = this;

    function filter (***REMOVED*** {
      return es.mapSync(function (line***REMOVED*** {
        lineno++;
        return ~line.indexOf(searchTerm***REMOVED*** ? lineno + ': ' + line : undefined;
    ***REMOVED******REMOVED***;
  ***REMOVED***

    function aggregate (***REMOVED*** {
      return es.through(
          function write (data***REMOVED*** { 
            matchingLines.push(data***REMOVED***; 
        ***REMOVED***
        , function end (***REMOVED*** {

            // drop files that had no matches
            if (matchingLines.length***REMOVED*** {
              var result = { file: entry, lines: matchingLines };

              // pass result on to file stream
              fileStream.emit('data', result***REMOVED***;
          ***REMOVED***
            this.emit('end'***REMOVED***;
        ***REMOVED***
      ***REMOVED***;
  ***REMOVED***

    fs.createReadStream(entry.fullPath, { encoding: 'utf-8' }***REMOVED***

      // handle file contents line by line
      .pipe(es.split('\n'***REMOVED******REMOVED***

      // keep only the lines that matched the term
      .pipe(filter(***REMOVED******REMOVED***

      // aggregate all matching lines and delegate control back to the file stream
      .pipe(aggregate(***REMOVED******REMOVED***
      ;
***REMOVED******REMOVED***;
}

console.log('grepping for "arguments"'***REMOVED***;

// create a stream of all javascript files found in this and all sub directories
readdirp({ root: path.join(__dirname***REMOVED***, fileFilter: '*.js' }***REMOVED***

  // find all lines matching the term for each file (if none found, that file is ignored***REMOVED***
  .pipe(findLinesMatching('arguments'***REMOVED******REMOVED***

  // format the results and output
  .pipe(
    es.mapSync(function (res***REMOVED*** {
      return '\n\n' + res.file.path + '\n\t' + res.lines.join('\n\t'***REMOVED***;
  ***REMOVED******REMOVED***
  ***REMOVED***
  .pipe(process.stdout***REMOVED***
  ;
