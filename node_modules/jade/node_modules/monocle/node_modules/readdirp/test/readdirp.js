/*jshint asi:true */

var test     =  require('tap'***REMOVED***.test
  , path     =  require('path'***REMOVED***
  , fs       =  require('fs'***REMOVED***
  , util     =  require('util'***REMOVED***
  , readdirp =  require('../readdirp.js'***REMOVED***
  , root     =  path.join(__dirname, '../test/bed'***REMOVED***
  , totalDirs          =  6
  , totalFiles         =  12
  , ext1Files          =  4
  , ext2Files          =  3
  , ext3Files          =  2
  , rootDir2Files      =  2
  , nameHasLength9Dirs =  2
  , depth1Files        =  8
  , depth0Files        =  3
  ;

/* 
Structure of test bed:
    .
    ├── root_dir1
    │   ├── root_dir1_file1.ext1
    │   ├── root_dir1_file2.ext2
    │   ├── root_dir1_file3.ext3
    │   ├── root_dir1_subdir1
    │   │   └── root1_dir1_subdir1_file1.ext1
    │   └── root_dir1_subdir2
    │       └── .gitignore
    ├── root_dir2
    │   ├── root_dir2_file1.ext1
    │   ├── root_dir2_file2.ext2
    │   ├── root_dir2_subdir1
    │   │   └── .gitignore
    │   └── root_dir2_subdir2
    │       └── .gitignore
    ├── root_file1.ext1
    ├── root_file2.ext2
    └── root_file3.ext3

    6 directories, 13 files
*/

// console.log('\033[2J'***REMOVED***; // clear console

function opts (extend***REMOVED*** {
  var o = { root: root };

  if (extend***REMOVED*** {
    for (var prop in extend***REMOVED*** {
      o[prop] = extend[prop];
  ***REMOVED***
***REMOVED***
  return o;
}

test('\nreading root without filter', function (t***REMOVED*** {
  t.plan(2***REMOVED***;
  readdirp(opts(***REMOVED***, function (err, res***REMOVED*** {
    t.equals(res.directories.length, totalDirs, 'all directories'***REMOVED***;
    t.equals(res.files.length, totalFiles, 'all files'***REMOVED***;
    t.end(***REMOVED***;
***REMOVED******REMOVED*** 
}***REMOVED***

test('\nreading root using glob filter', function (t***REMOVED*** {
  // normal
  t.test('\n# "*.ext1"', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: '*.ext1' } ***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.files.length, ext1Files, 'all ext1 files'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
  t.test('\n# ["*.ext1", "*.ext3"]', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: [ '*.ext1', '*.ext3' ] } ***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.files.length, ext1Files + ext3Files, 'all ext1 and ext3 files'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
  t.test('\n# "root_dir1"', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { directoryFilter: 'root_dir1' }***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.directories.length, 1, 'one directory'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
  t.test('\n# ["root_dir1", "*dir1_subdir1"]', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { directoryFilter: [ 'root_dir1', '*dir1_subdir1' ]}***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.directories.length, 2, 'two directories'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***

  t.test('\n# negated: "!*.ext1"', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: '!*.ext1' } ***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.files.length, totalFiles - ext1Files, 'all but ext1 files'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
  t.test('\n# negated: ["!*.ext1", "!*.ext3"]', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: [ '!*.ext1', '!*.ext3' ] } ***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.files.length, totalFiles - ext1Files - ext3Files, 'all but ext1 and ext3 files'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***

  t.test('\n# mixed: ["*.ext1", "!*.ext3"]', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: [ '*.ext1', '!*.ext3' ] } ***REMOVED***, function (err, res***REMOVED*** {
      t.similar(err[0].toString(***REMOVED***, /Cannot mix negated with non negated glob filters/, 'returns meaningfull error'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***

  t.test('\n# leading and trailing spaces: [" *.ext1", "*.ext3 "]', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: [ ' *.ext1', '*.ext3 ' ] } ***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.files.length, ext1Files + ext3Files, 'all ext1 and ext3 files'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
  t.test('\n# leading and trailing spaces: [" !*.ext1", " !*.ext3 "]', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: [ ' !*.ext1', ' !*.ext3' ] } ***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.files.length, totalFiles - ext1Files - ext3Files, 'all but ext1 and ext3 files'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***

  t.test('\n# ** glob pattern', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(opts( { fileFilter: '**/*.ext1' } ***REMOVED***, function (err, res***REMOVED*** {
      t.equals(res.files.length, ext1Files, 'ignores ** in **/*.ext1 -> only *.ext1 files'***REMOVED***;
      t.end(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

test('\n\nreading root using function filter', function (t***REMOVED*** {
  t.test('\n# file filter -> "contains root_dir2"', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(
        opts( { fileFilter: function (fi***REMOVED*** { return fi.name.indexOf('root_dir2'***REMOVED*** >= 0; } }***REMOVED***
      , function (err, res***REMOVED*** {
          t.equals(res.files.length, rootDir2Files, 'all rootDir2Files'***REMOVED***;
          t.end(***REMOVED***;
    ***REMOVED***
    ***REMOVED***
***REMOVED******REMOVED***
  
  t.test('\n# directory filter -> "name has length 9"', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
    readdirp(
        opts( { directoryFilter: function (di***REMOVED*** { return di.name.length === 9; } }***REMOVED***
      , function (err, res***REMOVED*** {
          t.equals(res.directories.length, nameHasLength9Dirs, 'all all dirs with name length 9'***REMOVED***;
          t.end(***REMOVED***;
    ***REMOVED***
    ***REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

test('\nreading root specifying maximum depth', function (t***REMOVED*** {
  t.test('\n# depth 1', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
      readdirp(opts( { depth: 1 } ***REMOVED***, function (err, res***REMOVED*** {
        t.equals(res.files.length, depth1Files, 'does not return files at depth 2'***REMOVED***;
    ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

test('\nreading root with no recursion', function (t***REMOVED*** {
  t.test('\n# depth 0', function (t***REMOVED*** {
    t.plan(1***REMOVED***;
      readdirp(opts( { depth: 0 } ***REMOVED***, function (err, res***REMOVED*** {
        t.equals(res.files.length, depth0Files, 'does not return files at depth 0'***REMOVED***;
    ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

test('\nprogress callbacks', function (t***REMOVED*** {
  t.plan(2***REMOVED***;

  var pluckName = function(fi***REMOVED*** { return fi.name; }
    , processedFiles = [];

  readdirp(
      opts(***REMOVED*** 
    , function(fi***REMOVED*** { 
        processedFiles.push(fi***REMOVED***;
    ***REMOVED*** 
    , function (err, res***REMOVED*** {
        t.equals(processedFiles.length, res.files.length, 'calls back for each file processed'***REMOVED***;
        t.deepEquals(processedFiles.map(pluckName***REMOVED***.sort(***REMOVED***,res.files.map(pluckName***REMOVED***.sort(***REMOVED***, 'same file names'***REMOVED***;
        t.end(***REMOVED***;
    ***REMOVED***
  ***REMOVED***
}***REMOVED***

test('resolving of name, full and relative paths', function (t***REMOVED*** {
  var expected = {  
        name          :  'root_dir1_file1.ext1'
      , parentDirName :  'root_dir1'
      , path          :  'root_dir1/root_dir1_file1.ext1'
      , fullPath      :  'test/bed/root_dir1/root_dir1_file1.ext1'
    ***REMOVED***
    , opts = [ 
        { root: './bed'          ,  prefix: ''   ***REMOVED***
      , { root: './bed/'         ,  prefix: ''   ***REMOVED***
      , { root: 'bed'            ,  prefix: ''   ***REMOVED***
      , { root: 'bed/'           ,  prefix: ''   ***REMOVED***
      , { root: '../test/bed/'   ,  prefix: ''   ***REMOVED***
      , { root: '.'              ,  prefix: 'bed'***REMOVED***
    ]
  t.plan(opts.length***REMOVED***;
  
  opts.forEach(function (op***REMOVED*** {
    op.fileFilter = 'root_dir1_file1.ext1';

    t.test('\n' + util.inspect(op***REMOVED***, function (t***REMOVED*** {
      t.plan(4***REMOVED***;

      readdirp (op, function(err, res***REMOVED*** {
        t.equals(res.files[0].name, expected.name, 'correct name'***REMOVED***;
        t.equals(res.files[0].path, path.join(op.prefix, expected.path***REMOVED***, 'correct path'***REMOVED***;
    ***REMOVED******REMOVED***

      fs.realpath(op.root, function(err, fullRoot***REMOVED*** {
        readdirp (op, function(err, res***REMOVED*** {
          t.equals(
              res.files[0].fullParentDir
            , path.join(fullRoot, op.prefix, expected.parentDirName***REMOVED***
            , 'correct parentDir'
          ***REMOVED***;
          t.equals(
              res.files[0].fullPath
            , path.join(fullRoot, op.prefix, expected.parentDirName, expected.name***REMOVED***
            , 'correct fullPath'
          ***REMOVED***;
      ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***


