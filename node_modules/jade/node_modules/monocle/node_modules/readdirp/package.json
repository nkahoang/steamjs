{
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "thlorenz.com"
***REMOVED***,
  "name": "readdirp",
  "description": "Recursive version of fs.readdir with streaming api.",
  "version": "0.2.5",
  "homepage": "https://github.com/thlorenz/readdirp",
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/readdirp.git"
***REMOVED***,
  "engines": {
    "node": ">=0.4"
***REMOVED***,
  "keywords": [
    "recursive",
    "fs",
    "stream",
    "streams",
    "readdir",
    "filesystem",
    "find",
    "filter"
  ],
  "main": "readdirp.js",
  "scripts": {
    "test": "tap test/*.js"
***REMOVED***,
  "dependencies": {
    "minimatch": ">=0.2.4"
***REMOVED***,
  "devDependencies": {
    "tap": "~0.3.1",
    "through": "~1.1.0",
    "minimatch": "~0.2.7"
***REMOVED***,
  "optionalDependencies": {},
  "license": "MIT",
  "readme": "# readdirp [![Build Status](https://secure.travis-ci.org/thlorenz/readdirp.png***REMOVED***](http://travis-ci.org/thlorenz/readdirp***REMOVED***\n\nRecursive version of [fs.readdir](http://nodejs.org/docs/latest/api/fs.html#fs_fs_readdir_path_callback***REMOVED***. Exposes a **stream api**.\n\n```javascript\nvar readdirp = require('readdirp'***REMOVED***; \n  , ***REMOVED***\n  , es = require('event-stream'***REMOVED***;\n\n// print out all JavaScript files along with their size\n\nvar stream = readdirp({ root: path.join(__dirname***REMOVED***, fileFilter: '*.js' }***REMOVED***;\nstream\n  .on('warn', function (err***REMOVED*** { \n    console.error('non-fatal error', err***REMOVED***; \n    // optionally call stream.destroy(***REMOVED*** here in order to abort and cause 'close' to be emitted\n***REMOVED******REMOVED***\n  .on('error', function (err***REMOVED*** { console.error('fatal error', err***REMOVED***; }***REMOVED***\n  .pipe(es.mapSync(function (entry***REMOVED*** { \n    return { path: entry.path, size: entry.stat.size };\n***REMOVED******REMOVED******REMOVED***\n  .pipe(es.stringify(***REMOVED******REMOVED***\n  .pipe(process.stdout***REMOVED***;\n```\n\nMeant to be one of the recursive versions of [fs](http://nodejs.org/docs/latest/api/fs.html***REMOVED*** functions, e.g., like [mkdirp](https://github.com/substack/node-mkdirp***REMOVED***.\n\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/***REMOVED****\n\n- [Installation](#installation***REMOVED***\n- [API](#api***REMOVED***\n\t- [entry stream](#entry-stream***REMOVED***\n\t- [options](#options***REMOVED***\n\t- [entry info](#entry-info***REMOVED***\n\t- [Filters](#filters***REMOVED***\n\t- [Callback API](#callback-api***REMOVED***\n\t\t- [allProcessed ](#allprocessed***REMOVED***\n\t\t- [fileProcessed](#fileprocessed***REMOVED***\n- [More Examples](#more-examples***REMOVED***\n\t- [stream api](#stream-api***REMOVED***\n\t- [stream api pipe](#stream-api-pipe***REMOVED***\n\t- [grep](#grep***REMOVED***\n\t- [using callback api](#using-callback-api***REMOVED***\n\t- [tests](#tests***REMOVED***\n\n\n# Installation\n\n    npm install readdirp\n\n# API\n\n***var entryStream = readdirp (options***REMOVED******\n\nReads given root recursively and returns a `stream` of [entry info](#entry-info***REMOVED***s.\n\n## entry stream\n\nBehaves as follows:\n  \n- `emit('data'***REMOVED***` passes an [entry info](#entry-info***REMOVED*** whenever one is found\n- `emit('warn'***REMOVED***` passes a non-fatal `Error` that prevents a file/directory from being processed (i.e., if it is\n  inaccessible to the user***REMOVED***\n- `emit('error'***REMOVED***` passes a fatal `Error` which also ends the stream (i.e., when illegal options where passed***REMOVED***\n- `emit('end'***REMOVED***` called when all entries were found and no more will be emitted (i.e., we are done***REMOVED***\n- `emit('close'***REMOVED***` called when the stream is destroyed via `stream.destroy(***REMOVED***` (which could be useful if you want to\n  manually abort even on a non fatal error***REMOVED*** - at that point the stream is no longer `readable` and no more entries,\n  warning or errors are emitted\n- the stream is `paused` initially in order to allow `pipe` and `on` handlers be connected before data or errors are\n  emitted\n- the stream is `resumed` automatically during the next event loop \n- to learn more about streams, consult the [stream-handbook](https://github.com/substack/stream-handbook***REMOVED***\n\n## options\n    \n- **root**: path in which to start reading and recursing into subdirectories\n\n- **fileFilter**: filter to include/exclude files found (see [Filters](#filters***REMOVED*** for more***REMOVED***\n\n- **directoryFilter**: filter to include/exclude directories found and to recurse into (see [Filters](#filters***REMOVED*** for more***REMOVED***\n\n- **depth**: depth at which to stop recursing even if more subdirectories are found\n\n## entry info\n\nHas the following properties:\n\n- **parentDir**     :  directory in which entry was found (relative to given root***REMOVED***\n- **fullParentDir** :  full path to parent directory\n- **name**          :  name of the file/directory\n- **path**          :  path to the file/directory (relative to given root***REMOVED***\n- **fullPath**      :  full path to the file/directory found\n- **stat**          :  built in [stat object](http://nodejs.org/docs/v0.4.9/api/fs.html#fs.Stats***REMOVED***\n- **Example**: (assuming root was `/User/dev/readdirp`***REMOVED***\n        \n        parentDir     :  'test/bed/root_dir1',\n        fullParentDir :  '/User/dev/readdirp/test/bed/root_dir1',\n        name          :  'root_dir1_subdir1',\n        path          :  'test/bed/root_dir1/root_dir1_subdir1',\n        fullPath      :  '/User/dev/readdirp/test/bed/root_dir1/root_dir1_subdir1',\n        stat          :  [ ... ]\n                    \n## Filters\n    \nThere are three different ways to specify filters for files and directories respectively. \n\n- **function**: a function that takes an entry info as a parameter and returns true to include or false to exclude the entry\n\n- **glob string**: a string (e.g., `*.js`***REMOVED*** which is matched using [minimatch](https://github.com/isaacs/minimatch***REMOVED***, so go there for more\n    information. \n\n    Globstars (`**`***REMOVED*** are not supported since specifiying a recursive pattern for an already recursive function doesn't make sense.\n\n    Negated globs (as explained in the minimatch documentation***REMOVED*** are allowed, e.g., `!*.txt` matches everything but text files.\n\n- **array of glob strings**: either need to be all inclusive or all exclusive (negated***REMOVED*** patterns otherwise an error is thrown.\n    \n    `[ '*.json', '*.js' ]` includes all JavaScript and Json files.\n    \n    \n    `[ '!.git', '!node_modules' ]` includes all directories except the '.git' and 'node_modules'.\n\nDirectories that do not pass a filter will not be recursed into.\n\n## Callback API\n\nAlthough the stream api is recommended, readdirp also exposes a callback based api.\n\n***readdirp (options, callback1 [, callback2]***REMOVED******\n\nIf callback2 is given, callback1 functions as the **fileProcessed** callback, and callback2 as the **allProcessed** callback.\n\nIf only callback1 is given, it functions as the **allProcessed** callback.\n\n### allProcessed \n\n- function with err and res parameters, e.g., `function (err, res***REMOVED*** { ... }`\n- **err**: array of errors that occurred during the operation, **res may still be present, even if errors occurred**\n- **res**: collection of file/directory [entry infos](#entry-info***REMOVED***\n\n### fileProcessed\n\n- function with [entry info](#entry-info***REMOVED*** parameter e.g., `function (entryInfo***REMOVED*** { ... }`\n\n\n# More Examples\n\n`on('error', ..***REMOVED***`, `on('warn', ..***REMOVED***` and `on('end', ..***REMOVED***` handling omitted for brevity\n\n```javascript\nvar readdirp = require('readdirp'***REMOVED***;\n\n// Glob file filter\nreaddirp({ root: './test/bed', fileFilter: '*.js' }***REMOVED***\n  .on('data', function (entry***REMOVED*** {\n    // do something with each JavaScript file entry\n***REMOVED******REMOVED***;\n\n// Combined glob file filters\nreaddirp({ root: './test/bed', fileFilter: [ '*.js', '*.json' ] }***REMOVED***\n  .on('data', function (entry***REMOVED*** {\n    // do something with each JavaScript and Json file entry \n***REMOVED******REMOVED***;\n\n// Combined negated directory filters\nreaddirp({ root: './test/bed', directoryFilter: [ '!.git', '!*modules' ] }***REMOVED***\n  .on('data', function (entry***REMOVED*** {\n    // do something with each file entry found outside '.git' or any modules directory \n***REMOVED******REMOVED***;\n\n// Function directory filter\nreaddirp({ root: './test/bed', directoryFilter: function (di***REMOVED*** { return di.name.length === 9; } }***REMOVED***\n  .on('data', function (entry***REMOVED*** {\n    // do something with each file entry found inside directories whose name has length 9\n***REMOVED******REMOVED***;\n\n// Limiting depth\nreaddirp({ root: './test/bed', depth: 1 }***REMOVED***\n  .on('data', function (entry***REMOVED*** {\n    // do something with each file entry found up to 1 subdirectory deep\n***REMOVED******REMOVED***;\n\n// callback api\nreaddirp(\n    { root: '.' }\n  , function(fileInfo***REMOVED*** { \n      // do something with file entry here\n  ***REMOVED*** \n  , function (err, res***REMOVED*** {\n      // all done, move on or do final step for all file entries here\n  ***REMOVED***\n***REMOVED***;\n```\n\nTry more examples by following [instructions](https://github.com/thlorenz/readdirp/blob/master/examples/Readme.md***REMOVED***\non how to get going.\n\n## stream api\n\n[stream-api.js](https://github.com/thlorenz/readdirp/blob/master/examples/stream-api.js***REMOVED***\n\nDemonstrates error and data handling by listening to events emitted from the readdirp stream.\n\n## stream api pipe\n\n[stream-api-pipe.js](https://github.com/thlorenz/readdirp/blob/master/examples/stream-api-pipe.js***REMOVED***\n\nDemonstrates error handling by listening to events emitted from the readdirp stream and how to pipe the data stream into\nanother destination stream.\n\n## grep\n\n[grep.js](https://github.com/thlorenz/readdirp/blob/master/examples/grep.js***REMOVED***\n\nVery naive implementation of grep, for demonstration purposes only.\n\n## using callback api\n\n[callback-api.js](https://github.com/thlorenz/readdirp/blob/master/examples/callback-api.js***REMOVED***\n\nShows how to pass callbacks in order to handle errors and/or data.\n\n## tests\n\nThe [readdirp tests](https://github.com/thlorenz/readdirp/blob/master/test/readdirp.js***REMOVED*** also will give you a good idea on\nhow things work.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thlorenz/readdirp/issues"
***REMOVED***,
  "_id": "readdirp@0.2.5",
  "_from": "readdirp@~0.2.3"
}
