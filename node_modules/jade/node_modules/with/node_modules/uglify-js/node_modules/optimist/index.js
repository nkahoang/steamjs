var ***REMOVED***;
var wordwrap = require('wordwrap'***REMOVED***;

/*  Hack an instance of Argv with process.argv into Argv
    so people can do
        require('optimist'***REMOVED***(['--beeble=1','-z','zizzle']***REMOVED***.argv
    to parse a list of args and
        require('optimist'***REMOVED***.argv
    to get a parsed version of process.argv.
*/

var inst = Argv(process.argv.slice(2***REMOVED******REMOVED***;
Object.keys(inst***REMOVED***.forEach(function (key***REMOVED*** {
    Argv[key] = typeof inst[key] == 'function'
        ? inst[key].bind(inst***REMOVED***
        : inst[key];
}***REMOVED***;

var exports = module.exports = Argv;
function Argv (args, cwd***REMOVED*** {
    var self = {};
    if (!cwd***REMOVED*** cwd = process.cwd(***REMOVED***;
    
    self.$0 = process.argv
        .slice(0,2***REMOVED***
        .map(function (x***REMOVED*** {
            var b = rebase(cwd, x***REMOVED***;
            return x.match(/^\//***REMOVED*** && b.length < x.length
                ? b : x
      ***REMOVED******REMOVED***
        .join(' '***REMOVED***
    ;
    
    if (process.env._ != undefined && process.argv[1] == process.env._***REMOVED*** {
        self.$0 = process.env._.replace(
            path.dirname(process.execPath***REMOVED*** + '/', ''
        ***REMOVED***;
  ***REMOVED***
    
    var flags = { bools : {}, strings : {} };
    
    self.boolean = function (bools***REMOVED*** {
        if (!Array.isArray(bools***REMOVED******REMOVED*** {
            bools = [].slice.call(arguments***REMOVED***;
      ***REMOVED***
        
        bools.forEach(function (name***REMOVED*** {
            flags.bools[name] = true;
      ***REMOVED******REMOVED***;
        
        return self;
  ***REMOVED***;
    
    self.string = function (strings***REMOVED*** {
        if (!Array.isArray(strings***REMOVED******REMOVED*** {
            strings = [].slice.call(arguments***REMOVED***;
      ***REMOVED***
        
        strings.forEach(function (name***REMOVED*** {
            flags.strings[name] = true;
      ***REMOVED******REMOVED***;
        
        return self;
  ***REMOVED***;
    
    var aliases = {};
    self.alias = function (x, y***REMOVED*** {
        if (typeof x === 'object'***REMOVED*** {
            Object.keys(x***REMOVED***.forEach(function (key***REMOVED*** {
                self.alias(key, x[key]***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
        else if (Array.isArray(y***REMOVED******REMOVED*** {
            y.forEach(function (yy***REMOVED*** {
                self.alias(x, yy***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
        else {
            var zs = (aliases[x] || []***REMOVED***.concat(aliases[y] || []***REMOVED***.concat(x, y***REMOVED***;
            aliases[x] = zs.filter(function (z***REMOVED*** { return z != x }***REMOVED***;
            aliases[y] = zs.filter(function (z***REMOVED*** { return z != y }***REMOVED***;
      ***REMOVED***
        
        return self;
  ***REMOVED***;
    
    var demanded = {};
    self.demand = function (keys***REMOVED*** {
        if (typeof keys == 'number'***REMOVED*** {
            if (!demanded._***REMOVED*** demanded._ = 0;
            demanded._ += keys;
      ***REMOVED***
        else if (Array.isArray(keys***REMOVED******REMOVED*** {
            keys.forEach(function (key***REMOVED*** {
                self.demand(key***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
        else {
            demanded[keys] = true;
      ***REMOVED***
        
        return self;
  ***REMOVED***;
    
    var usage;
    self.usage = function (msg, opts***REMOVED*** {
        if (!opts && typeof msg === 'object'***REMOVED*** {
            opts = msg;
            msg = null;
      ***REMOVED***
        
        usage = msg;
        
        if (opts***REMOVED*** self.options(opts***REMOVED***;
        
        return self;
  ***REMOVED***;
    
    function fail (msg***REMOVED*** {
        self.showHelp(***REMOVED***;
        if (msg***REMOVED*** console.error(msg***REMOVED***;
        process.exit(1***REMOVED***;
  ***REMOVED***
    
    var checks = [];
    self.check = function (f***REMOVED*** {
        checks.push(f***REMOVED***;
        return self;
  ***REMOVED***;
    
    var defaults = {};
    self.default = function (key, value***REMOVED*** {
        if (typeof key === 'object'***REMOVED*** {
            Object.keys(key***REMOVED***.forEach(function (k***REMOVED*** {
                self.default(k, key[k]***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
        else {
            defaults[key] = value;
      ***REMOVED***
        
        return self;
  ***REMOVED***;
    
    var descriptions = {};
    self.describe = function (key, desc***REMOVED*** {
        if (typeof key === 'object'***REMOVED*** {
            Object.keys(key***REMOVED***.forEach(function (k***REMOVED*** {
                self.describe(k, key[k]***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
        else {
            descriptions[key] = desc;
      ***REMOVED***
        return self;
  ***REMOVED***;
    
    self.parse = function (args***REMOVED*** {
        return Argv(args***REMOVED***.argv;
  ***REMOVED***;
    
    self.option = self.options = function (key, opt***REMOVED*** {
        if (typeof key === 'object'***REMOVED*** {
            Object.keys(key***REMOVED***.forEach(function (k***REMOVED*** {
                self.options(k, key[k]***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
        else {
            if (opt.alias***REMOVED*** self.alias(key, opt.alias***REMOVED***;
            if (opt.demand***REMOVED*** self.demand(key***REMOVED***;
            if (typeof opt.default !== 'undefined'***REMOVED*** {
                self.default(key, opt.default***REMOVED***;
          ***REMOVED***
            
            if (opt.boolean || opt.type === 'boolean'***REMOVED*** {
                self.boolean(key***REMOVED***;
          ***REMOVED***
            if (opt.string || opt.type === 'string'***REMOVED*** {
                self.string(key***REMOVED***;
          ***REMOVED***
            
            var desc = opt.describe || opt.description || opt.desc;
            if (desc***REMOVED*** {
                self.describe(key, desc***REMOVED***;
          ***REMOVED***
      ***REMOVED***
        
        return self;
  ***REMOVED***;
    
    var wrap = null;
    self.wrap = function (cols***REMOVED*** {
        wrap = cols;
        return self;
  ***REMOVED***;
    
    self.showHelp = function (fn***REMOVED*** {
        if (!fn***REMOVED*** fn = console.error;
        fn(self.help(***REMOVED******REMOVED***;
  ***REMOVED***;
    
    self.help = function (***REMOVED*** {
        var keys = Object.keys(
            Object.keys(descriptions***REMOVED***
            .concat(Object.keys(demanded***REMOVED******REMOVED***
            .concat(Object.keys(defaults***REMOVED******REMOVED***
            .reduce(function (acc, key***REMOVED*** {
                if (key !== '_'***REMOVED*** acc[key] = true;
                return acc;
          ***REMOVED***, {}***REMOVED***
        ***REMOVED***;
        
        var help = keys.length ? [ 'Options:' ] : [];
        
        if (usage***REMOVED*** {
            help.unshift(usage.replace(/\$0/g, self.$0***REMOVED***, ''***REMOVED***;
      ***REMOVED***
        
        var switches = keys.reduce(function (acc, key***REMOVED*** {
            acc[key] = [ key ].concat(aliases[key] || []***REMOVED***
                .map(function (sw***REMOVED*** {
                    return (sw.length > 1 ? '--' : '-'***REMOVED*** + sw
              ***REMOVED******REMOVED***
                .join(', '***REMOVED***
            ;
            return acc;
      ***REMOVED***, {}***REMOVED***;
        
        var switchlen = longest(Object.keys(switches***REMOVED***.map(function (s***REMOVED*** {
            return switches[s] || '';
      ***REMOVED******REMOVED******REMOVED***;
        
        var desclen = longest(Object.keys(descriptions***REMOVED***.map(function (d***REMOVED*** { 
            return descriptions[d] || '';
      ***REMOVED******REMOVED******REMOVED***;
        
        keys.forEach(function (key***REMOVED*** {
            var kswitch = switches[key];
            var desc = descriptions[key] || '';
            
            if (wrap***REMOVED*** {
                desc = wordwrap(switchlen + 4, wrap***REMOVED***(desc***REMOVED***
                    .slice(switchlen + 4***REMOVED***
                ;
          ***REMOVED***
            
            var spadding = new Array(
                Math.max(switchlen - kswitch.length + 3, 0***REMOVED***
            ***REMOVED***.join(' '***REMOVED***;
            
            var dpadding = new Array(
                Math.max(desclen - desc.length + 1, 0***REMOVED***
            ***REMOVED***.join(' '***REMOVED***;
            
            var type = null;
            
            if (flags.bools[key]***REMOVED*** type = '[boolean]';
            if (flags.strings[key]***REMOVED*** type = '[string]';
            
            if (!wrap && dpadding.length > 0***REMOVED*** {
                desc += dpadding;
          ***REMOVED***
            
            var prelude = '  ' + kswitch + spadding;
            var extra = [
                type,
                demanded[key]
                    ? '[required]'
                    : null
                ,
                defaults[key] !== undefined
                    ? '[default: ' + JSON.stringify(defaults[key]***REMOVED*** + ']'
                    : null
                ,
            ].filter(Boolean***REMOVED***.join('  '***REMOVED***;
            
            var body = [ desc, extra ].filter(Boolean***REMOVED***.join('  '***REMOVED***;
            
            if (wrap***REMOVED*** {
                var dlines = desc.split('\n'***REMOVED***;
                var dlen = dlines.slice(-1***REMOVED***[0].length
                    + (dlines.length === 1 ? prelude.length : 0***REMOVED***
                
                body = desc + (dlen + extra.length > wrap - 2
                    ? '\n'
                        + new Array(wrap - extra.length + 1***REMOVED***.join(' '***REMOVED***
                        + extra
                    : new Array(wrap - extra.length - dlen + 1***REMOVED***.join(' '***REMOVED***
                        + extra
                ***REMOVED***;
          ***REMOVED***
            
            help.push(prelude + body***REMOVED***;
      ***REMOVED******REMOVED***;
        
        help.push(''***REMOVED***;
        return help.join('\n'***REMOVED***;
  ***REMOVED***;
    
    Object.defineProperty(self, 'argv', {
        get : parseArgs,
        enumerable : true,
  ***REMOVED******REMOVED***;
    
    function parseArgs (***REMOVED*** {
        var argv = { _ : [], $0 : self.$0 };
        Object.keys(flags.bools***REMOVED***.forEach(function (key***REMOVED*** {
            setArg(key, defaults[key] || false***REMOVED***;
      ***REMOVED******REMOVED***;
        
        function setArg (key, val***REMOVED*** {
            var num = Number(val***REMOVED***;
            var value = typeof val !== 'string' || isNaN(num***REMOVED*** ? val : num;
            if (flags.strings[key]***REMOVED*** value = val;
            
            setKey(argv, key.split('.'***REMOVED***, value***REMOVED***;
            
            (aliases[key] || []***REMOVED***.forEach(function (x***REMOVED*** {
                argv[x] = argv[key];
          ***REMOVED******REMOVED***;
      ***REMOVED***
        
        for (var i = 0; i < args.length; i++***REMOVED*** {
            var arg = args[i];
            
            if (arg === '--'***REMOVED*** {
                argv._.push.apply(argv._, args.slice(i + 1***REMOVED******REMOVED***;
                break;
          ***REMOVED***
            else if (arg.match(/^--.+=/***REMOVED******REMOVED*** {
                // Using [\s\S] instead of . because js doesn't support the
                // 'dotall' regex modifier. See:
                // http://stackoverflow.com/a/1068308/13216
                var m = arg.match(/^--([^=]+***REMOVED***=([\s\S]****REMOVED***$/***REMOVED***;
                setArg(m[1], m[2]***REMOVED***;
          ***REMOVED***
            else if (arg.match(/^--no-.+/***REMOVED******REMOVED*** {
                var key = arg.match(/^--no-(.+***REMOVED***/***REMOVED***[1];
                setArg(key, false***REMOVED***;
          ***REMOVED***
            else if (arg.match(/^--.+/***REMOVED******REMOVED*** {
                var key = arg.match(/^--(.+***REMOVED***/***REMOVED***[1];
                var next = args[i + 1];
                if (next !== undefined && !next.match(/^-/***REMOVED***
                && !flags.bools[key]
                && (aliases[key] ? !flags.bools[aliases[key]] : true***REMOVED******REMOVED*** {
                    setArg(key, next***REMOVED***;
                    i++;
              ***REMOVED***
                else if (/^(true|false***REMOVED***$/.test(next***REMOVED******REMOVED*** {
                    setArg(key, next === 'true'***REMOVED***;
                    i++;
              ***REMOVED***
                else {
                    setArg(key, true***REMOVED***;
              ***REMOVED***
          ***REMOVED***
            else if (arg.match(/^-[^-]+/***REMOVED******REMOVED*** {
                var letters = arg.slice(1,-1***REMOVED***.split(''***REMOVED***;
                
                var broken = false;
                for (var j = 0; j < letters.length; j++***REMOVED*** {
                    if (letters[j+1] && letters[j+1].match(/\W/***REMOVED******REMOVED*** {
                        setArg(letters[j], arg.slice(j+2***REMOVED******REMOVED***;
                        broken = true;
                        break;
                  ***REMOVED***
                    else {
                        setArg(letters[j], true***REMOVED***;
                  ***REMOVED***
              ***REMOVED***
                
                if (!broken***REMOVED*** {
                    var key = arg.slice(-1***REMOVED***[0];
                    
                    if (args[i+1] && !args[i+1].match(/^-/***REMOVED***
                    && !flags.bools[key]
                    && (aliases[key] ? !flags.bools[aliases[key]] : true***REMOVED******REMOVED*** {
                        setArg(key, args[i+1]***REMOVED***;
                        i++;
                  ***REMOVED***
                    else if (args[i+1] && /true|false/.test(args[i+1]***REMOVED******REMOVED*** {
                        setArg(key, args[i+1] === 'true'***REMOVED***;
                        i++;
                  ***REMOVED***
                    else {
                        setArg(key, true***REMOVED***;
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
            else {
                var n = Number(arg***REMOVED***;
                argv._.push(flags.strings['_'] || isNaN(n***REMOVED*** ? arg : n***REMOVED***;
          ***REMOVED***
      ***REMOVED***
        
        Object.keys(defaults***REMOVED***.forEach(function (key***REMOVED*** {
            if (!(key in argv***REMOVED******REMOVED*** {
                argv[key] = defaults[key];
                if (key in aliases***REMOVED*** {
                    argv[aliases[key]] = defaults[key];
              ***REMOVED***
          ***REMOVED***
      ***REMOVED******REMOVED***;
        
        if (demanded._ && argv._.length < demanded._***REMOVED*** {
            fail('Not enough non-option arguments: got '
                + argv._.length + ', need at least ' + demanded._
            ***REMOVED***;
      ***REMOVED***
        
        var missing = [];
        Object.keys(demanded***REMOVED***.forEach(function (key***REMOVED*** {
            if (!argv[key]***REMOVED*** missing.push(key***REMOVED***;
      ***REMOVED******REMOVED***;
        
        if (missing.length***REMOVED*** {
            fail('Missing required arguments: ' + missing.join(', '***REMOVED******REMOVED***;
      ***REMOVED***
        
        checks.forEach(function (f***REMOVED*** {
            try {
                if (f(argv***REMOVED*** === false***REMOVED*** {
                    fail('Argument check failed: ' + f.toString(***REMOVED******REMOVED***;
              ***REMOVED***
          ***REMOVED***
            catch (err***REMOVED*** {
                fail(err***REMOVED***
          ***REMOVED***
      ***REMOVED******REMOVED***;
        
        return argv;
  ***REMOVED***
    
    function longest (xs***REMOVED*** {
        return Math.max.apply(
            null,
            xs.map(function (x***REMOVED*** { return x.length }***REMOVED***
        ***REMOVED***;
  ***REMOVED***
    
    return self;
};

// rebase an absolute path to a relative one with respect to a base directory
// exported for tests
exports.rebase = rebase;
function rebase (base, dir***REMOVED*** {
    var ds = path.normalize(dir***REMOVED***.split('/'***REMOVED***.slice(1***REMOVED***;
    var bs = path.normalize(base***REMOVED***.split('/'***REMOVED***.slice(1***REMOVED***;
    
    for (var i = 0; ds[i] && ds[i] == bs[i]; i++***REMOVED***;
    ds.splice(0, i***REMOVED***; bs.splice(0, i***REMOVED***;
    
    var p = path.normalize(
        bs.map(function (***REMOVED*** { return '..' }***REMOVED***.concat(ds***REMOVED***.join('/'***REMOVED***
    ***REMOVED***.replace(/\/$/,''***REMOVED***.replace(/^$/, '.'***REMOVED***;
    return p.match(/^[.\/]/***REMOVED*** ? p : './' + p;
};

function setKey (obj, keys, value***REMOVED*** {
    var o = obj;
    keys.slice(0,-1***REMOVED***.forEach(function (key***REMOVED*** {
        if (o[key] === undefined***REMOVED*** o[key] = {};
        o = o[key];
  ***REMOVED******REMOVED***;
    
    var key = keys[keys.length - 1];
    if (o[key] === undefined || typeof o[key] === 'boolean'***REMOVED*** {
        o[key] = value;
  ***REMOVED***
    else if (Array.isArray(o[key]***REMOVED******REMOVED*** {
        o[key].push(value***REMOVED***;
  ***REMOVED***
    else {
        o[key] = [ o[key], value ];
  ***REMOVED***
}
