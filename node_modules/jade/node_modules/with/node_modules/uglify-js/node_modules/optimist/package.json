{
  "name": "optimist",
  "version": "0.3.7",
  "description": "Light-weight option parsing with an argv hash. No optstrings attached.",
  "main": "./index.js",
  "dependencies": {
    "wordwrap": "~0.0.2"
***REMOVED***,
  "devDependencies": {
    "hashish": "~0.0.4",
    "tap": "~0.4.0"
***REMOVED***,
  "scripts": {
    "test": "tap ./test/*.js"
***REMOVED***,
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-optimist.git"
***REMOVED***,
  "keywords": [
    "argument",
    "args",
    "option",
    "parser",
    "parsing",
    "cli",
    "command"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
***REMOVED***,
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4"
***REMOVED***,
  "readme": "optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn't have to suck (as much***REMOVED***.\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png***REMOVED***](http://travis-ci.org/substack/node-optimist***REMOVED***\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***.argv;\n\nif (argv.rif - 5 * argv.xup > 7.138***REMOVED*** {\n    console.log('Buy more riffiwobbles'***REMOVED***;\n}\nelse {\n    console.log('Sell the xupptumblers'***REMOVED***;\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one's optimistic.](http://substack.net/images/optimistic.png***REMOVED***\n\nBut wait! There's more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***.argv;\nconsole.log('(%d,%d***REMOVED***', argv.x, argv.y***REMOVED***;\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21***REMOVED***\n\nAnd booleans, both long and short (and grouped***REMOVED***:\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require('util'***REMOVED***;\nvar argv = require('optimist'***REMOVED***.argv;\n\nif (argv.s***REMOVED*** {\n    util.print(argv.fr ? 'Le chat dit: ' : 'The cat says: '***REMOVED***;\n}\nconsole.log(\n    (argv.fr ? 'miaou' : 'meow'***REMOVED*** + (argv.p ? '.' : ''***REMOVED***\n***REMOVED***;\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***.argv;\nconsole.log('(%d,%d***REMOVED***', argv.x, argv.y***REMOVED***;\nconsole.log(argv._***REMOVED***;\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35***REMOVED***\n    [ 'moo' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12***REMOVED***\n    [ 'foo', 'bar', 'baz' ]\n\nPlus, Optimist comes with .usage(***REMOVED*** and .demand(***REMOVED***!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***\n    .usage('Usage: $0 -x [num] -y [num]'***REMOVED***\n    .demand(['x','y']***REMOVED***\n    .argv;\n\nconsole.log(argv.x / argv.y***REMOVED***;\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***\n    .default('x', 10***REMOVED***\n    .default('y', 10***REMOVED***\n    .argv\n;\nconsole.log(argv.x + argv.y***REMOVED***;\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***\n    .default({ x : 10, y : 10 }***REMOVED***\n    .argv\n;\nconsole.log(argv.x + argv.y***REMOVED***;\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***\n    .boolean('v'***REMOVED***\n    .argv\n;\nconsole.dir(argv***REMOVED***;\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ 'bar', 'baz', 'foo' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***\n    .boolean(['x','y','z']***REMOVED***\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]***REMOVED***;\nconsole.dir(argv._***REMOVED***;\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ 'one', 'two', 'three' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require('optimist'***REMOVED***\n    .usage('Count the lines in a file.\\nUsage: $0'***REMOVED***\n    .demand('f'***REMOVED***\n    .alias('f', 'file'***REMOVED***\n    .describe('f', 'Load a file'***REMOVED***\n    .argv\n;\n\nvar fs = require('fs'***REMOVED***;\nvar s = fs.createReadStream(argv.file***REMOVED***;\n\nvar lines = 0;\ns.on('data', function (buf***REMOVED*** {\n    lines += buf.toString(***REMOVED***.match(/\\n/g***REMOVED***.length;\n}***REMOVED***;\n\ns.on('end', function (***REMOVED*** {\n    console.log(lines***REMOVED***;\n}***REMOVED***;\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire('optimist'***REMOVED***.argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire('optimist'***REMOVED***([ '-x', '1', '-y', '2' ]***REMOVED***.argv\n````\n\nor use .parse(***REMOVED*** to do the same thing:\n\n````javascript\nrequire('optimist'***REMOVED***.parse([ '-x', '1', '-y', '2' ]***REMOVED***\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias***REMOVED***\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias(***REMOVED***` can take an object that maps keys to aliases.\n\n.default(key, value***REMOVED***\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default(***REMOVED***` can take an object that maps keys to default values.\n\n.demand(key***REMOVED***\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn't\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc***REMOVED***\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe(***REMOVED***` can take an object that maps keys to descriptions.\n\n.options(key, opt***REMOVED***\n------------------\n\nInstead of chaining together `.alias(***REMOVED***.demand(***REMOVED***.default(***REMOVED***`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require('optimist'***REMOVED***\n    .options('f', {\n        alias : 'file',\n        default : '/etc/passwd',\n  ***REMOVED******REMOVED***\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require('optimist'***REMOVED***\n    .alias('f', 'file'***REMOVED***\n    .default('f', '/etc/passwd'***REMOVED***\n    .argv\n;\n````\n\nOptionally `.options(***REMOVED***` can take an object that maps keys to `opt` parameters.\n\n.usage(message***REMOVED***\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn***REMOVED***\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key***REMOVED***\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won't get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key***REMOVED***\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns***REMOVED***\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help(***REMOVED***\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error***REMOVED***\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args***REMOVED***\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ '-c', '3', '-d', '4' ],\n      '$0': 'node ./examples/reflect.js',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      '$0': 'node ./examples/reflect.js',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg***REMOVED******REMOVED***`***REMOVED*** is converted to\none. This way you can just `net.createConnection(argv.port***REMOVED***` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      '$0': 'node ./examples/reflect.js',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s***REMOVED*** in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       '$0': 'node ./examples/reflect.js',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm***REMOVED***, just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso***REMOVED***,\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl's\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm***REMOVED***.\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-optimist/issues"
***REMOVED***,
  "homepage": "https://github.com/substack/node-optimist",
  "_id": "optimist@0.3.7",
  "_from": "optimist@~0.3.5"
}
