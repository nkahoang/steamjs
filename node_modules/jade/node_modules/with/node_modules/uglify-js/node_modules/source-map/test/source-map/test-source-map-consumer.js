/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function'***REMOVED*** {
    var define = require('amdefine'***REMOVED***(module, require***REMOVED***;
}
define(function (require, exports, module***REMOVED*** {

  var SourceMapConsumer = require('../../lib/source-map/source-map-consumer'***REMOVED***.SourceMapConsumer;
  var SourceMapGenerator = require('../../lib/source-map/source-map-generator'***REMOVED***.SourceMapGenerator;

  exports['test that we can instantiate with a string or an object'] = function (assert, util***REMOVED*** {
    assert.doesNotThrow(function (***REMOVED*** {
      var map = new SourceMapConsumer(util.testMap***REMOVED***;
  ***REMOVED******REMOVED***;
    assert.doesNotThrow(function (***REMOVED*** {
      var map = new SourceMapConsumer(JSON.stringify(util.testMap***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test that the `sources` field has the original sources'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMap***REMOVED***;
    var sources = map.sources;

    assert.equal(sources[0], '/the/root/one.js'***REMOVED***;
    assert.equal(sources[1], '/the/root/two.js'***REMOVED***;
    assert.equal(sources.length, 2***REMOVED***;
***REMOVED***;

  exports['test that the source root is reflected in a mapping\'s source field'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMap***REMOVED***;
    var mapping;

    mapping = map.originalPositionFor({
      line: 2,
      column: 1
  ***REMOVED******REMOVED***;
    assert.equal(mapping.source, '/the/root/two.js'***REMOVED***;

    mapping = map.originalPositionFor({
      line: 1,
      column: 1
  ***REMOVED******REMOVED***;
    assert.equal(mapping.source, '/the/root/one.js'***REMOVED***;
***REMOVED***;

  exports['test mapping tokens back exactly'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMap***REMOVED***;

    util.assertMapping(1, 1, '/the/root/one.js', 1, 1, null, map, assert***REMOVED***;
    util.assertMapping(1, 5, '/the/root/one.js', 1, 5, null, map, assert***REMOVED***;
    util.assertMapping(1, 9, '/the/root/one.js', 1, 11, null, map, assert***REMOVED***;
    util.assertMapping(1, 18, '/the/root/one.js', 1, 21, 'bar', map, assert***REMOVED***;
    util.assertMapping(1, 21, '/the/root/one.js', 2, 3, null, map, assert***REMOVED***;
    util.assertMapping(1, 28, '/the/root/one.js', 2, 10, 'baz', map, assert***REMOVED***;
    util.assertMapping(1, 32, '/the/root/one.js', 2, 14, 'bar', map, assert***REMOVED***;

    util.assertMapping(2, 1, '/the/root/two.js', 1, 1, null, map, assert***REMOVED***;
    util.assertMapping(2, 5, '/the/root/two.js', 1, 5, null, map, assert***REMOVED***;
    util.assertMapping(2, 9, '/the/root/two.js', 1, 11, null, map, assert***REMOVED***;
    util.assertMapping(2, 18, '/the/root/two.js', 1, 21, 'n', map, assert***REMOVED***;
    util.assertMapping(2, 21, '/the/root/two.js', 2, 3, null, map, assert***REMOVED***;
    util.assertMapping(2, 28, '/the/root/two.js', 2, 10, 'n', map, assert***REMOVED***;
***REMOVED***;

  exports['test mapping tokens fuzzy'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMap***REMOVED***;

    // Finding original positions
    util.assertMapping(1, 20, '/the/root/one.js', 1, 21, 'bar', map, assert, true***REMOVED***;
    util.assertMapping(1, 30, '/the/root/one.js', 2, 10, 'baz', map, assert, true***REMOVED***;
    util.assertMapping(2, 12, '/the/root/two.js', 1, 11, null, map, assert, true***REMOVED***;

    // Finding generated positions
    util.assertMapping(1, 18, '/the/root/one.js', 1, 22, 'bar', map, assert, null, true***REMOVED***;
    util.assertMapping(1, 28, '/the/root/one.js', 2, 13, 'baz', map, assert, null, true***REMOVED***;
    util.assertMapping(2, 9, '/the/root/two.js', 1, 16, null, map, assert, null, true***REMOVED***;
***REMOVED***;

  exports['test mappings and end of lines'] = function (assert, util***REMOVED*** {
    var smg = new SourceMapGenerator({
      file: 'foo.js'
  ***REMOVED******REMOVED***;
    smg.addMapping({
      original: { line: 1, column: 1 },
      generated: { line: 1, column: 1 },
      source: 'bar.js'
  ***REMOVED******REMOVED***;
    smg.addMapping({
      original: { line: 2, column: 2 },
      generated: { line: 2, column: 2 },
      source: 'bar.js'
  ***REMOVED******REMOVED***;

    var map = SourceMapConsumer.fromSourceMap(smg***REMOVED***;

    // When finding original positions, mappings end at the end of the line.
    util.assertMapping(2, 1, null, null, null, null, map, assert, true***REMOVED***

    // When finding generated positions, mappings do not end at the end of the line.
    util.assertMapping(1, 1, 'bar.js', 2, 1, null, map, assert, null, true***REMOVED***;
***REMOVED***;

  exports['test creating source map consumers with ***REMOVED***]}\' prefix'] = function (assert, util***REMOVED*** {
    assert.doesNotThrow(function (***REMOVED*** {
      var map = new SourceMapConsumer("***REMOVED***]}'" + JSON.stringify(util.testMap***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test eachMapping'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMap***REMOVED***;
    var previousLine = -Infinity;
    var previousColumn = -Infinity;
    map.eachMapping(function (mapping***REMOVED*** {
      assert.ok(mapping.generatedLine >= previousLine***REMOVED***;

      if (mapping.source***REMOVED*** {
        assert.equal(mapping.source.indexOf(util.testMap.sourceRoot***REMOVED***, 0***REMOVED***;
    ***REMOVED***

      if (mapping.generatedLine === previousLine***REMOVED*** {
        assert.ok(mapping.generatedColumn >= previousColumn***REMOVED***;
        previousColumn = mapping.generatedColumn;
    ***REMOVED***
      else {
        previousLine = mapping.generatedLine;
        previousColumn = -Infinity;
    ***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test iterating over mappings in a different order'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMap***REMOVED***;
    var previousLine = -Infinity;
    var previousColumn = -Infinity;
    var previousSource = "";
    map.eachMapping(function (mapping***REMOVED*** {
      assert.ok(mapping.source >= previousSource***REMOVED***;

      if (mapping.source === previousSource***REMOVED*** {
        assert.ok(mapping.originalLine >= previousLine***REMOVED***;

        if (mapping.originalLine === previousLine***REMOVED*** {
          assert.ok(mapping.originalColumn >= previousColumn***REMOVED***;
          previousColumn = mapping.originalColumn;
      ***REMOVED***
        else {
          previousLine = mapping.originalLine;
          previousColumn = -Infinity;
      ***REMOVED***
    ***REMOVED***
      else {
        previousSource = mapping.source;
        previousLine = -Infinity;
        previousColumn = -Infinity;
    ***REMOVED***
  ***REMOVED***, null, SourceMapConsumer.ORIGINAL_ORDER***REMOVED***;
***REMOVED***;

  exports['test that we can set the context for `this` in eachMapping'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMap***REMOVED***;
    var context = {};
    map.eachMapping(function (***REMOVED*** {
      assert.equal(this, context***REMOVED***;
  ***REMOVED***, context***REMOVED***;
***REMOVED***;

  exports['test that the `sourcesContent` field has the original sources'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMapWithSourcesContent***REMOVED***;
    var sourcesContent = map.sourcesContent;

    assert.equal(sourcesContent[0], ' ONE.foo = function (bar***REMOVED*** {\n   return baz(bar***REMOVED***;\n };'***REMOVED***;
    assert.equal(sourcesContent[1], ' TWO.inc = function (n***REMOVED*** {\n   return n + 1;\n };'***REMOVED***;
    assert.equal(sourcesContent.length, 2***REMOVED***;
***REMOVED***;

  exports['test that we can get the original sources for the sources'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer(util.testMapWithSourcesContent***REMOVED***;
    var sources = map.sources;

    assert.equal(map.sourceContentFor(sources[0]***REMOVED***, ' ONE.foo = function (bar***REMOVED*** {\n   return baz(bar***REMOVED***;\n };'***REMOVED***;
    assert.equal(map.sourceContentFor(sources[1]***REMOVED***, ' TWO.inc = function (n***REMOVED*** {\n   return n + 1;\n };'***REMOVED***;
    assert.equal(map.sourceContentFor("one.js"***REMOVED***, ' ONE.foo = function (bar***REMOVED*** {\n   return baz(bar***REMOVED***;\n };'***REMOVED***;
    assert.equal(map.sourceContentFor("two.js"***REMOVED***, ' TWO.inc = function (n***REMOVED*** {\n   return n + 1;\n };'***REMOVED***;
    assert.throws(function (***REMOVED*** {
      map.sourceContentFor(""***REMOVED***;
  ***REMOVED***, Error***REMOVED***;
    assert.throws(function (***REMOVED*** {
      map.sourceContentFor("/the/root/three.js"***REMOVED***;
  ***REMOVED***, Error***REMOVED***;
    assert.throws(function (***REMOVED*** {
      map.sourceContentFor("three.js"***REMOVED***;
  ***REMOVED***, Error***REMOVED***;
***REMOVED***;

  exports['test sourceRoot + generatedPositionFor'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      sourceRoot: 'foo/bar',
      file: 'baz.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      original: { line: 1, column: 1 },
      generated: { line: 2, column: 2 },
      source: 'bang.coffee'
  ***REMOVED******REMOVED***;
    map.addMapping({
      original: { line: 5, column: 5 },
      generated: { line: 6, column: 6 },
      source: 'bang.coffee'
  ***REMOVED******REMOVED***;
    map = new SourceMapConsumer(map.toString(***REMOVED******REMOVED***;

    // Should handle without sourceRoot.
    var pos = map.generatedPositionFor({
      line: 1,
      column: 1,
      source: 'bang.coffee'
  ***REMOVED******REMOVED***;

    assert.equal(pos.line, 2***REMOVED***;
    assert.equal(pos.column, 2***REMOVED***;

    // Should handle with sourceRoot.
    var pos = map.generatedPositionFor({
      line: 1,
      column: 1,
      source: 'foo/bar/bang.coffee'
  ***REMOVED******REMOVED***;

    assert.equal(pos.line, 2***REMOVED***;
    assert.equal(pos.column, 2***REMOVED***;
***REMOVED***;

  exports['test sourceRoot + originalPositionFor'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      sourceRoot: 'foo/bar',
      file: 'baz.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      original: { line: 1, column: 1 },
      generated: { line: 2, column: 2 },
      source: 'bang.coffee'
  ***REMOVED******REMOVED***;
    map = new SourceMapConsumer(map.toString(***REMOVED******REMOVED***;

    var pos = map.originalPositionFor({
      line: 2,
      column: 2,
  ***REMOVED******REMOVED***;

    // Should always have the prepended source root
    assert.equal(pos.source, 'foo/bar/bang.coffee'***REMOVED***;
    assert.equal(pos.line, 1***REMOVED***;
    assert.equal(pos.column, 1***REMOVED***;
***REMOVED***;

  exports['test github issue #56'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      sourceRoot: 'http://',
      file: 'www.example.com/foo.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      original: { line: 1, column: 1 },
      generated: { line: 2, column: 2 },
      source: 'www.example.com/original.js'
  ***REMOVED******REMOVED***;
    map = new SourceMapConsumer(map.toString(***REMOVED******REMOVED***;

    var sources = map.sources;
    assert.equal(sources.length, 1***REMOVED***;
    assert.equal(sources[0], 'http://www.example.com/original.js'***REMOVED***;
***REMOVED***;

  exports['test github issue #43'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      sourceRoot: 'http://example.com',
      file: 'foo.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      original: { line: 1, column: 1 },
      generated: { line: 2, column: 2 },
      source: 'http://cdn.example.com/original.js'
  ***REMOVED******REMOVED***;
    map = new SourceMapConsumer(map.toString(***REMOVED******REMOVED***;

    var sources = map.sources;
    assert.equal(sources.length, 1,
                 'Should only be one source.'***REMOVED***;
    assert.equal(sources[0], 'http://cdn.example.com/original.js',
                 'Should not be joined with the sourceRoot.'***REMOVED***;
***REMOVED***;

  exports['test absolute path, but same host sources'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      sourceRoot: 'http://example.com/foo/bar',
      file: 'foo.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      original: { line: 1, column: 1 },
      generated: { line: 2, column: 2 },
      source: '/original.js'
  ***REMOVED******REMOVED***;
    map = new SourceMapConsumer(map.toString(***REMOVED******REMOVED***;

    var sources = map.sources;
    assert.equal(sources.length, 1,
                 'Should only be one source.'***REMOVED***;
    assert.equal(sources[0], 'http://example.com/original.js',
                 'Source should be relative the host of the source root.'***REMOVED***;
***REMOVED***;

  exports['test github issue #64'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer({
      "version": 3,
      "file": "foo.js",
      "sourceRoot": "http://example.com/",
      "sources": ["/a"],
      "names": [],
      "mappings": "AACA",
      "sourcesContent": ["foo"]
  ***REMOVED******REMOVED***;

    assert.equal(map.sourceContentFor("a"***REMOVED***, "foo"***REMOVED***;
    assert.equal(map.sourceContentFor("/a"***REMOVED***, "foo"***REMOVED***;
***REMOVED***;

  exports['test bug 885597'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer({
      "version": 3,
      "file": "foo.js",
      "sourceRoot": "file:///Users/AlGore/Invented/The/Internet/",
      "sources": ["/a"],
      "names": [],
      "mappings": "AACA",
      "sourcesContent": ["foo"]
  ***REMOVED******REMOVED***;

    var s = map.sources[0];
    assert.equal(map.sourceContentFor(s***REMOVED***, "foo"***REMOVED***;
***REMOVED***;

  exports['test github issue #72, duplicate sources'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer({
      "version": 3,
      "file": "foo.js",
      "sources": ["source1.js", "source1.js", "source3.js"],
      "names": [],
      "mappings": ";EAAC;;IAEE;;MEEE",
      "sourceRoot": "http://example.com"
  ***REMOVED******REMOVED***;

    var pos = map.originalPositionFor({
      line: 2,
      column: 2
  ***REMOVED******REMOVED***;
    assert.equal(pos.source, 'http://example.com/source1.js'***REMOVED***;
    assert.equal(pos.line, 1***REMOVED***;
    assert.equal(pos.column, 1***REMOVED***;

    var pos = map.originalPositionFor({
      line: 4,
      column: 4
  ***REMOVED******REMOVED***;
    assert.equal(pos.source, 'http://example.com/source1.js'***REMOVED***;
    assert.equal(pos.line, 3***REMOVED***;
    assert.equal(pos.column, 3***REMOVED***;

    var pos = map.originalPositionFor({
      line: 6,
      column: 6
  ***REMOVED******REMOVED***;
    assert.equal(pos.source, 'http://example.com/source3.js'***REMOVED***;
    assert.equal(pos.line, 5***REMOVED***;
    assert.equal(pos.column, 5***REMOVED***;
***REMOVED***;

  exports['test github issue #72, duplicate names'] = function (assert, util***REMOVED*** {
    var map = new SourceMapConsumer({
      "version": 3,
      "file": "foo.js",
      "sources": ["source.js"],
      "names": ["name1", "name1", "name3"],
      "mappings": ";EAACA;;IAEEA;;MAEEE",
      "sourceRoot": "http://example.com"
  ***REMOVED******REMOVED***;

    var pos = map.originalPositionFor({
      line: 2,
      column: 2
  ***REMOVED******REMOVED***;
    assert.equal(pos.name, 'name1'***REMOVED***;
    assert.equal(pos.line, 1***REMOVED***;
    assert.equal(pos.column, 1***REMOVED***;

    var pos = map.originalPositionFor({
      line: 4,
      column: 4
  ***REMOVED******REMOVED***;
    assert.equal(pos.name, 'name1'***REMOVED***;
    assert.equal(pos.line, 3***REMOVED***;
    assert.equal(pos.column, 3***REMOVED***;

    var pos = map.originalPositionFor({
      line: 6,
      column: 6
  ***REMOVED******REMOVED***;
    assert.equal(pos.name, 'name3'***REMOVED***;
    assert.equal(pos.line, 5***REMOVED***;
    assert.equal(pos.column, 5***REMOVED***;
***REMOVED***;

  exports['test SourceMapConsumer.fromSourceMap'] = function (assert, util***REMOVED*** {
    var smg = new SourceMapGenerator({
      sourceRoot: 'http://example.com/',
      file: 'foo.js'
  ***REMOVED******REMOVED***;
    smg.addMapping({
      original: { line: 1, column: 1 },
      generated: { line: 2, column: 2 },
      source: 'bar.js'
  ***REMOVED******REMOVED***;
    smg.addMapping({
      original: { line: 2, column: 2 },
      generated: { line: 4, column: 4 },
      source: 'baz.js',
      name: 'dirtMcGirt'
  ***REMOVED******REMOVED***;
    smg.setSourceContent('baz.js', 'baz.js content'***REMOVED***;

    var smc = SourceMapConsumer.fromSourceMap(smg***REMOVED***;
    assert.equal(smc.file, 'foo.js'***REMOVED***;
    assert.equal(smc.sourceRoot, 'http://example.com/'***REMOVED***;
    assert.equal(smc.sources.length, 2***REMOVED***;
    assert.equal(smc.sources[0], 'http://example.com/bar.js'***REMOVED***;
    assert.equal(smc.sources[1], 'http://example.com/baz.js'***REMOVED***;
    assert.equal(smc.sourceContentFor('baz.js'***REMOVED***, 'baz.js content'***REMOVED***;

    var pos = smc.originalPositionFor({
      line: 2,
      column: 2
  ***REMOVED******REMOVED***;
    assert.equal(pos.line, 1***REMOVED***;
    assert.equal(pos.column, 1***REMOVED***;
    assert.equal(pos.source, 'http://example.com/bar.js'***REMOVED***;
    assert.equal(pos.name, null***REMOVED***;

    pos = smc.generatedPositionFor({
      line: 1,
      column: 1,
      source: 'http://example.com/bar.js'
  ***REMOVED******REMOVED***;
    assert.equal(pos.line, 2***REMOVED***;
    assert.equal(pos.column, 2***REMOVED***;

    pos = smc.originalPositionFor({
      line: 4,
      column: 4
  ***REMOVED******REMOVED***;
    assert.equal(pos.line, 2***REMOVED***;
    assert.equal(pos.column, 2***REMOVED***;
    assert.equal(pos.source, 'http://example.com/baz.js'***REMOVED***;
    assert.equal(pos.name, 'dirtMcGirt'***REMOVED***;

    pos = smc.generatedPositionFor({
      line: 2,
      column: 2,
      source: 'http://example.com/baz.js'
  ***REMOVED******REMOVED***;
    assert.equal(pos.line, 4***REMOVED***;
    assert.equal(pos.column, 4***REMOVED***;
***REMOVED***;
}***REMOVED***;
