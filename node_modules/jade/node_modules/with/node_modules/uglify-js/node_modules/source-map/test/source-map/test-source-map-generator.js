/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function'***REMOVED*** {
    var define = require('amdefine'***REMOVED***(module, require***REMOVED***;
}
define(function (require, exports, module***REMOVED*** {

  var SourceMapGenerator = require('../../lib/source-map/source-map-generator'***REMOVED***.SourceMapGenerator;
  var SourceMapConsumer = require('../../lib/source-map/source-map-consumer'***REMOVED***.SourceMapConsumer;
  var SourceNode = require('../../lib/source-map/source-node'***REMOVED***.SourceNode;
  var util = require('./util'***REMOVED***;

  exports['test some simple stuff'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'foo.js',
      sourceRoot: '.'
  ***REMOVED******REMOVED***;
    assert.ok(true***REMOVED***;

    var map = new SourceMapGenerator(***REMOVED***;
    assert.ok(true***REMOVED***;
***REMOVED***;

  exports['test JSON serialization'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'foo.js',
      sourceRoot: '.'
  ***REMOVED******REMOVED***;
    assert.equal(map.toString(***REMOVED***, JSON.stringify(map***REMOVED******REMOVED***;
***REMOVED***;

  exports['test adding mappings (case 1***REMOVED***'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'generated-foo.js',
      sourceRoot: '.'
  ***REMOVED******REMOVED***;

    assert.doesNotThrow(function (***REMOVED*** {
      map.addMapping({
        generated: { line: 1, column: 1 }
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test adding mappings (case 2***REMOVED***'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'generated-foo.js',
      sourceRoot: '.'
  ***REMOVED******REMOVED***;

    assert.doesNotThrow(function (***REMOVED*** {
      map.addMapping({
        generated: { line: 1, column: 1 },
        source: 'bar.js',
        original: { line: 1, column: 1 }
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test adding mappings (case 3***REMOVED***'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'generated-foo.js',
      sourceRoot: '.'
  ***REMOVED******REMOVED***;

    assert.doesNotThrow(function (***REMOVED*** {
      map.addMapping({
        generated: { line: 1, column: 1 },
        source: 'bar.js',
        original: { line: 1, column: 1 },
        name: 'someToken'
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test adding mappings (invalid***REMOVED***'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'generated-foo.js',
      sourceRoot: '.'
  ***REMOVED******REMOVED***;

    // Not enough info.
    assert.throws(function (***REMOVED*** {
      map.addMapping({}***REMOVED***;
  ***REMOVED******REMOVED***;

    // Original file position, but no source.
    assert.throws(function (***REMOVED*** {
      map.addMapping({
        generated: { line: 1, column: 1 },
        original: { line: 1, column: 1 }
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test that the correct mappings are being generated'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'min.js',
      sourceRoot: '/the/root'
  ***REMOVED******REMOVED***;

    map.addMapping({
      generated: { line: 1, column: 1 },
      original: { line: 1, column: 1 },
      source: 'one.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 5 },
      original: { line: 1, column: 5 },
      source: 'one.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 9 },
      original: { line: 1, column: 11 },
      source: 'one.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 18 },
      original: { line: 1, column: 21 },
      source: 'one.js',
      name: 'bar'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 21 },
      original: { line: 2, column: 3 },
      source: 'one.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 28 },
      original: { line: 2, column: 10 },
      source: 'one.js',
      name: 'baz'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 32 },
      original: { line: 2, column: 14 },
      source: 'one.js',
      name: 'bar'
  ***REMOVED******REMOVED***;

    map.addMapping({
      generated: { line: 2, column: 1 },
      original: { line: 1, column: 1 },
      source: 'two.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 5 },
      original: { line: 1, column: 5 },
      source: 'two.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 9 },
      original: { line: 1, column: 11 },
      source: 'two.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 18 },
      original: { line: 1, column: 21 },
      source: 'two.js',
      name: 'n'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 21 },
      original: { line: 2, column: 3 },
      source: 'two.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 28 },
      original: { line: 2, column: 10 },
      source: 'two.js',
      name: 'n'
  ***REMOVED******REMOVED***;

    map = JSON.parse(map.toString(***REMOVED******REMOVED***;

    util.assertEqualMaps(assert, map, util.testMap***REMOVED***;
***REMOVED***;

  exports['test that source content can be set'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'min.js',
      sourceRoot: '/the/root'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 1 },
      original: { line: 1, column: 1 },
      source: 'one.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 1 },
      original: { line: 1, column: 1 },
      source: 'two.js'
  ***REMOVED******REMOVED***;
    map.setSourceContent('one.js', 'one file content'***REMOVED***;

    map = JSON.parse(map.toString(***REMOVED******REMOVED***;
    assert.equal(map.sources[0], 'one.js'***REMOVED***;
    assert.equal(map.sources[1], 'two.js'***REMOVED***;
    assert.equal(map.sourcesContent[0], 'one file content'***REMOVED***;
    assert.equal(map.sourcesContent[1], null***REMOVED***;
***REMOVED***;

  exports['test .fromSourceMap'] = function (assert, util***REMOVED*** {
    var map = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(util.testMap***REMOVED******REMOVED***;
    util.assertEqualMaps(assert, map.toJSON(***REMOVED***, util.testMap***REMOVED***;
***REMOVED***;

  exports['test .fromSourceMap with sourcesContent'] = function (assert, util***REMOVED*** {
    var map = SourceMapGenerator.fromSourceMap(
      new SourceMapConsumer(util.testMapWithSourcesContent***REMOVED******REMOVED***;
    util.assertEqualMaps(assert, map.toJSON(***REMOVED***, util.testMapWithSourcesContent***REMOVED***;
***REMOVED***;

  exports['test applySourceMap'] = function (assert, util***REMOVED*** {
    var node = new SourceNode(null, null, null, [
      new SourceNode(2, 0, 'fileX', 'lineX2\n'***REMOVED***,
      'genA1\n',
      new SourceNode(2, 0, 'fileY', 'lineY2\n'***REMOVED***,
      'genA2\n',
      new SourceNode(1, 0, 'fileX', 'lineX1\n'***REMOVED***,
      'genA3\n',
      new SourceNode(1, 0, 'fileY', 'lineY1\n'***REMOVED***
    ]***REMOVED***;
    var mapStep1 = node.toStringWithSourceMap({
      file: 'fileA'
  ***REMOVED******REMOVED***.map;
    mapStep1.setSourceContent('fileX', 'lineX1\nlineX2\n'***REMOVED***;
    mapStep1 = mapStep1.toJSON(***REMOVED***;

    node = new SourceNode(null, null, null, [
      'gen1\n',
      new SourceNode(1, 0, 'fileA', 'lineA1\n'***REMOVED***,
      new SourceNode(2, 0, 'fileA', 'lineA2\n'***REMOVED***,
      new SourceNode(3, 0, 'fileA', 'lineA3\n'***REMOVED***,
      new SourceNode(4, 0, 'fileA', 'lineA4\n'***REMOVED***,
      new SourceNode(1, 0, 'fileB', 'lineB1\n'***REMOVED***,
      new SourceNode(2, 0, 'fileB', 'lineB2\n'***REMOVED***,
      'gen2\n'
    ]***REMOVED***;
    var mapStep2 = node.toStringWithSourceMap({
      file: 'fileGen'
  ***REMOVED******REMOVED***.map;
    mapStep2.setSourceContent('fileB', 'lineB1\nlineB2\n'***REMOVED***;
    mapStep2 = mapStep2.toJSON(***REMOVED***;

    node = new SourceNode(null, null, null, [
      'gen1\n',
      new SourceNode(2, 0, 'fileX', 'lineA1\n'***REMOVED***,
      new SourceNode(2, 0, 'fileA', 'lineA2\n'***REMOVED***,
      new SourceNode(2, 0, 'fileY', 'lineA3\n'***REMOVED***,
      new SourceNode(4, 0, 'fileA', 'lineA4\n'***REMOVED***,
      new SourceNode(1, 0, 'fileB', 'lineB1\n'***REMOVED***,
      new SourceNode(2, 0, 'fileB', 'lineB2\n'***REMOVED***,
      'gen2\n'
    ]***REMOVED***;
    var expectedMap = node.toStringWithSourceMap({
      file: 'fileGen'
  ***REMOVED******REMOVED***.map;
    expectedMap.setSourceContent('fileX', 'lineX1\nlineX2\n'***REMOVED***;
    expectedMap.setSourceContent('fileB', 'lineB1\nlineB2\n'***REMOVED***;
    expectedMap = expectedMap.toJSON(***REMOVED***;

    // apply source map "mapStep1" to "mapStep2"
    var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(mapStep2***REMOVED******REMOVED***;
    generator.applySourceMap(new SourceMapConsumer(mapStep1***REMOVED******REMOVED***;
    var actualMap = generator.toJSON(***REMOVED***;

    util.assertEqualMaps(assert, actualMap, expectedMap***REMOVED***;
***REMOVED***;

  exports['test applySourceMap throws when file is missing'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'test.js'
  ***REMOVED******REMOVED***;
    var map2 = new SourceMapGenerator(***REMOVED***;
    assert.throws(function(***REMOVED*** {
      map.applySourceMap(new SourceMapConsumer(map2.toJSON(***REMOVED******REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test the two additional parameters of applySourceMap'] = function (assert, util***REMOVED*** {
    // Assume the following directory structure:
    //
    // http://foo.org/
    //   bar.coffee
    //   app/
    //     coffee/
    //       foo.coffee
    //     temp/
    //       bundle.js
    //     temp_maps/
    //       bundle.js.map
    //     public/
    //       bundle.min.js
    //       bundle.min.js.map
    //
    // http://www.example.com/
    //   baz.coffee

    var bundleMap = new SourceMapGenerator({
      file: 'bundle.js'
  ***REMOVED******REMOVED***;
    bundleMap.addMapping({
      generated: { line: 3, column: 3 },
      original: { line: 2, column: 2 },
      source: '../coffee/foo.coffee'
  ***REMOVED******REMOVED***;
    bundleMap.addMapping({
      generated: { line: 13, column: 13 },
      original: { line: 12, column: 12 },
      source: '/bar.coffee'
  ***REMOVED******REMOVED***;
    bundleMap.addMapping({
      generated: { line: 23, column: 23 },
      original: { line: 22, column: 22 },
      source: 'http://www.example.com/baz.coffee'
  ***REMOVED******REMOVED***;
    bundleMap = new SourceMapConsumer(bundleMap.toJSON(***REMOVED******REMOVED***;

    var minifiedMap = new SourceMapGenerator({
      file: 'bundle.min.js',
      sourceRoot: '..'
  ***REMOVED******REMOVED***;
    minifiedMap.addMapping({
      generated: { line: 1, column: 1 },
      original: { line: 3, column: 3 },
      source: 'temp/bundle.js'
  ***REMOVED******REMOVED***;
    minifiedMap.addMapping({
      generated: { line: 11, column: 11 },
      original: { line: 13, column: 13 },
      source: 'temp/bundle.js'
  ***REMOVED******REMOVED***;
    minifiedMap.addMapping({
      generated: { line: 21, column: 21 },
      original: { line: 23, column: 23 },
      source: 'temp/bundle.js'
  ***REMOVED******REMOVED***;
    minifiedMap = new SourceMapConsumer(minifiedMap.toJSON(***REMOVED******REMOVED***;

    var expectedMap = function (sources***REMOVED*** {
      var map = new SourceMapGenerator({
        file: 'bundle.min.js',
        sourceRoot: '..'
    ***REMOVED******REMOVED***;
      map.addMapping({
        generated: { line: 1, column: 1 },
        original: { line: 2, column: 2 },
        source: sources[0]
    ***REMOVED******REMOVED***;
      map.addMapping({
        generated: { line: 11, column: 11 },
        original: { line: 12, column: 12 },
        source: sources[1]
    ***REMOVED******REMOVED***;
      map.addMapping({
        generated: { line: 21, column: 21 },
        original: { line: 22, column: 22 },
        source: sources[2]
    ***REMOVED******REMOVED***;
      return map.toJSON(***REMOVED***;
  ***REMOVED***

    var actualMap = function (aSourceMapPath***REMOVED*** {
      var map = SourceMapGenerator.fromSourceMap(minifiedMap***REMOVED***;
      // Note that relying on `bundleMap.file` (which is simply 'bundle.js'***REMOVED***
      // instead of supplying the second parameter wouldn't work here.
      map.applySourceMap(bundleMap, '../temp/bundle.js', aSourceMapPath***REMOVED***;
      return map.toJSON(***REMOVED***;
  ***REMOVED***

    util.assertEqualMaps(assert, actualMap('../temp_maps'***REMOVED***, expectedMap([
      'coffee/foo.coffee',
      '/bar.coffee',
      'http://www.example.com/baz.coffee'
    ]***REMOVED******REMOVED***;

    util.assertEqualMaps(assert, actualMap('/app/temp_maps'***REMOVED***, expectedMap([
      '/app/coffee/foo.coffee',
      '/bar.coffee',
      'http://www.example.com/baz.coffee'
    ]***REMOVED******REMOVED***;

    util.assertEqualMaps(assert, actualMap('http://foo.org/app/temp_maps'***REMOVED***, expectedMap([
      'http://foo.org/app/coffee/foo.coffee',
      'http://foo.org/bar.coffee',
      'http://www.example.com/baz.coffee'
    ]***REMOVED******REMOVED***;
***REMOVED***;

  exports['test sorting with duplicate generated mappings'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'test.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 3, column: 0 },
      original: { line: 2, column: 0 },
      source: 'a.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 0 }
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 2, column: 0 }
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 0 },
      original: { line: 1, column: 0 },
      source: 'a.js'
  ***REMOVED******REMOVED***;

    util.assertEqualMaps(assert, map.toJSON(***REMOVED***, {
      version: 3,
      file: 'test.js',
      sources: ['a.js'],
      names: [],
      mappings: 'AAAA;A;AACA'
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test ignore duplicate mappings.'] = function (assert, util***REMOVED*** {
    var init = { file: 'min.js', sourceRoot: '/the/root' };
    var map1, map2;

    // null original source location
    var nullMapping1 = {
      generated: { line: 1, column: 0 }
  ***REMOVED***;
    var nullMapping2 = {
      generated: { line: 2, column: 2 }
  ***REMOVED***;

    map1 = new SourceMapGenerator(init***REMOVED***;
    map2 = new SourceMapGenerator(init***REMOVED***;

    map1.addMapping(nullMapping1***REMOVED***;
    map1.addMapping(nullMapping1***REMOVED***;

    map2.addMapping(nullMapping1***REMOVED***;

    util.assertEqualMaps(assert, map1.toJSON(***REMOVED***, map2.toJSON(***REMOVED******REMOVED***;

    map1.addMapping(nullMapping2***REMOVED***;
    map1.addMapping(nullMapping1***REMOVED***;

    map2.addMapping(nullMapping2***REMOVED***;

    util.assertEqualMaps(assert, map1.toJSON(***REMOVED***, map2.toJSON(***REMOVED******REMOVED***;

    // original source location
    var srcMapping1 = {
      generated: { line: 1, column: 0 },
      original: { line: 11, column: 0 },
      source: 'srcMapping1.js'
  ***REMOVED***;
    var srcMapping2 = {
      generated: { line: 2, column: 2 },
      original: { line: 11, column: 0 },
      source: 'srcMapping2.js'
  ***REMOVED***;

    map1 = new SourceMapGenerator(init***REMOVED***;
    map2 = new SourceMapGenerator(init***REMOVED***;

    map1.addMapping(srcMapping1***REMOVED***;
    map1.addMapping(srcMapping1***REMOVED***;

    map2.addMapping(srcMapping1***REMOVED***;

    util.assertEqualMaps(assert, map1.toJSON(***REMOVED***, map2.toJSON(***REMOVED******REMOVED***;

    map1.addMapping(srcMapping2***REMOVED***;
    map1.addMapping(srcMapping1***REMOVED***;

    map2.addMapping(srcMapping2***REMOVED***;

    util.assertEqualMaps(assert, map1.toJSON(***REMOVED***, map2.toJSON(***REMOVED******REMOVED***;

    // full original source and name information
    var fullMapping1 = {
      generated: { line: 1, column: 0 },
      original: { line: 11, column: 0 },
      source: 'fullMapping1.js',
      name: 'fullMapping1'
  ***REMOVED***;
    var fullMapping2 = {
      generated: { line: 2, column: 2 },
      original: { line: 11, column: 0 },
      source: 'fullMapping2.js',
      name: 'fullMapping2'
  ***REMOVED***;

    map1 = new SourceMapGenerator(init***REMOVED***;
    map2 = new SourceMapGenerator(init***REMOVED***;

    map1.addMapping(fullMapping1***REMOVED***;
    map1.addMapping(fullMapping1***REMOVED***;

    map2.addMapping(fullMapping1***REMOVED***;

    util.assertEqualMaps(assert, map1.toJSON(***REMOVED***, map2.toJSON(***REMOVED******REMOVED***;

    map1.addMapping(fullMapping2***REMOVED***;
    map1.addMapping(fullMapping1***REMOVED***;

    map2.addMapping(fullMapping2***REMOVED***;

    util.assertEqualMaps(assert, map1.toJSON(***REMOVED***, map2.toJSON(***REMOVED******REMOVED***;
***REMOVED***;

  exports['test github issue #72, check for duplicate names or sources'] = function (assert, util***REMOVED*** {
    var map = new SourceMapGenerator({
      file: 'test.js'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 1, column: 1 },
      original: { line: 2, column: 2 },
      source: 'a.js',
      name: 'foo'
  ***REMOVED******REMOVED***;
    map.addMapping({
      generated: { line: 3, column: 3 },
      original: { line: 4, column: 4 },
      source: 'a.js',
      name: 'foo'
  ***REMOVED******REMOVED***;
    util.assertEqualMaps(assert, map.toJSON(***REMOVED***, {
      version: 3,
      file: 'test.js',
      sources: ['a.js'],
      names: ['foo'],
      mappings: 'CACEA;;GAEEA'
  ***REMOVED******REMOVED***;
***REMOVED***;

}***REMOVED***;
