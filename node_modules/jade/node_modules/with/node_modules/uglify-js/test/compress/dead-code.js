dead_code_1: {
    options = {
        dead_code: true
  ***REMOVED***;
    input: {
        function f(***REMOVED*** {
            a(***REMOVED***;
            b(***REMOVED***;
            x = 10;
            return;
            if (x***REMOVED*** {
                y(***REMOVED***;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    expect: {
        function f(***REMOVED*** {
            a(***REMOVED***;
            b(***REMOVED***;
            x = 10;
            return;
      ***REMOVED***
  ***REMOVED***
}

dead_code_2_should_warn: {
    options = {
        dead_code: true
  ***REMOVED***;
    input: {
        function f(***REMOVED*** {
            g(***REMOVED***;
            x = 10;
            throw "foo";
            // completely discarding the `if` would introduce some
            // bugs.  UglifyJS v1 doesn't deal with this issue; in v2
            // we copy any declarations to the upper scope.
            if (x***REMOVED*** {
                y(***REMOVED***;
                var x;
                function g(***REMOVED***{};
                // but nested declarations should not be kept.
                (function(***REMOVED***{
                    var q;
                    function y(***REMOVED***{};
              ***REMOVED******REMOVED***(***REMOVED***;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    expect: {
        function f(***REMOVED*** {
            g(***REMOVED***;
            x = 10;
            throw "foo";
            var x;
            function g(***REMOVED***{};
      ***REMOVED***
  ***REMOVED***
}

dead_code_constant_boolean_should_warn_more: {
    options = {
        dead_code    : true,
        loops        : true,
        booleans     : true,
        conditionals : true,
        evaluate     : true
  ***REMOVED***;
    input: {
        while (!((foo && bar***REMOVED*** || (x + "0"***REMOVED******REMOVED******REMOVED*** {
            console.log("unreachable"***REMOVED***;
            var foo;
            function bar(***REMOVED*** {}
      ***REMOVED***
        for (var x = 10; x && (y || x***REMOVED*** && (!typeof x***REMOVED***; ++x***REMOVED*** {
            asdf(***REMOVED***;
            foo(***REMOVED***;
            var moo;
      ***REMOVED***
  ***REMOVED***
    expect: {
        var foo;
        function bar(***REMOVED*** {}
        // nothing for the while
        // as for the for, it should keep:
        var x = 10;
        var moo;
  ***REMOVED***
}
