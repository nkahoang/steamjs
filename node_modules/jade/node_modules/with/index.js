'use strict';

var uglify = require('uglify-js'***REMOVED***

module.exports = addWith

/**
 * Mimic `with` as far as possible but at compile time
 *
 * @param {String} obj The object part of a with expression
 * @param {String} src The body of the with expression
 * @param {Array.<String>} exclude A list of variable names to explicitly exclude
 */
function addWith(obj, src, exclude***REMOVED*** {
  obj = obj + ''
  src = src + ''
  exclude = exclude || []
  exclude = exclude.concat(detect(obj***REMOVED******REMOVED***
  var vars = detect(src***REMOVED***
    .filter(function (v***REMOVED*** {
      return exclude.indexOf(v***REMOVED*** === -1
  ***REMOVED******REMOVED***

  if (vars.length === 0***REMOVED*** return src

  var declareLocal = ''
  var local = 'locals_for_with'
  var result = 'result_of_with'
  if (/^[a-zA-Z0-9$_]+$/.test(obj***REMOVED******REMOVED*** {
    local = obj
***REMOVED*** else {
    while (vars.indexOf(local***REMOVED*** != -1 || exclude.indexOf(local***REMOVED*** != -1***REMOVED*** {
      local += '_'
  ***REMOVED***
    declareLocal = 'var ' + local + ' = (' + obj + '***REMOVED***'
***REMOVED***
  while (vars.indexOf(result***REMOVED*** != -1 || exclude.indexOf(result***REMOVED*** != -1***REMOVED*** {
    result += '_'
***REMOVED***

  var inputVars = vars.map(function (v***REMOVED*** {
    return JSON.stringify(v***REMOVED*** + ' in ' + local + '?' +
      local + '.' + v + ':' +
      'typeof ' + v + '!=="undefined"?' + v + ':undefined'
***REMOVED******REMOVED***

  src = '(function (' + vars.join(', '***REMOVED*** + '***REMOVED*** {' +
    src +
    '}(' + inputVars.join(','***REMOVED*** + '***REMOVED******REMOVED***'

  return ';' + declareLocal + ';' + unwrapReturns(src, result***REMOVED*** + ';'
}

/**
 * Detect, and return a list of, any global variables in a function
 *
 * @param {String} src Some JavaScript code
 */
function detect(src***REMOVED*** {
    var ast = uglify.parse('(function (***REMOVED*** {' + src + '}(***REMOVED******REMOVED***'***REMOVED*** // allow return keyword
    ast.figure_out_scope(***REMOVED***
    var globals = ast.globals
        .map(function (node, name***REMOVED*** {
            return name
      ***REMOVED******REMOVED***
    return globals
}

/**
 * Take a self calling function, and unwrap it such that return inside the function
 * results in return outside the function
 *
 * @param {String} src    Some JavaScript code representing a self-calling function
 * @param {String} result A temporary variable to store the result in
 */
function unwrapReturns(src, result***REMOVED*** {
  var originalSource = src
  var hasReturn = false
  var ast = uglify.parse(src***REMOVED***
  src = src.split(''***REMOVED***

  if (ast.body.length !== 1 || ast.body[0].TYPE !== 'SimpleStatement' ||
      ast.body[0].body.TYPE !== 'Call' || ast.body[0].body.expression.TYPE !== 'Function'***REMOVED***
    throw new Error('AST does not seem to represent a self-calling function'***REMOVED***
  var fn = ast.body[0].body.expression

  var walker = new uglify.TreeWalker(visitor***REMOVED***
  function visitor(node, descend***REMOVED*** {
    if (node !== fn && (node.TYPE === 'Defun' || node.TYPE === 'Function'***REMOVED******REMOVED*** {
      return true //don't descend into functions
  ***REMOVED***
    if (node.TYPE === 'Return'***REMOVED*** {
      descend(***REMOVED***
      hasReturn = true
      replace(node, 'return {value: ' + source(node.value***REMOVED*** + '};'***REMOVED***
      return true //don't descend again
  ***REMOVED***
***REMOVED***
  function source(node***REMOVED*** {
    return src.slice(node.start.pos, node.end.endpos***REMOVED***.join(''***REMOVED***
***REMOVED***
  function replace(node, str***REMOVED*** {
    for (var i = node.start.pos; i < node.end.endpos; i++***REMOVED*** {
      src[i] = ''
  ***REMOVED***
    src[node.start.pos] = str
***REMOVED***
  ast.walk(walker***REMOVED***
  if (!hasReturn***REMOVED*** return originalSource
  else return 'var ' + result + '=' + src.join(''***REMOVED*** + ';if (' + result + '***REMOVED*** return ' + result + '.value'
}
