var Promise = require('promise'***REMOVED***;
var fs = require('fs'***REMOVED***;
var ***REMOVED***;
var normalize = path.normalize;


Promise.prototype.nodeify = function (cb***REMOVED*** {
  if (typeof cb === 'function'***REMOVED*** {
    this.then(function (res***REMOVED*** { process.nextTick(function (***REMOVED*** { cb(null, res***REMOVED***; }***REMOVED***; },
              function (err***REMOVED*** { process.nextTick(function (***REMOVED*** { cb(err***REMOVED***; }***REMOVED***; }***REMOVED***;
    return undefined;
***REMOVED*** else {
    return this;
***REMOVED***
}

var minifiers = {};

module.exports = Transformer;
function Transformer(obj***REMOVED*** {
  this.name = obj.name;
  this.engines = obj.engines;
  this.isBinary = obj.isBinary || false;
  this.isMinifier = obj.isMinifier || false;
  this.outputFormat = obj.outputFormat;
  this._cache = {};
  if (typeof obj.async === 'function'***REMOVED*** {
    this._renderAsync = obj.async;
    this.sudoSync = obj.sudoSync || false;
***REMOVED***
  if (typeof obj.sync === 'function'***REMOVED*** {
    this._renderSync = obj.sync;
    this.sync = true;
***REMOVED*** else {
    this.sync = obj.sudoSync || false;
***REMOVED***

  if (this.isMinifier***REMOVED***
    minifiers[this.outputFormat] = this;
  else {
    var minifier = minifiers[this.outputFormat];
    if (minifier***REMOVED*** {
      this.minify = function(str, options***REMOVED*** {
        if (options && options.minify***REMOVED***
          return minifier.renderSync(str, typeof options.minify === 'object' && options.minify || {}***REMOVED***;
        return str;
    ***REMOVED***
  ***REMOVED***
***REMOVED***
}

Transformer.prototype.cache = function (options, data***REMOVED*** {
  if (options.cache && options.filename***REMOVED*** {
    if (data***REMOVED*** return this.cache[options.filename] = data;
    else return this.cache[options.filename];
***REMOVED*** else {
    return data;
***REMOVED***
};
Transformer.prototype.loadModule = function (***REMOVED*** {
  if (this.engine***REMOVED*** return this.engine;
  for (var i = 0; i < this.engines.length; i++***REMOVED*** {
    try {
      var res = this.engines[i] === '.' ? null : (this.engine = require(this.engines[i]***REMOVED******REMOVED***;
      this.engineName = this.engines[i];
      return res;
  ***REMOVED*** catch (ex***REMOVED*** {
      if (this.engines.length === 1***REMOVED*** {
        throw ex;
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  throw new Error('In order to apply the transform ' + this.name + ' you must install one of ' + this.engines.map(function (e***REMOVED*** { return '"' + e + '"'; }***REMOVED***.join(***REMOVED******REMOVED***;
};
Transformer.prototype.minify = function(str, options***REMOVED*** {
  return str;
}
Transformer.prototype.renderSync = function (str, options***REMOVED*** {
  options = options || {};
  options = clone(options***REMOVED***;
  this.loadModule(***REMOVED***;
  if (this._renderSync***REMOVED*** {
    return this.minify(this._renderSync((this.isBinary ? str : fixString(str***REMOVED******REMOVED***, options***REMOVED***, options***REMOVED***;
***REMOVED*** else if (this.sudoSync***REMOVED*** {
    options.sudoSync = true;
    var res, err;
    this._renderAsync((this.isBinary ? str : fixString(str***REMOVED******REMOVED***, options, function (e, val***REMOVED*** {
      if (e***REMOVED*** err = e;
      else res = val;
  ***REMOVED******REMOVED***;
    if (err***REMOVED*** throw err;
    else if (res != undefined***REMOVED*** return this.minify(res, options***REMOVED***;
    else if (typeof this.sudoSync === 'string'***REMOVED*** throw new Error(this.sudoSync.replace(/FILENAME/g, options.filename || ''***REMOVED******REMOVED***;
    else throw new Error('There was a problem transforming ' + (options.filename || ''***REMOVED*** + ' syncronously using ' + this.name***REMOVED***;
***REMOVED*** else {
    throw new Error(this.name + ' does not support transforming syncronously.'***REMOVED***;
***REMOVED***
};
Transformer.prototype.render = function (str, options, cb***REMOVED*** {
  options = options || {};
  var self = this;
  return new Promise(function (resolve, reject***REMOVED*** {
    self.loadModule(***REMOVED***;
    if (self._renderAsync***REMOVED*** {
      self._renderAsync((self.isBinary ? str : fixString(str***REMOVED******REMOVED***, clone(options***REMOVED***, function (err, val***REMOVED*** {
        if (err***REMOVED*** reject(err***REMOVED***;
        else resolve(self.minify(val, options***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***
  ***REMOVED*** else {
      resolve(self.renderSync(str, options***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***
  .nodeify(cb***REMOVED***;
};
Transformer.prototype.renderFile = function (path, options, cb***REMOVED*** {
  options = options || {};
  var self = this;
  return new Promise(function (resolve, reject***REMOVED*** {
    options.filename = (path = normalize(path***REMOVED******REMOVED***;
    if (self._cache[path]***REMOVED***
      resolve(null***REMOVED***;
    else
      fs.readFile(path, function (err, data***REMOVED*** {
        if (err***REMOVED*** reject(err***REMOVED***;
        else resolve(data***REMOVED***;
    ***REMOVED******REMOVED***
***REMOVED******REMOVED***
  .then(function (str***REMOVED*** {
    return self.render(str, options***REMOVED***;
***REMOVED******REMOVED***
  .nodeify(cb***REMOVED***;
};
Transformer.prototype.renderFileSync = function (path, options***REMOVED*** {
  options = options || {};
  options.filename = (path = normalize(path***REMOVED******REMOVED***;
  return this.renderSync((this._cache[path] ? null : fs.readFileSync(path***REMOVED******REMOVED***, options***REMOVED***;
};
function fixString(str***REMOVED*** {
  if (str == null***REMOVED*** return str;
  //convert buffer to string
  str = str.toString(***REMOVED***;
  // Strip UTF-8 BOM if it exists
  str = (0xFEFF == str.charCodeAt(0***REMOVED*** 
    ? str.substring(1***REMOVED***
    : str***REMOVED***;
  //remove `\r` added by windows
  return str.replace(/\r/g, ''***REMOVED***;
}

function clone(obj***REMOVED*** {
  if (Array.isArray(obj***REMOVED******REMOVED*** {
    return obj.map(clone***REMOVED***;
***REMOVED*** else if (obj && typeof obj === 'object'***REMOVED*** {
    var res = {};
    for (var key in obj***REMOVED*** {
      res[key] = clone(obj[key]***REMOVED***;
  ***REMOVED***
    return res;
***REMOVED*** else {
    return obj;
***REMOVED***
}
