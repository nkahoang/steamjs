
module.exports = function(css***REMOVED***{

  /**
   * Parse stylesheet.
   */

  function stylesheet(***REMOVED*** {
    return { stylesheet: { rules: rules(***REMOVED*** }};
***REMOVED***

  /**
   * Opening brace.
   */

  function open(***REMOVED*** {
    return match(/^{\s*/***REMOVED***;
***REMOVED***

  /**
   * Closing brace.
   */

  function close(***REMOVED*** {
    return match(/^}\s*/***REMOVED***;
***REMOVED***

  /**
   * Parse ruleset.
   */

  function rules(***REMOVED*** {
    var node;
    var rules = [];
    whitespace(***REMOVED***;
    comments(***REMOVED***;
    while (css[0] != '}' && (node = atrule(***REMOVED*** || rule(***REMOVED******REMOVED******REMOVED*** {
      comments(***REMOVED***;
      rules.push(node***REMOVED***;
  ***REMOVED***
    return rules;
***REMOVED***

  /**
   * Match `re` and return captures.
   */

  function match(re***REMOVED*** {
    var m = re.exec(css***REMOVED***;
    if (!m***REMOVED*** return;
    css = css.slice(m[0].length***REMOVED***;
    return m;
***REMOVED***

  /**
   * Parse whitespace.
   */

  function whitespace(***REMOVED*** {
    match(/^\s*/***REMOVED***;
***REMOVED***

  /**
   * Parse comments;
   */

  function comments(***REMOVED*** {
    while (comment(***REMOVED******REMOVED*** ;
***REMOVED***

  /**
   * Parse comment.
   */

  function comment(***REMOVED*** {
    if ('/' == css[0] && '*' == css[1]***REMOVED*** {
      var i = 2;
      while ('*' != css[i] || '/' != css[i + 1]***REMOVED*** ++i;
      i += 2;
      css = css.slice(i***REMOVED***;
      whitespace(***REMOVED***;
      return true;
  ***REMOVED***
***REMOVED***

  /**
   * Parse selector.
   */

  function selector(***REMOVED*** {
    var m = match(/^([^{]+***REMOVED***/***REMOVED***;
    if (!m***REMOVED*** return;
    return m[0].trim(***REMOVED***.split(/\s*,\s*/***REMOVED***;
***REMOVED***

  /**
   * Parse declaration.
   */

  function declaration(***REMOVED*** {
    // prop
    var prop = match(/^(\*?[-\w]+***REMOVED***\s*/***REMOVED***;
    if (!prop***REMOVED*** return;
    prop = prop[0];

    // :
    if (!match(/^:\s*/***REMOVED******REMOVED*** return;

    // val
    var val = match(/^((?:'(?:\\'|.***REMOVED****?'|"(?:\\"|.***REMOVED****?"|\([^\***REMOVED***]*?\***REMOVED***|[^};]***REMOVED***+***REMOVED***\s*/***REMOVED***;
    if (!val***REMOVED*** return;
    val = val[0].trim(***REMOVED***;

    // ;
    match(/^[;\s]*/***REMOVED***;

    return { property: prop, value: val };
***REMOVED***

  /**
   * Parse keyframe.
   */

  function keyframe(***REMOVED*** {
    var m;
    var vals = [];

    while (m = match(/^(from|to|\d+%|\.\d+%|\d+\.\d+%***REMOVED***\s*/***REMOVED******REMOVED*** {
      vals.push(m[1]***REMOVED***;
      match(/^,\s*/***REMOVED***;
  ***REMOVED***

    if (!vals.length***REMOVED*** return;

    return {
      values: vals,
      declarations: declarations(***REMOVED***
  ***REMOVED***;
***REMOVED***

  /**
   * Parse keyframes.
   */

  function keyframes(***REMOVED*** {
    var m = match(/^@([-\w]+***REMOVED***?keyframes */***REMOVED***;
    if (!m***REMOVED*** return;
    var vendor = m[1];

    // identifier
    var m = match(/^([-\w]+***REMOVED***\s*/***REMOVED***;
    if (!m***REMOVED*** return;
    var name = m[1];

    if (!open(***REMOVED******REMOVED*** return;
    comments(***REMOVED***;

    var frame;
    var frames = [];
    while (frame = keyframe(***REMOVED******REMOVED*** {
      frames.push(frame***REMOVED***;
      comments(***REMOVED***;
  ***REMOVED***

    if (!close(***REMOVED******REMOVED*** return;

    return {
      name: name,
      vendor: vendor,
      keyframes: frames
  ***REMOVED***;
***REMOVED***

  /**
   * Parse media.
   */

  function media(***REMOVED*** {
    var m = match(/^@media *([^{]+***REMOVED***/***REMOVED***;
    if (!m***REMOVED*** return;
    var media = m[1].trim(***REMOVED***;

    if (!open(***REMOVED******REMOVED*** return;
    comments(***REMOVED***;

    var style = rules(***REMOVED***;

    if (!close(***REMOVED******REMOVED*** return;

    return { media: media, rules: style };
***REMOVED***

  /**
   * Parse import
   */

  function atimport(***REMOVED*** {
    return _atrule('import'***REMOVED***
***REMOVED***

  /**
   * Parse charset
   */

  function atcharset(***REMOVED*** {
    return _atrule('charset'***REMOVED***;
***REMOVED***

  /**
   * Parse non-block at-rules
   */

  function _atrule(name***REMOVED*** {
    var m = match(new RegExp('^@' + name + ' *([^;\\n]+***REMOVED***;\\s*'***REMOVED******REMOVED***;
    if (!m***REMOVED*** return;
    var ret = {}
    ret[name] = m[1].trim(***REMOVED***;
    return ret;
***REMOVED***

  /**
   * Parse declarations.
   */

  function declarations(***REMOVED*** {
    var decls = [];

    if (!open(***REMOVED******REMOVED*** return;
    comments(***REMOVED***;
  
    // declarations
    var decl;
    while (decl = declaration(***REMOVED******REMOVED*** {
      decls.push(decl***REMOVED***;
      comments(***REMOVED***;
  ***REMOVED***
  
    if (!close(***REMOVED******REMOVED*** return;
    return decls;
***REMOVED***

  /**
   * Parse at rule.
   */
   
  function atrule(***REMOVED*** {
    return keyframes(***REMOVED***
      || media(***REMOVED***
      || atimport(***REMOVED***
      || atcharset(***REMOVED***;
***REMOVED***

  /**
   * Parse rule.
   */
  
  function rule(***REMOVED*** {
    var sel = selector(***REMOVED***;
    if (!sel***REMOVED*** return;
    comments(***REMOVED***;
    return { selectors: sel, declarations: declarations(***REMOVED*** };
***REMOVED***
  
  return stylesheet(***REMOVED***;
};
