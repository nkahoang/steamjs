
/**
 * Stringfy the given AST `node`.
 *
 * @param {Object} node
 * @param {Object} options
 * @return {String}
 * @api public
 */

module.exports = function(node, options***REMOVED***{
  return new Compiler(options***REMOVED***.compile(node***REMOVED***;
};

/**
 * Initialize a new `Compiler`.
 */

function Compiler(options***REMOVED*** {
  options = options || {};
  this.compress = options.compress;
  this.indentation = options.indent;
}

/**
 * Compile `node`.
 */

Compiler.prototype.compile = function(node***REMOVED***{
  return node.stylesheet.rules.map(this.visit, this***REMOVED***
    .join(this.compress ? '' : '\n\n'***REMOVED***;
};

/**
 * Visit `node`.
 */

Compiler.prototype.visit = function(node***REMOVED***{
  if (node.charset***REMOVED*** return this.charset(node***REMOVED***;
  if (node.keyframes***REMOVED*** return this.keyframes(node***REMOVED***;
  if (node.media***REMOVED*** return this.media(node***REMOVED***;
  if (node.import***REMOVED*** return this.import(node***REMOVED***;
  return this.rule(node***REMOVED***;
};

/**
 * Visit import node.
 */

Compiler.prototype.import = function(node***REMOVED***{
  return '@import ' + node.import + ';';
};

/**
 * Visit media node.
 */

Compiler.prototype.media = function(node***REMOVED***{
  if (this.compress***REMOVED*** {
    return '@media '
      + node.media
      + '{'
      + node.rules.map(this.visit, this***REMOVED***.join(''***REMOVED***
      + '}';
***REMOVED***

  return '@media '
    + node.media
    + ' {\n'
    + this.indent(1***REMOVED***
    + node.rules.map(this.visit, this***REMOVED***.join('\n\n'***REMOVED***
    + this.indent(-1***REMOVED***
    + '\n}';
};

/**
 * Visit charset node.
 */

Compiler.prototype.charset = function(node***REMOVED***{
  if (this.compress***REMOVED*** {
    return '@charset ' + node.charset + ';';
***REMOVED***

  return '@charset ' + node.charset + ';\n';
};

/**
 * Visit keyframes node.
 */

Compiler.prototype.keyframes = function(node***REMOVED***{
  if (this.compress***REMOVED*** {
    return '@'
      + (node.vendor || ''***REMOVED***
      + 'keyframes '
      + node.name
      + '{'
      + node.keyframes.map(this.keyframe, this***REMOVED***.join(''***REMOVED***
      + '}';
***REMOVED***

  return '@'
    + (node.vendor || ''***REMOVED***
    + 'keyframes '
    + node.name
    + ' {\n'
    + this.indent(1***REMOVED***
    + node.keyframes.map(this.keyframe, this***REMOVED***.join('\n'***REMOVED***
    + this.indent(-1***REMOVED***
    + '}';
};

/**
 * Visit keyframe node.
 */

Compiler.prototype.keyframe = function(node***REMOVED***{
  if (this.compress***REMOVED*** {
    return node.values.join(','***REMOVED***
      + '{'
      + node.declarations.map(this.declaration, this***REMOVED***.join(';'***REMOVED***
      + '}';
***REMOVED***

  return this.indent(***REMOVED***
    + node.values.join(', '***REMOVED***
    + ' {\n'
    + this.indent(1***REMOVED***
    + node.declarations.map(this.declaration, this***REMOVED***.join(';\n'***REMOVED***
    + this.indent(-1***REMOVED***
    + '\n' + this.indent(***REMOVED*** + '}\n';
};

/**
 * Visit rule node.
 */

Compiler.prototype.rule = function(node***REMOVED***{
  var indent = this.indent(***REMOVED***;

  if (this.compress***REMOVED*** {
    return node.selectors.join(','***REMOVED***
      + '{'
      + node.declarations.map(this.declaration, this***REMOVED***.join(';'***REMOVED***
      + '}';
***REMOVED***

  return node.selectors.map(function(s***REMOVED***{ return indent + s }***REMOVED***.join(',\n'***REMOVED***
    + ' {\n'
    + this.indent(1***REMOVED***
    + node.declarations.map(this.declaration, this***REMOVED***.join(';\n'***REMOVED***
    + this.indent(-1***REMOVED***
    + '\n' + this.indent(***REMOVED*** + '}';
};

/**
 * Visit declaration node.
 */

Compiler.prototype.declaration = function(node***REMOVED***{
  if (this.compress***REMOVED*** {
    return node.property + ':' + node.value;
***REMOVED***

  return this.indent(***REMOVED*** + node.property + ': ' + node.value;
};

/**
 * Increase, decrease or return current indentation.
 */

Compiler.prototype.indent = function(level***REMOVED*** {
  this.level = this.level || 1;

  if (null != level***REMOVED*** {
    this.level += level;
    return '';
***REMOVED***

  return Array(this.level***REMOVED***.join(this.indentation || '  '***REMOVED***;
};
