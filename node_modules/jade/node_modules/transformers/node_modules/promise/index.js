var isPromise = require('is-promise'***REMOVED***

var nextTick
if (typeof setImediate === 'function'***REMOVED*** nextTick = setImediate
else if (typeof process === 'object' && process && process.nextTick***REMOVED*** nextTick = process.nextTick
else nextTick = function (cb***REMOVED*** { setTimeout(cb, 0***REMOVED*** }

var extensions = []

module.exports = Promise
function Promise(fn***REMOVED*** {
  if (!(this instanceof Promise***REMOVED******REMOVED*** {
    return fn ? new Promise(fn***REMOVED*** : defer(***REMOVED***
***REMOVED***
  if (typeof fn !== 'function'***REMOVED*** {
    throw new TypeError('fn is not a function'***REMOVED***
***REMOVED***

  var state = {
    isResolved: false,
    isSettled: false,
    isFulfilled: false,
    value: null,
    waiting: [],
    running: false
***REMOVED***

  function _resolve(val***REMOVED*** {
    resolve(state, val***REMOVED***;
***REMOVED***
  function _reject(err***REMOVED*** {
    reject(state, err***REMOVED***;
***REMOVED***
  this.then = function _then(onFulfilled, onRejected***REMOVED*** {
    return then(state, onFulfilled, onRejected***REMOVED***;
***REMOVED***

  _resolve.fulfill = deprecate(_resolve, 'resolver.fulfill(x***REMOVED***', 'resolve(x***REMOVED***'***REMOVED***
  _resolve.reject = deprecate(_reject, 'resolver.reject', 'reject(x***REMOVED***'***REMOVED***

  try {
    fn(_resolve, _reject***REMOVED***
***REMOVED*** catch (ex***REMOVED*** {
    _reject(ex***REMOVED***
***REMOVED***
}

function resolve(promiseState, value***REMOVED*** {
  if (promiseState.isResolved***REMOVED*** return
  if (isPromise(value***REMOVED******REMOVED*** {
    assimilate(promiseState, value***REMOVED***
***REMOVED*** else {
    settle(promiseState, true, value***REMOVED***
***REMOVED***
}

function reject(promiseState, reason***REMOVED*** {
  if (promiseState.isResolved***REMOVED*** return
  settle(promiseState, false, reason***REMOVED***
}

function then(promiseState, onFulfilled, onRejected***REMOVED*** {
  return new Promise(function (resolve, reject***REMOVED*** {
    function done(next, skipTimeout***REMOVED*** {
      var callback = promiseState.isFulfilled ? onFulfilled : onRejected
      if (typeof callback === 'function'***REMOVED*** {
        function timeoutDone(***REMOVED*** {
          var val
          try {
            val = callback(promiseState.value***REMOVED***
        ***REMOVED*** catch (ex***REMOVED*** {
            reject(ex***REMOVED***
            return next(true***REMOVED***
        ***REMOVED***
          resolve(val***REMOVED***
          next(true***REMOVED***
      ***REMOVED***
        if (skipTimeout***REMOVED*** timeoutDone(***REMOVED***
        else nextTick(timeoutDone***REMOVED***
    ***REMOVED*** else if (promiseState.isFulfilled***REMOVED*** {
        resolve(promiseState.value***REMOVED***
        next(skipTimeout***REMOVED***
    ***REMOVED*** else {
        reject(promiseState.value***REMOVED***
        next(skipTimeout***REMOVED***
    ***REMOVED***
  ***REMOVED***
    promiseState.waiting.push(done***REMOVED***
    if (promiseState.isSettled && !promiseState.running***REMOVED*** processQueue(promiseState***REMOVED***
***REMOVED******REMOVED***
}

function processQueue(promiseState***REMOVED*** {
  function next(skipTimeout***REMOVED*** {
    if (promiseState.waiting.length***REMOVED*** {
      promiseState.running = true
      promiseState.waiting.shift(***REMOVED***(next, skipTimeout***REMOVED***
  ***REMOVED*** else {
      promiseState.running = false
  ***REMOVED***
***REMOVED***
  next(false***REMOVED***
}

function settle(promiseState, isFulfilled, value***REMOVED*** {
  if (promiseState.isSettled***REMOVED*** return

  promiseState.isResolved = promiseState.isSettled = true
  promiseState.value = value
  promiseState.isFulfilled = isFulfilled

  processQueue(promiseState***REMOVED***
}

function assimilate(promiseState, thenable***REMOVED*** {
  try {
    promiseState.isResolved = true
    thenable.then(function (res***REMOVED*** {
      if (isPromise(res***REMOVED******REMOVED*** {
        assimilate(promiseState, res***REMOVED***
    ***REMOVED*** else {
        settle(promiseState, true, res***REMOVED***
    ***REMOVED***
  ***REMOVED***, function (err***REMOVED*** {
      settle(promiseState, false, err***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED*** catch (ex***REMOVED*** {
    settle(promiseState, false, ex***REMOVED***
***REMOVED***
}

Promise.use = function (extension***REMOVED*** {
  extensions.push(extension***REMOVED***
}


function deprecate(method, name, alternative***REMOVED*** {
  return function (***REMOVED*** {
    var err = new Error(name + ' is deprecated use ' + alternative***REMOVED***
    if (typeof console !== 'undefined' && console && typeof console.warn === 'function'***REMOVED*** {
      console.warn(name + ' is deprecated use ' + alternative***REMOVED***
      if (err.stack***REMOVED*** console.warn(err.stack***REMOVED***
  ***REMOVED*** else {
      nextTick(function (***REMOVED*** {
        throw err
    ***REMOVED******REMOVED***
  ***REMOVED***
    method.apply(this, arguments***REMOVED***
***REMOVED***
}
function defer(***REMOVED*** {
  var err = new Error('promise.defer(***REMOVED*** is deprecated'***REMOVED***
  if (typeof console !== 'undefined' && console && typeof console.warn === 'function'***REMOVED*** {
    console.warn('promise.defer(***REMOVED*** is deprecated'***REMOVED***
    if (err.stack***REMOVED*** console.warn(err.stack***REMOVED***
***REMOVED*** else {
    nextTick(function (***REMOVED*** {
      throw err
  ***REMOVED******REMOVED***
***REMOVED***
  var resolver
  var promise = new Promise(function (res***REMOVED*** { resolver = res }***REMOVED***
  return {resolver: resolver, promise: promise}
}