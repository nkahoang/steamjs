var path = require("path"***REMOVED***;
var fs = require("fs"***REMOVED***;
var vm = require("vm"***REMOVED***;
var sys = require("util"***REMOVED***;

var UglifyJS = vm.createContext({
    sys           : sys,
    console       : console,
    MOZ_SourceMap : require("source-map"***REMOVED***
}***REMOVED***;

function load_global(file***REMOVED*** {
    file = path.resolve(path.dirname(module.filename***REMOVED***, file***REMOVED***;
    try {
        var code = fs.readFileSync(file, "utf8"***REMOVED***;
        return vm.runInContext(code, UglifyJS, file***REMOVED***;
  ***REMOVED*** catch(ex***REMOVED*** {
        // XXX: in case of a syntax error, the message is kinda
        // useless. (no location information***REMOVED***.
        sys.debug("ERROR in file: " + file + " / " + ex***REMOVED***;
        process.exit(1***REMOVED***;
  ***REMOVED***
};

var FILES = exports.FILES = [
    "../lib/utils.js",
    "../lib/ast.js",
    "../lib/parse.js",
    "../lib/transform.js",
    "../lib/scope.js",
    "../lib/output.js",
    "../lib/compress.js",
    "../lib/sourcemap.js",
    "../lib/mozilla-ast.js"
].map(function(file***REMOVED***{
    return path.join(path.dirname(fs.realpathSync(__filename***REMOVED******REMOVED***, file***REMOVED***;
}***REMOVED***;

FILES.forEach(load_global***REMOVED***;

UglifyJS.AST_Node.warn_function = function(txt***REMOVED*** {
    sys.error("WARN: " + txt***REMOVED***;
};

// XXX: perhaps we shouldn't export everything but heck, I'm lazy.
for (var i in UglifyJS***REMOVED*** {
    if (UglifyJS.hasOwnProperty(i***REMOVED******REMOVED*** {
        exports[i] = UglifyJS[i];
  ***REMOVED***
}

exports.minify = function(files, options***REMOVED*** {
    options = UglifyJS.defaults(options, {
        outSourceMap : null,
        sourceRoot   : null,
        inSourceMap  : null,
        fromString   : false,
        warnings     : false,
        mangle       : {},
        output       : null,
        compress     : {}
  ***REMOVED******REMOVED***;
    if (typeof files == "string"***REMOVED***
        files = [ files ];

    // 1. parse
    var toplevel = null;
    files.forEach(function(file***REMOVED***{
        var code = options.fromString
            ? file
            : fs.readFileSync(file, "utf8"***REMOVED***;
        toplevel = UglifyJS.parse(code, {
            filename: options.fromString ? "?" : file,
            toplevel: toplevel
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    // 2. compress
    if (options.compress***REMOVED*** {
        var compress = { warnings: options.warnings };
        UglifyJS.merge(compress, options.compress***REMOVED***;
        toplevel.figure_out_scope(***REMOVED***;
        var sq = UglifyJS.Compressor(compress***REMOVED***;
        toplevel = toplevel.transform(sq***REMOVED***;
  ***REMOVED***

    // 3. mangle
    if (options.mangle***REMOVED*** {
        toplevel.figure_out_scope(***REMOVED***;
        toplevel.compute_char_frequency(***REMOVED***;
        toplevel.mangle_names(options.mangle***REMOVED***;
  ***REMOVED***

    // 4. output
    var map = null;
    var inMap = null;
    if (options.inSourceMap***REMOVED*** {
        inMap = fs.readFileSync(options.inSourceMap, "utf8"***REMOVED***;
  ***REMOVED***
    if (options.outSourceMap***REMOVED*** map = UglifyJS.SourceMap({
        file: options.outSourceMap,
        orig: inMap,
        root: options.sourceRoot
  ***REMOVED******REMOVED***;
    var output = { source_map: map };
    if (options.output***REMOVED*** {
        UglifyJS.merge(output, options.output***REMOVED***;
  ***REMOVED***
    var stream = UglifyJS.OutputStream(output***REMOVED***;
    toplevel.print(stream***REMOVED***;
    return {
        code : stream + "",
        map  : map + ""
  ***REMOVED***;
};

// exports.describe_ast = function(***REMOVED*** {
//     function doitem(ctor***REMOVED*** {
//         var sub = {};
//         ctor.SUBCLASSES.forEach(function(ctor***REMOVED***{
//             sub[ctor.TYPE] = doitem(ctor***REMOVED***;
//       ***REMOVED******REMOVED***;
//         var ret = {};
//         if (ctor.SELF_PROPS.length > 0***REMOVED*** ret.props = ctor.SELF_PROPS;
//         if (ctor.SUBCLASSES.length > 0***REMOVED*** ret.sub = sub;
//         return ret;
//   ***REMOVED***
//     return doitem(UglifyJS.AST_Node***REMOVED***.sub;
// }

exports.describe_ast = function(***REMOVED*** {
    var out = UglifyJS.OutputStream({ beautify: true }***REMOVED***;
    function doitem(ctor***REMOVED*** {
        out.print("AST_" + ctor.TYPE***REMOVED***;
        var props = ctor.SELF_PROPS.filter(function(prop***REMOVED***{
            return !/^\$/.test(prop***REMOVED***;
      ***REMOVED******REMOVED***;
        if (props.length > 0***REMOVED*** {
            out.space(***REMOVED***;
            out.with_parens(function(***REMOVED***{
                props.forEach(function(prop, i***REMOVED***{
                    if (i***REMOVED*** out.space(***REMOVED***;
                    out.print(prop***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
        if (ctor.documentation***REMOVED*** {
            out.space(***REMOVED***;
            out.print_string(ctor.documentation***REMOVED***;
      ***REMOVED***
        if (ctor.SUBCLASSES.length > 0***REMOVED*** {
            out.space(***REMOVED***;
            out.with_block(function(***REMOVED***{
                ctor.SUBCLASSES.forEach(function(ctor, i***REMOVED***{
                    out.indent(***REMOVED***;
                    doitem(ctor***REMOVED***;
                    out.newline(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    doitem(UglifyJS.AST_Node***REMOVED***;
    return out + "";
};
