/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function'***REMOVED*** {
    var define = require('amdefine'***REMOVED***(module, require***REMOVED***;
}
define(function (require, exports, module***REMOVED*** {

  var ArraySet = require('../../lib/source-map/array-set'***REMOVED***.ArraySet;

  function makeTestSet(***REMOVED*** {
    var set = new ArraySet(***REMOVED***;
    for (var i = 0; i < 100; i++***REMOVED*** {
      set.add(String(i***REMOVED******REMOVED***;
  ***REMOVED***
    return set;
***REMOVED***

  exports['test .has(***REMOVED*** membership'] = function (assert, util***REMOVED*** {
    var set = makeTestSet(***REMOVED***;
    for (var i = 0; i < 100; i++***REMOVED*** {
      assert.ok(set.has(String(i***REMOVED******REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***;

  exports['test .indexOf(***REMOVED*** elements'] = function (assert, util***REMOVED*** {
    var set = makeTestSet(***REMOVED***;
    for (var i = 0; i < 100; i++***REMOVED*** {
      assert.strictEqual(set.indexOf(String(i***REMOVED******REMOVED***, i***REMOVED***;
  ***REMOVED***
***REMOVED***;

  exports['test .at(***REMOVED*** indexing'] = function (assert, util***REMOVED*** {
    var set = makeTestSet(***REMOVED***;
    for (var i = 0; i < 100; i++***REMOVED*** {
      assert.strictEqual(set.at(i***REMOVED***, String(i***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***;

  exports['test creating from an array'] = function (assert, util***REMOVED*** {
    var set = ArraySet.fromArray(['foo', 'bar', 'baz', 'quux', 'hasOwnProperty']***REMOVED***;

    assert.ok(set.has('foo'***REMOVED******REMOVED***;
    assert.ok(set.has('bar'***REMOVED******REMOVED***;
    assert.ok(set.has('baz'***REMOVED******REMOVED***;
    assert.ok(set.has('quux'***REMOVED******REMOVED***;
    assert.ok(set.has('hasOwnProperty'***REMOVED******REMOVED***;

    assert.strictEqual(set.indexOf('foo'***REMOVED***, 0***REMOVED***;
    assert.strictEqual(set.indexOf('bar'***REMOVED***, 1***REMOVED***;
    assert.strictEqual(set.indexOf('baz'***REMOVED***, 2***REMOVED***;
    assert.strictEqual(set.indexOf('quux'***REMOVED***, 3***REMOVED***;

    assert.strictEqual(set.at(0***REMOVED***, 'foo'***REMOVED***;
    assert.strictEqual(set.at(1***REMOVED***, 'bar'***REMOVED***;
    assert.strictEqual(set.at(2***REMOVED***, 'baz'***REMOVED***;
    assert.strictEqual(set.at(3***REMOVED***, 'quux'***REMOVED***;
***REMOVED***;

  exports['test that you can add __proto__; see github issue #30'] = function (assert, util***REMOVED*** {
    var set = new ArraySet(***REMOVED***;
    set.add('__proto__'***REMOVED***;
    assert.ok(set.has('__proto__'***REMOVED******REMOVED***;
    assert.strictEqual(set.at(0***REMOVED***, '__proto__'***REMOVED***;
    assert.strictEqual(set.indexOf('__proto__'***REMOVED***, 0***REMOVED***;
***REMOVED***;

  exports['test .fromArray(***REMOVED*** with duplicates'] = function (assert, util***REMOVED*** {
    var set = ArraySet.fromArray(['foo', 'foo']***REMOVED***;
    assert.ok(set.has('foo'***REMOVED******REMOVED***;
    assert.strictEqual(set.at(0***REMOVED***, 'foo'***REMOVED***;
    assert.strictEqual(set.indexOf('foo'***REMOVED***, 0***REMOVED***;
    assert.strictEqual(set.toArray(***REMOVED***.length, 1***REMOVED***;

    set = ArraySet.fromArray(['foo', 'foo'], true***REMOVED***;
    assert.ok(set.has('foo'***REMOVED******REMOVED***;
    assert.strictEqual(set.at(0***REMOVED***, 'foo'***REMOVED***;
    assert.strictEqual(set.at(1***REMOVED***, 'foo'***REMOVED***;
    assert.strictEqual(set.indexOf('foo'***REMOVED***, 0***REMOVED***;
    assert.strictEqual(set.toArray(***REMOVED***.length, 2***REMOVED***;
***REMOVED***;

  exports['test .add(***REMOVED*** with duplicates'] = function (assert, util***REMOVED*** {
    var set = new ArraySet(***REMOVED***;
    set.add('foo'***REMOVED***;

    set.add('foo'***REMOVED***;
    assert.ok(set.has('foo'***REMOVED******REMOVED***;
    assert.strictEqual(set.at(0***REMOVED***, 'foo'***REMOVED***;
    assert.strictEqual(set.indexOf('foo'***REMOVED***, 0***REMOVED***;
    assert.strictEqual(set.toArray(***REMOVED***.length, 1***REMOVED***;

    set.add('foo', true***REMOVED***;
    assert.ok(set.has('foo'***REMOVED******REMOVED***;
    assert.strictEqual(set.at(0***REMOVED***, 'foo'***REMOVED***;
    assert.strictEqual(set.at(1***REMOVED***, 'foo'***REMOVED***;
    assert.strictEqual(set.indexOf('foo'***REMOVED***, 0***REMOVED***;
    assert.strictEqual(set.toArray(***REMOVED***.length, 2***REMOVED***;
***REMOVED***;

}***REMOVED***;
