/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
var ***REMOVED***;
var fs = require('fs'***REMOVED***;
var copy = require('dryice'***REMOVED***.copy;

function removeAmdefine(src***REMOVED*** {
  src = String(src***REMOVED***.replace(
    /if\s*\(typeof\s*define\s*!==\s*'function'\***REMOVED***\s*{\s*var\s*define\s*=\s*require\('amdefine'\***REMOVED***\(module,\s*require\***REMOVED***;\s*}\s*/g,
    ''***REMOVED***;
  src = src.replace(
    /\b(define\(.****REMOVED***('amdefine',?***REMOVED***/gm,
    '$1'***REMOVED***;
  return src;
}
removeAmdefine.onRead = true;

function makeNonRelative(src***REMOVED*** {
  return src
    .replace(/require\('.\//g, 'require(\'source-map/'***REMOVED***
    .replace(/\.\.\/\.\.\/lib\//g, ''***REMOVED***;
}
makeNonRelative.onRead = true;

function buildBrowser(***REMOVED*** {
  console.log('\nCreating dist/source-map.js'***REMOVED***;

  var project = copy.createCommonJsProject({
    roots: [ path.join(__dirname, 'lib'***REMOVED*** ]
***REMOVED******REMOVED***;

  copy({
    source: [
      'build/mini-require.js',
      {
        project: project,
        require: [ 'source-map/source-map-generator',
                   'source-map/source-map-consumer',
                   'source-map/source-node']
    ***REMOVED***,
      'build/suffix-browser.js'
    ],
    filter: [
      copy.filter.moduleDefines,
      removeAmdefine
    ],
    dest: 'dist/source-map.js'
***REMOVED******REMOVED***;
}

function buildBrowserMin(***REMOVED*** {
  console.log('\nCreating dist/source-map.min.js'***REMOVED***;

  copy({
    source: 'dist/source-map.js',
    filter: copy.filter.uglifyjs,
    dest: 'dist/source-map.min.js'
***REMOVED******REMOVED***;
}

function buildFirefox(***REMOVED*** {
  console.log('\nCreating dist/SourceMap.jsm'***REMOVED***;

  var project = copy.createCommonJsProject({
    roots: [ path.join(__dirname, 'lib'***REMOVED*** ]
***REMOVED******REMOVED***;

  copy({
    source: [
      'build/prefix-source-map.jsm',
      {
        project: project,
        require: [ 'source-map/source-map-consumer',
                   'source-map/source-map-generator',
                   'source-map/source-node' ]
    ***REMOVED***,
      'build/suffix-source-map.jsm'
    ],
    filter: [
      copy.filter.moduleDefines,
      removeAmdefine,
      makeNonRelative
    ],
    dest: 'dist/SourceMap.jsm'
***REMOVED******REMOVED***;

  // Create dist/test/Utils.jsm
  console.log('\nCreating dist/test/Utils.jsm'***REMOVED***;

  project = copy.createCommonJsProject({
    roots: [ __dirname, path.join(__dirname, 'lib'***REMOVED*** ]
***REMOVED******REMOVED***;

  copy({
    source: [
      'build/prefix-utils.jsm',
      'build/assert-shim.js',
      {
        project: project,
        require: [ 'test/source-map/util' ]
    ***REMOVED***,
      'build/suffix-utils.jsm'
    ],
    filter: [
      copy.filter.moduleDefines,
      removeAmdefine,
      makeNonRelative
    ],
    dest: 'dist/test/Utils.jsm'
***REMOVED******REMOVED***;

  function isTestFile(f***REMOVED*** {
    return /^test\-.*?\.js/.test(f***REMOVED***;
***REMOVED***

  var testFiles = fs.readdirSync(path.join(__dirname, 'test', 'source-map'***REMOVED******REMOVED***.filter(isTestFile***REMOVED***;

  testFiles.forEach(function (testFile***REMOVED*** {
    console.log('\nCreating', path.join('dist', 'test', testFile.replace(/\-/g, '_'***REMOVED******REMOVED******REMOVED***;

    copy({
      source: [
        'build/test-prefix.js',
        path.join('test', 'source-map', testFile***REMOVED***,
        'build/test-suffix.js'
      ],
      filter: [
        removeAmdefine,
        makeNonRelative,
        function (input, source***REMOVED*** {
          return input.replace('define(',
                               'define("'
                               + path.join('test', 'source-map', testFile.replace(/\.js$/, ''***REMOVED******REMOVED***
                               + '", ["require", "exports", "module"], '***REMOVED***;
      ***REMOVED***,
        function (input, source***REMOVED*** {
          return input.replace('{THIS_MODULE}', function (***REMOVED*** {
            return "test/source-map/" + testFile.replace(/\.js$/, ''***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED***
      ],
      dest: path.join('dist', 'test', testFile.replace(/\-/g, '_'***REMOVED******REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
}

function ensureDir(name***REMOVED*** {
  var dirExists = false;
  try {
    dirExists = fs.statSync(name***REMOVED***.isDirectory(***REMOVED***;
***REMOVED*** catch (err***REMOVED*** {}

  if (!dirExists***REMOVED*** {
    fs.mkdirSync(name, 0777***REMOVED***;
***REMOVED***
}

ensureDir("dist"***REMOVED***;
ensureDir("dist/test"***REMOVED***;
buildFirefox(***REMOVED***;
buildBrowser(***REMOVED***;
buildBrowserMin(***REMOVED***;
