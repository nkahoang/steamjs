var Hash = require('hashish'***REMOVED***;
var optimist = require('../index'***REMOVED***;
var test = require('tap'***REMOVED***.test;

test('usageFail', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('-x 10 -z 20'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 -x NUM -y NUM'***REMOVED***
            .demand(['x','y']***REMOVED***
            .argv;
  ***REMOVED******REMOVED***;
    t.same(
        r.result,
        { x : 10, z : 20, _ : [], $0 : './usage' }
    ***REMOVED***;

    t.same(
        r.errors.join('\n'***REMOVED***.split(/\n+/***REMOVED***,
        [
            'Usage: ./usage -x NUM -y NUM',
            'Options:',
            '  -x  [required]',
            '  -y  [required]',
            'Missing required arguments: y',
        ]
    ***REMOVED***;
    t.same(r.logs, []***REMOVED***;
    t.ok(r.exit***REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;


test('usagePass', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('-x 10 -y 20'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 -x NUM -y NUM'***REMOVED***
            .demand(['x','y']***REMOVED***
            .argv;
  ***REMOVED******REMOVED***;
    t.same(r, {
        result : { x : 10, y : 20, _ : [], $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
  ***REMOVED******REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('checkPass', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('-x 10 -y 20'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 -x NUM -y NUM'***REMOVED***
            .check(function (argv***REMOVED*** {
                if (!('x' in argv***REMOVED******REMOVED*** throw 'You forgot about -x';
                if (!('y' in argv***REMOVED******REMOVED*** throw 'You forgot about -y';
          ***REMOVED******REMOVED***
            .argv;
  ***REMOVED******REMOVED***;
    t.same(r, {
        result : { x : 10, y : 20, _ : [], $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
  ***REMOVED******REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('checkFail', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('-x 10 -z 20'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 -x NUM -y NUM'***REMOVED***
            .check(function (argv***REMOVED*** {
                if (!('x' in argv***REMOVED******REMOVED*** throw 'You forgot about -x';
                if (!('y' in argv***REMOVED******REMOVED*** throw 'You forgot about -y';
          ***REMOVED******REMOVED***
            .argv;
  ***REMOVED******REMOVED***;

    t.same(
        r.result,
        { x : 10, z : 20, _ : [], $0 : './usage' }
    ***REMOVED***;

    t.same(
        r.errors.join('\n'***REMOVED***.split(/\n+/***REMOVED***,
        [
            'Usage: ./usage -x NUM -y NUM',
            'You forgot about -y'
        ]
    ***REMOVED***;

    t.same(r.logs, []***REMOVED***;
    t.ok(r.exit***REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('checkCondPass', function (t***REMOVED*** {
    function checker (argv***REMOVED*** {
        return 'x' in argv && 'y' in argv;
  ***REMOVED***

    var r = checkUsage(function (***REMOVED*** {
        return optimist('-x 10 -y 20'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 -x NUM -y NUM'***REMOVED***
            .check(checker***REMOVED***
            .argv;
  ***REMOVED******REMOVED***;
    t.same(r, {
        result : { x : 10, y : 20, _ : [], $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
  ***REMOVED******REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('checkCondFail', function (t***REMOVED*** {
    function checker (argv***REMOVED*** {
        return 'x' in argv && 'y' in argv;
  ***REMOVED***

    var r = checkUsage(function (***REMOVED*** {
        return optimist('-x 10 -z 20'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 -x NUM -y NUM'***REMOVED***
            .check(checker***REMOVED***
            .argv;
  ***REMOVED******REMOVED***;

    t.same(
        r.result,
        { x : 10, z : 20, _ : [], $0 : './usage' }
    ***REMOVED***;

    t.same(
        r.errors.join('\n'***REMOVED***.split(/\n+/***REMOVED***.join('\n'***REMOVED***,
        'Usage: ./usage -x NUM -y NUM\n'
        + 'Argument check failed: ' + checker.toString(***REMOVED***
    ***REMOVED***;

    t.same(r.logs, []***REMOVED***;
    t.ok(r.exit***REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('countPass', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('1 2 3 --moo'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 [x] [y] [z] {OPTIONS}'***REMOVED***
            .demand(3***REMOVED***
            .argv;
  ***REMOVED******REMOVED***;
    t.same(r, {
        result : { _ : [ '1', '2', '3' ], moo : true, $0 : './usage' },
        errors : [],
        logs : [],
        exit : false,
  ***REMOVED******REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('countFail', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('1 2 --moo'.split(' '***REMOVED******REMOVED***
            .usage('Usage: $0 [x] [y] [z] {OPTIONS}'***REMOVED***
            .demand(3***REMOVED***
            .argv;
  ***REMOVED******REMOVED***;
    t.same(
        r.result,
        { _ : [ '1', '2' ], moo : true, $0 : './usage' }
    ***REMOVED***;

    t.same(
        r.errors.join('\n'***REMOVED***.split(/\n+/***REMOVED***,
        [
            'Usage: ./usage [x] [y] [z] {OPTIONS}',
            'Not enough non-option arguments: got 2, need at least 3',
        ]
    ***REMOVED***;

    t.same(r.logs, []***REMOVED***;
    t.ok(r.exit***REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('defaultSingles', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('--foo 50 --baz 70 --powsy'.split(' '***REMOVED******REMOVED***
            .default('foo', 5***REMOVED***
            .default('bar', 6***REMOVED***
            .default('baz', 7***REMOVED***
            .argv
        ;
  ***REMOVED******REMOVED***;
    t.same(r.result, {
        foo : '50',
        bar : 6,
        baz : '70',
        powsy : true,
        _ : [],
        $0 : './usage',
  ***REMOVED******REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('defaultAliases', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist(''***REMOVED***
            .alias('f', 'foo'***REMOVED***
            .default('f', 5***REMOVED***
            .argv
        ;
  ***REMOVED******REMOVED***;
    t.same(r.result, {
        f : '5',
        foo : '5',
        _ : [],
        $0 : './usage',
  ***REMOVED******REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('defaultHash', function (t***REMOVED*** {
    var r = checkUsage(function (***REMOVED*** {
        return optimist('--foo 50 --baz 70'.split(' '***REMOVED******REMOVED***
            .default({ foo : 10, bar : 20, quux : 30 }***REMOVED***
            .argv
        ;
  ***REMOVED******REMOVED***;
    t.same(r.result, {
        _ : [],
        $0 : './usage',
        foo : 50,
        baz : 70,
        bar : 20,
        quux : 30,
  ***REMOVED******REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

test('rebase', function (t***REMOVED*** {
    t.equal(
        optimist.rebase('/home/substack', '/home/substack/foo/bar/baz'***REMOVED***,
        './foo/bar/baz'
    ***REMOVED***;
    t.equal(
        optimist.rebase('/home/substack/foo/bar/baz', '/home/substack'***REMOVED***,
        '../../..'
    ***REMOVED***;
    t.equal(
        optimist.rebase('/home/substack/foo', '/home/substack/pow/zoom.txt'***REMOVED***,
        '../pow/zoom.txt'
    ***REMOVED***;
    t.end(***REMOVED***;
}***REMOVED***;

function checkUsage (f***REMOVED*** {

    var exit = false;

    process._exit = process.exit;
    process._env = process.env;
    process._argv = process.argv;

    process.exit = function (t***REMOVED*** { exit = true };
    process.env = Hash.merge(process.env, { _ : 'node' }***REMOVED***;
    process.argv = [ './usage' ];

    var errors = [];
    var logs = [];

    console._error = console.error;
    console.error = function (msg***REMOVED*** { errors.push(msg***REMOVED*** };
    console._log = console.log;
    console.log = function (msg***REMOVED*** { logs.push(msg***REMOVED*** };

    var result = f(***REMOVED***;

    process.exit = process._exit;
    process.env = process._env;
    process.argv = process._argv;

    console.error = console._error;
    console.log = console._log;

    return {
        errors : errors,
        logs : logs,
        exit : exit,
        result : result,
  ***REMOVED***;
};
