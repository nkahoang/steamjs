unused_funarg_1: {
    options = { unused: true };
    input: {
        function f(a, b, c, d, e***REMOVED*** {
            return a + b;
      ***REMOVED***
  ***REMOVED***
    expect: {
        function f(a, b***REMOVED*** {
            return a + b;
      ***REMOVED***
  ***REMOVED***
}

unused_funarg_2: {
    options = { unused: true };
    input: {
        function f(a, b, c, d, e***REMOVED*** {
            return a + c;
      ***REMOVED***
  ***REMOVED***
    expect: {
        function f(a, b, c***REMOVED*** {
            return a + c;
      ***REMOVED***
  ***REMOVED***
}

unused_nested_function: {
    options = { unused: true };
    input: {
        function f(x, y***REMOVED*** {
            function g(***REMOVED*** {
                something(***REMOVED***;
          ***REMOVED***
            return x + y;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        function f(x, y***REMOVED*** {
            return x + y;
      ***REMOVED***
  ***REMOVED***
}

unused_circular_references_1: {
    options = { unused: true };
    input: {
        function f(x, y***REMOVED*** {
            // circular reference
            function g(***REMOVED*** {
                return h(***REMOVED***;
          ***REMOVED***
            function h(***REMOVED*** {
                return g(***REMOVED***;
          ***REMOVED***
            return x + y;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        function f(x, y***REMOVED*** {
            return x + y;
      ***REMOVED***
  ***REMOVED***
}

unused_circular_references_2: {
    options = { unused: true };
    input: {
        function f(x, y***REMOVED*** {
            var foo = 1, bar = baz, baz = foo + bar, qwe = moo(***REMOVED***;
            return x + y;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        function f(x, y***REMOVED*** {
            moo(***REMOVED***;              // keeps side effect
            return x + y;
      ***REMOVED***
  ***REMOVED***
}

unused_circular_references_3: {
    options = { unused: true };
    input: {
        function f(x, y***REMOVED*** {
            var g = function(***REMOVED*** { return h(***REMOVED*** };
            var h = function(***REMOVED*** { return g(***REMOVED*** };
            return x + y;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        function f(x, y***REMOVED*** {
            return x + y;
      ***REMOVED***
  ***REMOVED***
}
