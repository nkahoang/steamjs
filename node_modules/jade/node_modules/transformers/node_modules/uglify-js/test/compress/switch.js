constant_switch_1: {
    options = { dead_code: true, evaluate: true };
    input: {
        switch (1+1***REMOVED*** {
          case 1: foo(***REMOVED***; break;
          case 1+1: bar(***REMOVED***; break;
          case 1+1+1: baz(***REMOVED***; break;
      ***REMOVED***
  ***REMOVED***
    expect: {
        bar(***REMOVED***;
  ***REMOVED***
}

constant_switch_2: {
    options = { dead_code: true, evaluate: true };
    input: {
        switch (1***REMOVED*** {
          case 1: foo(***REMOVED***;
          case 1+1: bar(***REMOVED***; break;
          case 1+1+1: baz(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    expect: {
        foo(***REMOVED***;
        bar(***REMOVED***;
  ***REMOVED***
}

constant_switch_3: {
    options = { dead_code: true, evaluate: true };
    input: {
        switch (10***REMOVED*** {
          case 1: foo(***REMOVED***;
          case 1+1: bar(***REMOVED***; break;
          case 1+1+1: baz(***REMOVED***;
          default:
            def(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    expect: {
        def(***REMOVED***;
  ***REMOVED***
}

constant_switch_4: {
    options = { dead_code: true, evaluate: true };
    input: {
        switch (2***REMOVED*** {
          case 1:
            x(***REMOVED***;
            if (foo***REMOVED*** break;
            y(***REMOVED***;
            break;
          case 1+1:
            bar(***REMOVED***;
          default:
            def(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    expect: {
        bar(***REMOVED***;
        def(***REMOVED***;
  ***REMOVED***
}

constant_switch_5: {
    options = { dead_code: true, evaluate: true };
    input: {
        switch (1***REMOVED*** {
          case 1:
            x(***REMOVED***;
            if (foo***REMOVED*** break;
            y(***REMOVED***;
            break;
          case 1+1:
            bar(***REMOVED***;
          default:
            def(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    expect: {
        // the break inside the if ruins our job
        // we can still get rid of irrelevant cases.
        switch (1***REMOVED*** {
          case 1:
            x(***REMOVED***;
            if (foo***REMOVED*** break;
            y(***REMOVED***;
      ***REMOVED***
        // XXX: we could optimize this better by inventing an outer
        // labeled block, but that's kinda tricky.
  ***REMOVED***
}

constant_switch_6: {
    options = { dead_code: true, evaluate: true };
    input: {
        OUT: {
            foo(***REMOVED***;
            switch (1***REMOVED*** {
              case 1:
                x(***REMOVED***;
                if (foo***REMOVED*** break OUT;
                y(***REMOVED***;
              case 1+1:
                bar(***REMOVED***;
                break;
              default:
                def(***REMOVED***;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    expect: {
        OUT: {
            foo(***REMOVED***;
            x(***REMOVED***;
            if (foo***REMOVED*** break OUT;
            y(***REMOVED***;
            bar(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}

constant_switch_7: {
    options = { dead_code: true, evaluate: true };
    input: {
        OUT: {
            foo(***REMOVED***;
            switch (1***REMOVED*** {
              case 1:
                x(***REMOVED***;
                if (foo***REMOVED*** break OUT;
                for (var x = 0; x < 10; x++***REMOVED*** {
                    if (x > 5***REMOVED*** break; // this break refers to the for, not to the switch; thus it
                                      // shouldn't ruin our optimization
                    console.log(x***REMOVED***;
              ***REMOVED***
                y(***REMOVED***;
              case 1+1:
                bar(***REMOVED***;
                break;
              default:
                def(***REMOVED***;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    expect: {
        OUT: {
            foo(***REMOVED***;
            x(***REMOVED***;
            if (foo***REMOVED*** break OUT;
            for (var x = 0; x < 10; x++***REMOVED*** {
                if (x > 5***REMOVED*** break;
                console.log(x***REMOVED***;
          ***REMOVED***
            y(***REMOVED***;
            bar(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}

constant_switch_8: {
    options = { dead_code: true, evaluate: true };
    input: {
        OUT: switch (1***REMOVED*** {
          case 1:
            x(***REMOVED***;
            for (;;***REMOVED*** break OUT;
            y(***REMOVED***;
            break;
          case 1+1:
            bar(***REMOVED***;
          default:
            def(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    expect: {
        OUT: {
            x(***REMOVED***;
            for (;;***REMOVED*** break OUT;
            y(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}

constant_switch_9: {
    options = { dead_code: true, evaluate: true };
    input: {
        OUT: switch (1***REMOVED*** {
          case 1:
            x(***REMOVED***;
            for (;;***REMOVED*** if (foo***REMOVED*** break OUT;
            y(***REMOVED***;
          case 1+1:
            bar(***REMOVED***;
          default:
            def(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    expect: {
        OUT: {
            x(***REMOVED***;
            for (;;***REMOVED*** if (foo***REMOVED*** break OUT;
            y(***REMOVED***;
            bar(***REMOVED***;
            def(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}
