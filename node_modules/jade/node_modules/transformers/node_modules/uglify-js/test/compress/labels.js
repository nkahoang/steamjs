labels_1: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        out: {
            if (foo***REMOVED*** break out;
            console.log("bar"***REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        foo || console.log("bar"***REMOVED***;
  ***REMOVED***
}

labels_2: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        out: {
            if (foo***REMOVED*** print("stuff"***REMOVED***;
            else break out;
            console.log("here"***REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        if (foo***REMOVED*** {
            print("stuff"***REMOVED***;
            console.log("here"***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}

labels_3: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        for (var i = 0; i < 5; ++i***REMOVED*** {
            if (i < 3***REMOVED*** continue;
            console.log(i***REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        for (var i = 0; i < 5; ++i***REMOVED***
            i < 3 || console.log(i***REMOVED***;
  ***REMOVED***
}

labels_4: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        out: for (var i = 0; i < 5; ++i***REMOVED*** {
            if (i < 3***REMOVED*** continue out;
            console.log(i***REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        for (var i = 0; i < 5; ++i***REMOVED***
            i < 3 || console.log(i***REMOVED***;
  ***REMOVED***
}

labels_5: {
    options = { if_return: true, conditionals: true, dead_code: true };
    // should keep the break-s in the following
    input: {
        while (foo***REMOVED*** {
            if (bar***REMOVED*** break;
            console.log("foo"***REMOVED***;
      ***REMOVED***
        out: while (foo***REMOVED*** {
            if (bar***REMOVED*** break out;
            console.log("foo"***REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        while (foo***REMOVED*** {
            if (bar***REMOVED*** break;
            console.log("foo"***REMOVED***;
      ***REMOVED***
        out: while (foo***REMOVED*** {
            if (bar***REMOVED*** break out;
            console.log("foo"***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}

labels_6: {
    input: {
        out: break out;
  ***REMOVED***;
    expect: {}
}

labels_7: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
            continue;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}

labels_8: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
            break;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
            break;
      ***REMOVED***
  ***REMOVED***
}

labels_9: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        out: while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
            continue out;
            z(***REMOVED***;
            k(***REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}

labels_10: {
    options = { if_return: true, conditionals: true, dead_code: true };
    input: {
        out: while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
            break out;
            z(***REMOVED***;
            k(***REMOVED***;
      ***REMOVED***
  ***REMOVED***;
    expect: {
        out: while (foo***REMOVED*** {
            x(***REMOVED***;
            y(***REMOVED***;
            break out;
      ***REMOVED***
  ***REMOVED***
}
