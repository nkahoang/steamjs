#! /usr/bin/env node

var U = require("../tools/node"***REMOVED***;
var path = require("path"***REMOVED***;
var fs = require("fs"***REMOVED***;
var assert = require("assert"***REMOVED***;
var sys = require("util"***REMOVED***;

var tests_dir = path.dirname(module.filename***REMOVED***;

run_compress_tests(***REMOVED***;

/* -----[ utils ]----- */

function tmpl(***REMOVED*** {
    return U.string_template.apply(this, arguments***REMOVED***;
}

function log(***REMOVED*** {
    var txt = tmpl.apply(this, arguments***REMOVED***;
    sys.puts(txt***REMOVED***;
}

function log_directory(dir***REMOVED*** {
    log("*** Entering [{dir}]", { dir: dir }***REMOVED***;
}

function log_start_file(file***REMOVED*** {
    log("--- {file}", { file: file }***REMOVED***;
}

function log_test(name***REMOVED*** {
    log("    Running test [{name}]", { name: name }***REMOVED***;
}

function find_test_files(dir***REMOVED*** {
    var files = fs.readdirSync(dir***REMOVED***.filter(function(name***REMOVED***{
        return /\.js$/i.test(name***REMOVED***;
  ***REMOVED******REMOVED***;
    if (process.argv.length > 2***REMOVED*** {
        var x = process.argv.slice(2***REMOVED***;
        files = files.filter(function(f***REMOVED***{
            return x.indexOf(f***REMOVED*** >= 0;
      ***REMOVED******REMOVED***;
  ***REMOVED***
    return files;
}

function test_directory(dir***REMOVED*** {
    return path.resolve(tests_dir, dir***REMOVED***;
}

function as_toplevel(input***REMOVED*** {
    if (input instanceof U.AST_BlockStatement***REMOVED*** input = input.body;
    else if (input instanceof U.AST_Statement***REMOVED*** input = [ input ];
    else throw new Error("Unsupported input syntax"***REMOVED***;
    var toplevel = new U.AST_Toplevel({ body: input }***REMOVED***;
    toplevel.figure_out_scope(***REMOVED***;
    return toplevel;
}

function run_compress_tests(***REMOVED*** {
    var dir = test_directory("compress"***REMOVED***;
    log_directory("compress"***REMOVED***;
    var files = find_test_files(dir***REMOVED***;
    function test_file(file***REMOVED*** {
        log_start_file(file***REMOVED***;
        function test_case(test***REMOVED*** {
            log_test(test.name***REMOVED***;
            var options = U.defaults(test.options, {
                warnings: false
          ***REMOVED******REMOVED***;
            var cmp = new U.Compressor(options, true***REMOVED***;
            var expect = make_code(as_toplevel(test.expect***REMOVED***, false***REMOVED***;
            var input = as_toplevel(test.input***REMOVED***;
            var input_code = make_code(test.input***REMOVED***;
            var output = input.transform(cmp***REMOVED***;
            output.figure_out_scope(***REMOVED***;
            output = make_code(output, false***REMOVED***;
            if (expect != output***REMOVED*** {
                log("!!! failed\n---INPUT---\n{input}\n---OUTPUT---\n{output}\n---EXPECTED---\n{expected}\n\n", {
                    input: input_code,
                    output: output,
                    expected: expect
              ***REMOVED******REMOVED***;
          ***REMOVED***
      ***REMOVED***
        var tests = parse_test(path.resolve(dir, file***REMOVED******REMOVED***;
        for (var i in tests***REMOVED*** if (tests.hasOwnProperty(i***REMOVED******REMOVED*** {
            test_case(tests[i]***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    files.forEach(function(file***REMOVED***{
        test_file(file***REMOVED***;
  ***REMOVED******REMOVED***;
}

function parse_test(file***REMOVED*** {
    var script = fs.readFileSync(file, "utf8"***REMOVED***;
    var ast = U.parse(script, {
        filename: file
  ***REMOVED******REMOVED***;
    var tests = {};
    var tw = new U.TreeWalker(function(node, descend***REMOVED***{
        if (node instanceof U.AST_LabeledStatement
            && tw.parent(***REMOVED*** instanceof U.AST_Toplevel***REMOVED*** {
            var name = node.label.name;
            tests[name] = get_one_test(name, node.body***REMOVED***;
            return true;
      ***REMOVED***
        if (!(node instanceof U.AST_Toplevel***REMOVED******REMOVED*** croak(node***REMOVED***;
  ***REMOVED******REMOVED***;
    ast.walk(tw***REMOVED***;
    return tests;

    function croak(node***REMOVED*** {
        throw new Error(tmpl("Can't understand test file {file} [{line},{col}]\n{code}", {
            file: file,
            line: node.start.line,
            col: node.start.col,
            code: make_code(node, false***REMOVED***
      ***REMOVED******REMOVED******REMOVED***;
  ***REMOVED***

    function get_one_test(name, block***REMOVED*** {
        var test = { name: name, options: {} };
        var tw = new U.TreeWalker(function(node, descend***REMOVED***{
            if (node instanceof U.AST_Assign***REMOVED*** {
                if (!(node.left instanceof U.AST_SymbolRef***REMOVED******REMOVED*** {
                    croak(node***REMOVED***;
              ***REMOVED***
                var name = node.left.name;
                test[name] = evaluate(node.right***REMOVED***;
                return true;
          ***REMOVED***
            if (node instanceof U.AST_LabeledStatement***REMOVED*** {
                assert.ok(
                    node.label.name == "input" || node.label.name == "expect",
                    tmpl("Unsupported label {name} [{line},{col}]", {
                        name: node.label.name,
                        line: node.label.start.line,
                        col: node.label.start.col
                  ***REMOVED******REMOVED***
                ***REMOVED***;
                var stat = node.body;
                if (stat instanceof U.AST_BlockStatement***REMOVED*** {
                    if (stat.body.length == 1***REMOVED*** stat = stat.body[0];
                    else if (stat.body.length == 0***REMOVED*** stat = new U.AST_EmptyStatement(***REMOVED***;
              ***REMOVED***
                test[node.label.name] = stat;
                return true;
          ***REMOVED***
      ***REMOVED******REMOVED***;
        block.walk(tw***REMOVED***;
        return test;
  ***REMOVED***;
}

function make_code(ast, beautify***REMOVED*** {
    if (arguments.length == 1***REMOVED*** beautify = true;
    var stream = U.OutputStream({ beautify: beautify }***REMOVED***;
    ast.print(stream***REMOVED***;
    return stream.get(***REMOVED***;
}

function evaluate(code***REMOVED*** {
    if (code instanceof U.AST_Node***REMOVED***
        code = make_code(code***REMOVED***;
    return new Function("return(" + code + "***REMOVED***"***REMOVED***(***REMOVED***;
}
