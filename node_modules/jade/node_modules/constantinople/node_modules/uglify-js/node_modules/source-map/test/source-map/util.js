/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function'***REMOVED*** {
    var define = require('amdefine'***REMOVED***(module, require***REMOVED***;
}
define(function (require, exports, module***REMOVED*** {

  var util = require('../../lib/source-map/util'***REMOVED***;

  // This is a test mapping which maps functions from two different files
  // (one.js and two.js***REMOVED*** to a minified generated source.
  //
  // Here is one.js:
  //
  //   ONE.foo = function (bar***REMOVED*** {
  //     return baz(bar***REMOVED***;
  // ***REMOVED***;
  //
  // Here is two.js:
  //
  //   TWO.inc = function (n***REMOVED*** {
  //     return n + 1;
  // ***REMOVED***;
  //
  // And here is the generated code (min.js***REMOVED***:
  //
  //   ONE.foo=function(a***REMOVED***{return baz(a***REMOVED***;};
  //   TWO.inc=function(a***REMOVED***{return a+1;};
  exports.testGeneratedCode = " ONE.foo=function(a***REMOVED***{return baz(a***REMOVED***;};\n"+
                              " TWO.inc=function(a***REMOVED***{return a+1;};";
  exports.testMap = {
    version: 3,
    file: 'min.js',
    names: ['bar', 'baz', 'n'],
    sources: ['one.js', 'two.js'],
    sourceRoot: '/the/root',
    mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'
***REMOVED***;
  exports.testMapWithSourcesContent = {
    version: 3,
    file: 'min.js',
    names: ['bar', 'baz', 'n'],
    sources: ['one.js', 'two.js'],
    sourcesContent: [
      ' ONE.foo = function (bar***REMOVED*** {\n' +
      '   return baz(bar***REMOVED***;\n' +
      ' };',
      ' TWO.inc = function (n***REMOVED*** {\n' +
      '   return n + 1;\n' +
      ' };'
    ],
    sourceRoot: '/the/root',
    mappings: 'CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA'
***REMOVED***;
  exports.emptyMap = {
    version: 3,
    file: 'min.js',
    names: [],
    sources: [],
    mappings: ''
***REMOVED***;


  function assertMapping(generatedLine, generatedColumn, originalSource,
                         originalLine, originalColumn, name, map, assert,
                         dontTestGenerated, dontTestOriginal***REMOVED*** {
    if (!dontTestOriginal***REMOVED*** {
      var origMapping = map.originalPositionFor({
        line: generatedLine,
        column: generatedColumn
    ***REMOVED******REMOVED***;
      assert.equal(origMapping.name, name,
                   'Incorrect name, expected ' + JSON.stringify(name***REMOVED***
                   + ', got ' + JSON.stringify(origMapping.name***REMOVED******REMOVED***;
      assert.equal(origMapping.line, originalLine,
                   'Incorrect line, expected ' + JSON.stringify(originalLine***REMOVED***
                   + ', got ' + JSON.stringify(origMapping.line***REMOVED******REMOVED***;
      assert.equal(origMapping.column, originalColumn,
                   'Incorrect column, expected ' + JSON.stringify(originalColumn***REMOVED***
                   + ', got ' + JSON.stringify(origMapping.column***REMOVED******REMOVED***;

      var expectedSource;

      if (originalSource && map.sourceRoot && originalSource.indexOf(map.sourceRoot***REMOVED*** === 0***REMOVED*** {
        expectedSource = originalSource;
    ***REMOVED*** else if (originalSource***REMOVED*** {
        expectedSource = map.sourceRoot
          ? util.join(map.sourceRoot, originalSource***REMOVED***
          : originalSource;
    ***REMOVED*** else {
        expectedSource = null;
    ***REMOVED***

      assert.equal(origMapping.source, expectedSource,
                   'Incorrect source, expected ' + JSON.stringify(expectedSource***REMOVED***
                   + ', got ' + JSON.stringify(origMapping.source***REMOVED******REMOVED***;
  ***REMOVED***

    if (!dontTestGenerated***REMOVED*** {
      var genMapping = map.generatedPositionFor({
        source: originalSource,
        line: originalLine,
        column: originalColumn
    ***REMOVED******REMOVED***;
      assert.equal(genMapping.line, generatedLine,
                   'Incorrect line, expected ' + JSON.stringify(generatedLine***REMOVED***
                   + ', got ' + JSON.stringify(genMapping.line***REMOVED******REMOVED***;
      assert.equal(genMapping.column, generatedColumn,
                   'Incorrect column, expected ' + JSON.stringify(generatedColumn***REMOVED***
                   + ', got ' + JSON.stringify(genMapping.column***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***
  exports.assertMapping = assertMapping;

  function assertEqualMaps(assert, actualMap, expectedMap***REMOVED*** {
    assert.equal(actualMap.version, expectedMap.version, "version mismatch"***REMOVED***;
    assert.equal(actualMap.file, expectedMap.file, "file mismatch"***REMOVED***;
    assert.equal(actualMap.names.length,
                 expectedMap.names.length,
                 "names length mismatch: " +
                   actualMap.names.join(", "***REMOVED*** + " != " + expectedMap.names.join(", "***REMOVED******REMOVED***;
    for (var i = 0; i < actualMap.names.length; i++***REMOVED*** {
      assert.equal(actualMap.names[i],
                   expectedMap.names[i],
                   "names[" + i + "] mismatch: " +
                     actualMap.names.join(", "***REMOVED*** + " != " + expectedMap.names.join(", "***REMOVED******REMOVED***;
  ***REMOVED***
    assert.equal(actualMap.sources.length,
                 expectedMap.sources.length,
                 "sources length mismatch: " +
                   actualMap.sources.join(", "***REMOVED*** + " != " + expectedMap.sources.join(", "***REMOVED******REMOVED***;
    for (var i = 0; i < actualMap.sources.length; i++***REMOVED*** {
      assert.equal(actualMap.sources[i],
                   expectedMap.sources[i],
                   "sources[" + i + "] length mismatch: " +
                   actualMap.sources.join(", "***REMOVED*** + " != " + expectedMap.sources.join(", "***REMOVED******REMOVED***;
  ***REMOVED***
    assert.equal(actualMap.sourceRoot,
                 expectedMap.sourceRoot,
                 "sourceRoot mismatch: " +
                   actualMap.sourceRoot + " != " + expectedMap.sourceRoot***REMOVED***;
    assert.equal(actualMap.mappings, expectedMap.mappings,
                 "mappings mismatch:\nActual:   " + actualMap.mappings + "\nExpected: " + expectedMap.mappings***REMOVED***;
    if (actualMap.sourcesContent***REMOVED*** {
      assert.equal(actualMap.sourcesContent.length,
                   expectedMap.sourcesContent.length,
                   "sourcesContent length mismatch"***REMOVED***;
      for (var i = 0; i < actualMap.sourcesContent.length; i++***REMOVED*** {
        assert.equal(actualMap.sourcesContent[i],
                     expectedMap.sourcesContent[i],
                     "sourcesContent[" + i + "] mismatch"***REMOVED***;
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  exports.assertEqualMaps = assertEqualMaps;

}***REMOVED***;
