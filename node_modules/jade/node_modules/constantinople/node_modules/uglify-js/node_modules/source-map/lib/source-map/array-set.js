/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function'***REMOVED*** {
    var define = require('amdefine'***REMOVED***(module, require***REMOVED***;
}
define(function (require, exports, module***REMOVED*** {

  var util = require('./util'***REMOVED***;

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1***REMOVED***, testing for membership is O(1***REMOVED***, and finding the index of an
   * element is O(1***REMOVED***. Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet(***REMOVED*** {
    this._array = [];
    this._set = {};
***REMOVED***

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates***REMOVED*** {
    var set = new ArraySet(***REMOVED***;
    for (var i = 0, len = aArray.length; i < len; i++***REMOVED*** {
      set.add(aArray[i], aAllowDuplicates***REMOVED***;
  ***REMOVED***
    return set;
***REMOVED***;

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates***REMOVED*** {
    var isDuplicate = this.has(aStr***REMOVED***;
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates***REMOVED*** {
      this._array.push(aStr***REMOVED***;
  ***REMOVED***
    if (!isDuplicate***REMOVED*** {
      this._set[util.toSetString(aStr***REMOVED***] = idx;
  ***REMOVED***
***REMOVED***;

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr***REMOVED*** {
    return Object.prototype.hasOwnProperty.call(this._set,
                                                util.toSetString(aStr***REMOVED******REMOVED***;
***REMOVED***;

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr***REMOVED*** {
    if (this.has(aStr***REMOVED******REMOVED*** {
      return this._set[util.toSetString(aStr***REMOVED***];
  ***REMOVED***
    throw new Error('"' + aStr + '" is not in the set.'***REMOVED***;
***REMOVED***;

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx***REMOVED*** {
    if (aIdx >= 0 && aIdx < this._array.length***REMOVED*** {
      return this._array[aIdx];
  ***REMOVED***
    throw new Error('No element indexed by ' + aIdx***REMOVED***;
***REMOVED***;

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf***REMOVED***. Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray(***REMOVED*** {
    return this._array.slice(***REMOVED***;
***REMOVED***;

  exports.ArraySet = ArraySet;

}***REMOVED***;
