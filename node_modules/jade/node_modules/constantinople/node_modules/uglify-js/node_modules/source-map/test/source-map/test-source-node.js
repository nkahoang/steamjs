/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
if (typeof define !== 'function'***REMOVED*** {
    var define = require('amdefine'***REMOVED***(module, require***REMOVED***;
}
define(function (require, exports, module***REMOVED*** {

  var SourceMapGenerator = require('../../lib/source-map/source-map-generator'***REMOVED***.SourceMapGenerator;
  var SourceMapConsumer = require('../../lib/source-map/source-map-consumer'***REMOVED***.SourceMapConsumer;
  var SourceNode = require('../../lib/source-map/source-node'***REMOVED***.SourceNode;

  exports['test .add(***REMOVED***'] = function (assert, util***REMOVED*** {
    var node = new SourceNode(null, null, null***REMOVED***;

    // Adding a string works.
    node.add('function noop(***REMOVED*** {}'***REMOVED***;

    // Adding another source node works.
    node.add(new SourceNode(null, null, null***REMOVED******REMOVED***;

    // Adding an array works.
    node.add(['function foo(***REMOVED*** {',
              new SourceNode(null, null, null,
                             'return 10;'***REMOVED***,
              '}']***REMOVED***;

    // Adding other stuff doesn't.
    assert.throws(function (***REMOVED*** {
      node.add({}***REMOVED***;
  ***REMOVED******REMOVED***;
    assert.throws(function (***REMOVED*** {
      node.add(function (***REMOVED*** {}***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test .prepend(***REMOVED***'] = function (assert, util***REMOVED*** {
    var node = new SourceNode(null, null, null***REMOVED***;

    // Prepending a string works.
    node.prepend('function noop(***REMOVED*** {}'***REMOVED***;
    assert.equal(node.children[0], 'function noop(***REMOVED*** {}'***REMOVED***;
    assert.equal(node.children.length, 1***REMOVED***;

    // Prepending another source node works.
    node.prepend(new SourceNode(null, null, null***REMOVED******REMOVED***;
    assert.equal(node.children[0], ''***REMOVED***;
    assert.equal(node.children[1], 'function noop(***REMOVED*** {}'***REMOVED***;
    assert.equal(node.children.length, 2***REMOVED***;

    // Prepending an array works.
    node.prepend(['function foo(***REMOVED*** {',
              new SourceNode(null, null, null,
                             'return 10;'***REMOVED***,
              '}']***REMOVED***;
    assert.equal(node.children[0], 'function foo(***REMOVED*** {'***REMOVED***;
    assert.equal(node.children[1], 'return 10;'***REMOVED***;
    assert.equal(node.children[2], '}'***REMOVED***;
    assert.equal(node.children[3], ''***REMOVED***;
    assert.equal(node.children[4], 'function noop(***REMOVED*** {}'***REMOVED***;
    assert.equal(node.children.length, 5***REMOVED***;

    // Prepending other stuff doesn't.
    assert.throws(function (***REMOVED*** {
      node.prepend({}***REMOVED***;
  ***REMOVED******REMOVED***;
    assert.throws(function (***REMOVED*** {
      node.prepend(function (***REMOVED*** {}***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test .toString(***REMOVED***'] = function (assert, util***REMOVED*** {
    assert.equal((new SourceNode(null, null, null,
                                 ['function foo(***REMOVED*** {',
                                  new SourceNode(null, null, null, 'return 10;'***REMOVED***,
                                  '}']***REMOVED******REMOVED***.toString(***REMOVED***,
                 'function foo(***REMOVED*** {return 10;}'***REMOVED***;
***REMOVED***;

  exports['test .join(***REMOVED***'] = function (assert, util***REMOVED*** {
    assert.equal((new SourceNode(null, null, null,
                                 ['a', 'b', 'c', 'd']***REMOVED******REMOVED***.join(', '***REMOVED***.toString(***REMOVED***,
                 'a, b, c, d'***REMOVED***;
***REMOVED***;

  exports['test .walk(***REMOVED***'] = function (assert, util***REMOVED*** {
    var node = new SourceNode(null, null, null,
                              ['(function (***REMOVED*** {\n',
                               '  ', new SourceNode(1, 0, 'a.js', ['someCall(***REMOVED***']***REMOVED***, ';\n',
                               '  ', new SourceNode(2, 0, 'b.js', ['if (foo***REMOVED*** bar(***REMOVED***']***REMOVED***, ';\n',
                               '}(***REMOVED******REMOVED***;']***REMOVED***;
    var expected = [
      { str: '(function (***REMOVED*** {\n', source: null,   line: null, column: null },
      { str: '  ',               source: null,   line: null, column: null },
      { str: 'someCall(***REMOVED***',       source: 'a.js', line: 1,    column: 0  ***REMOVED***,
      { str: ';\n',              source: null,   line: null, column: null },
      { str: '  ',               source: null,   line: null, column: null },
      { str: 'if (foo***REMOVED*** bar(***REMOVED***',   source: 'b.js', line: 2,    column: 0  ***REMOVED***,
      { str: ';\n',              source: null,   line: null, column: null },
      { str: '}(***REMOVED******REMOVED***;',            source: null,   line: null, column: null },
    ];
    var i = 0;
    node.walk(function (chunk, loc***REMOVED*** {
      assert.equal(expected[i].str, chunk***REMOVED***;
      assert.equal(expected[i].source, loc.source***REMOVED***;
      assert.equal(expected[i].line, loc.line***REMOVED***;
      assert.equal(expected[i].column, loc.column***REMOVED***;
      i++;
  ***REMOVED******REMOVED***;
***REMOVED***;

  exports['test .replaceRight'] = function (assert, util***REMOVED*** {
    var node;

    // Not nested
    node = new SourceNode(null, null, null, 'hello world'***REMOVED***;
    node.replaceRight(/world/, 'universe'***REMOVED***;
    assert.equal(node.toString(***REMOVED***, 'hello universe'***REMOVED***;

    // Nested
    node = new SourceNode(null, null, null,
                          [new SourceNode(null, null, null, 'hey sexy mama, '***REMOVED***,
                           new SourceNode(null, null, null, 'want to kill all humans?'***REMOVED***]***REMOVED***;
    node.replaceRight(/kill all humans/, 'watch Futurama'***REMOVED***;
    assert.equal(node.toString(***REMOVED***, 'hey sexy mama, want to watch Futurama?'***REMOVED***;
***REMOVED***;

  exports['test .toStringWithSourceMap(***REMOVED***'] = function (assert, util***REMOVED*** {
    var node = new SourceNode(null, null, null,
                              ['(function (***REMOVED*** {\n',
                               '  ',
                                 new SourceNode(1, 0, 'a.js', 'someCall', 'originalCall'***REMOVED***,
                                 new SourceNode(1, 8, 'a.js', '(***REMOVED***'***REMOVED***,
                                 ';\n',
                               '  ', new SourceNode(2, 0, 'b.js', ['if (foo***REMOVED*** bar(***REMOVED***']***REMOVED***, ';\n',
                               '}(***REMOVED******REMOVED***;']***REMOVED***;
    var map = node.toStringWithSourceMap({
      file: 'foo.js'
  ***REMOVED******REMOVED***.map;
    var mapWithoutOptions = node.toStringWithSourceMap(***REMOVED***.map;

    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator'***REMOVED***;
    assert.ok(mapWithoutOptions instanceof SourceMapGenerator, 'mapWithoutOptions instanceof SourceMapGenerator'***REMOVED***;
    mapWithoutOptions._file = 'foo.js';
    util.assertEqualMaps(assert, map.toJSON(***REMOVED***, mapWithoutOptions.toJSON(***REMOVED******REMOVED***;

    map = new SourceMapConsumer(map.toString(***REMOVED******REMOVED***;

    var actual;

    actual = map.originalPositionFor({
      line: 1,
      column: 4
  ***REMOVED******REMOVED***;
    assert.equal(actual.source, null***REMOVED***;
    assert.equal(actual.line, null***REMOVED***;
    assert.equal(actual.column, null***REMOVED***;

    actual = map.originalPositionFor({
      line: 2,
      column: 2
  ***REMOVED******REMOVED***;
    assert.equal(actual.source, 'a.js'***REMOVED***;
    assert.equal(actual.line, 1***REMOVED***;
    assert.equal(actual.column, 0***REMOVED***;
    assert.equal(actual.name, 'originalCall'***REMOVED***;

    actual = map.originalPositionFor({
      line: 3,
      column: 2
  ***REMOVED******REMOVED***;
    assert.equal(actual.source, 'b.js'***REMOVED***;
    assert.equal(actual.line, 2***REMOVED***;
    assert.equal(actual.column, 0***REMOVED***;

    actual = map.originalPositionFor({
      line: 3,
      column: 16
  ***REMOVED******REMOVED***;
    assert.equal(actual.source, null***REMOVED***;
    assert.equal(actual.line, null***REMOVED***;
    assert.equal(actual.column, null***REMOVED***;

    actual = map.originalPositionFor({
      line: 4,
      column: 2
  ***REMOVED******REMOVED***;
    assert.equal(actual.source, null***REMOVED***;
    assert.equal(actual.line, null***REMOVED***;
    assert.equal(actual.column, null***REMOVED***;
***REMOVED***;

  exports['test .fromStringWithSourceMap(***REMOVED***'] = function (assert, util***REMOVED*** {
    var node = SourceNode.fromStringWithSourceMap(
                              util.testGeneratedCode,
                              new SourceMapConsumer(util.testMap***REMOVED******REMOVED***;

    var result = node.toStringWithSourceMap({
      file: 'min.js'
  ***REMOVED******REMOVED***;
    var map = result.map;
    var code = result.code;

    assert.equal(code, util.testGeneratedCode***REMOVED***;
    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator'***REMOVED***;
    map = map.toJSON(***REMOVED***;
    assert.equal(map.version, util.testMap.version***REMOVED***;
    assert.equal(map.file, util.testMap.file***REMOVED***;
    assert.equal(map.mappings, util.testMap.mappings***REMOVED***;
***REMOVED***;

  exports['test .fromStringWithSourceMap(***REMOVED*** empty map'] = function (assert, util***REMOVED*** {
    var node = SourceNode.fromStringWithSourceMap(
                              util.testGeneratedCode,
                              new SourceMapConsumer(util.emptyMap***REMOVED******REMOVED***;
    var result = node.toStringWithSourceMap({
      file: 'min.js'
  ***REMOVED******REMOVED***;
    var map = result.map;
    var code = result.code;

    assert.equal(code, util.testGeneratedCode***REMOVED***;
    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator'***REMOVED***;
    map = map.toJSON(***REMOVED***;
    assert.equal(map.version, util.emptyMap.version***REMOVED***;
    assert.equal(map.file, util.emptyMap.file***REMOVED***;
    assert.equal(map.mappings.length, util.emptyMap.mappings.length***REMOVED***;
    assert.equal(map.mappings, util.emptyMap.mappings***REMOVED***;
***REMOVED***;

  exports['test .fromStringWithSourceMap(***REMOVED*** complex version'] = function (assert, util***REMOVED*** {
    var input = new SourceNode(null, null, null, [
      "(function(***REMOVED*** {\n",
        "  var Test = {};\n",
        "  ", new SourceNode(1, 0, "a.js", "Test.A = { value: 1234 };\n"***REMOVED***,
        "  ", new SourceNode(2, 0, "a.js", "Test.A.x = 'xyz';"***REMOVED***, "\n",
        "}(***REMOVED******REMOVED***;\n",
        "/* Generated Source */"]***REMOVED***;
    input = input.toStringWithSourceMap({
      file: 'foo.js'
  ***REMOVED******REMOVED***;

    var node = SourceNode.fromStringWithSourceMap(
                              input.code,
                              new SourceMapConsumer(input.map.toString(***REMOVED******REMOVED******REMOVED***;

    var result = node.toStringWithSourceMap({
      file: 'foo.js'
  ***REMOVED******REMOVED***;
    var map = result.map;
    var code = result.code;

    assert.equal(code, input.code***REMOVED***;
    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator'***REMOVED***;
    map = map.toJSON(***REMOVED***;
    var inputMap = input.map.toJSON(***REMOVED***;
    util.assertEqualMaps(assert, map, inputMap***REMOVED***;
***REMOVED***;

  exports['test .toStringWithSourceMap(***REMOVED*** merging duplicate mappings'] = function (assert, util***REMOVED*** {
    var input = new SourceNode(null, null, null, [
      new SourceNode(1, 0, "a.js", "(function"***REMOVED***,
      new SourceNode(1, 0, "a.js", "(***REMOVED*** {\n"***REMOVED***,
      "  ",
      new SourceNode(1, 0, "a.js", "var Test = "***REMOVED***,
      new SourceNode(1, 0, "b.js", "{};\n"***REMOVED***,
      new SourceNode(2, 0, "b.js", "Test"***REMOVED***,
      new SourceNode(2, 0, "b.js", ".A", "A"***REMOVED***,
      new SourceNode(2, 20, "b.js", " = { value: ", "A"***REMOVED***,
      "1234",
      new SourceNode(2, 40, "b.js", " };\n", "A"***REMOVED***,
      "}(***REMOVED******REMOVED***;\n",
      "/* Generated Source */"
    ]***REMOVED***;
    input = input.toStringWithSourceMap({
      file: 'foo.js'
  ***REMOVED******REMOVED***;

    var correctMap = new SourceMapGenerator({
      file: 'foo.js'
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 1, column: 0 },
      source: 'a.js',
      original: { line: 1, column: 0 }
  ***REMOVED******REMOVED***;
    // Here is no need for a empty mapping,
    // because mappings ends at eol
    correctMap.addMapping({
      generated: { line: 2, column: 2 },
      source: 'a.js',
      original: { line: 1, column: 0 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 2, column: 13 },
      source: 'b.js',
      original: { line: 1, column: 0 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 3, column: 0 },
      source: 'b.js',
      original: { line: 2, column: 0 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 3, column: 4 },
      source: 'b.js',
      name: 'A',
      original: { line: 2, column: 0 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 3, column: 6 },
      source: 'b.js',
      name: 'A',
      original: { line: 2, column: 20 }
  ***REMOVED******REMOVED***;
    // This empty mapping is required,
    // because there is a hole in the middle of the line
    correctMap.addMapping({
      generated: { line: 3, column: 18 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 3, column: 22 },
      source: 'b.js',
      name: 'A',
      original: { line: 2, column: 40 }
  ***REMOVED******REMOVED***;
    // Here is no need for a empty mapping,
    // because mappings ends at eol

    var inputMap = input.map.toJSON(***REMOVED***;
    correctMap = correctMap.toJSON(***REMOVED***;
    util.assertEqualMaps(assert, inputMap, correctMap***REMOVED***;
***REMOVED***;

  exports['test .toStringWithSourceMap(***REMOVED*** multi-line SourceNodes'] = function (assert, util***REMOVED*** {
    var input = new SourceNode(null, null, null, [
      new SourceNode(1, 0, "a.js", "(function(***REMOVED*** {\nvar nextLine = 1;\nanotherLine(***REMOVED***;\n"***REMOVED***,
      new SourceNode(2, 2, "b.js", "Test.call(this, 123***REMOVED***;\n"***REMOVED***,
      new SourceNode(2, 2, "b.js", "this['stuff'] = 'v';\n"***REMOVED***,
      new SourceNode(2, 2, "b.js", "anotherLine(***REMOVED***;\n"***REMOVED***,
      "/*\nGenerated\nSource\n*/\n",
      new SourceNode(3, 4, "c.js", "anotherLine(***REMOVED***;\n"***REMOVED***,
      "/*\nGenerated\nSource\n*/"
    ]***REMOVED***;
    input = input.toStringWithSourceMap({
      file: 'foo.js'
  ***REMOVED******REMOVED***;

    var correctMap = new SourceMapGenerator({
      file: 'foo.js'
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 1, column: 0 },
      source: 'a.js',
      original: { line: 1, column: 0 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 2, column: 0 },
      source: 'a.js',
      original: { line: 1, column: 0 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 3, column: 0 },
      source: 'a.js',
      original: { line: 1, column: 0 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 4, column: 0 },
      source: 'b.js',
      original: { line: 2, column: 2 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 5, column: 0 },
      source: 'b.js',
      original: { line: 2, column: 2 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 6, column: 0 },
      source: 'b.js',
      original: { line: 2, column: 2 }
  ***REMOVED******REMOVED***;
    correctMap.addMapping({
      generated: { line: 11, column: 0 },
      source: 'c.js',
      original: { line: 3, column: 4 }
  ***REMOVED******REMOVED***;

    var inputMap = input.map.toJSON(***REMOVED***;
    correctMap = correctMap.toJSON(***REMOVED***;
    util.assertEqualMaps(assert, inputMap, correctMap***REMOVED***;
***REMOVED***;

  exports['test setSourceContent with toStringWithSourceMap'] = function (assert, util***REMOVED*** {
    var aNode = new SourceNode(1, 1, 'a.js', 'a'***REMOVED***;
    aNode.setSourceContent('a.js', 'someContent'***REMOVED***;
    var node = new SourceNode(null, null, null,
                              ['(function (***REMOVED*** {\n',
                               '  ', aNode,
                               '  ', new SourceNode(1, 1, 'b.js', 'b'***REMOVED***,
                               '}(***REMOVED******REMOVED***;']***REMOVED***;
    node.setSourceContent('b.js', 'otherContent'***REMOVED***;
    var map = node.toStringWithSourceMap({
      file: 'foo.js'
  ***REMOVED******REMOVED***.map;

    assert.ok(map instanceof SourceMapGenerator, 'map instanceof SourceMapGenerator'***REMOVED***;
    map = new SourceMapConsumer(map.toString(***REMOVED******REMOVED***;

    assert.equal(map.sources.length, 2***REMOVED***;
    assert.equal(map.sources[0], 'a.js'***REMOVED***;
    assert.equal(map.sources[1], 'b.js'***REMOVED***;
    assert.equal(map.sourcesContent.length, 2***REMOVED***;
    assert.equal(map.sourcesContent[0], 'someContent'***REMOVED***;
    assert.equal(map.sourcesContent[1], 'otherContent'***REMOVED***;
***REMOVED***;

  exports['test walkSourceContents'] = function (assert, util***REMOVED*** {
    var aNode = new SourceNode(1, 1, 'a.js', 'a'***REMOVED***;
    aNode.setSourceContent('a.js', 'someContent'***REMOVED***;
    var node = new SourceNode(null, null, null,
                              ['(function (***REMOVED*** {\n',
                               '  ', aNode,
                               '  ', new SourceNode(1, 1, 'b.js', 'b'***REMOVED***,
                               '}(***REMOVED******REMOVED***;']***REMOVED***;
    node.setSourceContent('b.js', 'otherContent'***REMOVED***;
    var results = [];
    node.walkSourceContents(function (sourceFile, sourceContent***REMOVED*** {
      results.push([sourceFile, sourceContent]***REMOVED***;
  ***REMOVED******REMOVED***;
    assert.equal(results.length, 2***REMOVED***;
    assert.equal(results[0][0], 'a.js'***REMOVED***;
    assert.equal(results[0][1], 'someContent'***REMOVED***;
    assert.equal(results[1][0], 'b.js'***REMOVED***;
    assert.equal(results[1][1], 'otherContent'***REMOVED***;
***REMOVED***;
}***REMOVED***;
