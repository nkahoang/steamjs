#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs'***REMOVED***
  , program = require('commander'***REMOVED***
  , ***REMOVED***
  , basename = path.basename
  , dirname = path.dirname
  , resolve = path.resolve
  , exists = fs.existsSync || path.existsSync
  , join = path.join
  , monocle = require('monocle'***REMOVED***(***REMOVED***
  , mkdirp = require('mkdirp'***REMOVED***
  , jade = require('../'***REMOVED***;

// jade options

var options = {};

// options

program
  .version(require('../package.json'***REMOVED***.version***REMOVED***
  .usage('[options] [dir|file ...]'***REMOVED***
  .option('-O, --obj <str>', 'javascript options object'***REMOVED***
  .option('-o, --out <dir>', 'output the compiled html to <dir>'***REMOVED***
  .option('-p, --path <path>', 'filename used to resolve includes'***REMOVED***
  .option('-P, --pretty', 'compile pretty html output'***REMOVED***
  .option('-c, --client', 'compile function for client-side runtime.js'***REMOVED***
  .option('-D, --no-debug', 'compile without debugging (smaller functions***REMOVED***'***REMOVED***
  .option('-w, --watch', 'watch files for changes and automatically re-render'***REMOVED***

program.on('--help', function(***REMOVED***{
  console.log('  Examples:'***REMOVED***;
  console.log(''***REMOVED***;
  console.log('    # translate jade the templates dir'***REMOVED***;
  console.log('    $ jade templates'***REMOVED***;
  console.log(''***REMOVED***;
  console.log('    # create {foo,bar}.html'***REMOVED***;
  console.log('    $ jade {foo,bar}.jade'***REMOVED***;
  console.log(''***REMOVED***;
  console.log('    # jade over stdio'***REMOVED***;
  console.log('    $ jade < my.jade > my.html'***REMOVED***;
  console.log(''***REMOVED***;
  console.log('    # jade over stdio'***REMOVED***;
  console.log('    $ echo \'h1 Jade!\' | jade'***REMOVED***;
  console.log(''***REMOVED***;
  console.log('    # foo, bar dirs rendering to /tmp'***REMOVED***;
  console.log('    $ jade foo bar --out /tmp '***REMOVED***;
  console.log(''***REMOVED***;
}***REMOVED***;

program.parse(process.argv***REMOVED***;

// options given, parse them

if (program.obj***REMOVED*** {
  if (exists(program.obj***REMOVED******REMOVED*** {
    options = JSON.parse(fs.readFileSync(program.obj***REMOVED******REMOVED***;
***REMOVED*** else {
    options = eval('(' + program.obj + '***REMOVED***'***REMOVED***;
***REMOVED***
}

// --filename

if (program.path***REMOVED*** options.filename = program.path;

// --no-debug

options.compileDebug = program.debug;

// --client

options.client = program.client;

// --pretty

options.pretty = program.pretty;

// --watch

options.watch = program.watch;

// left-over args are file paths

var files = program.args;

// compile files

if (files.length***REMOVED*** {
  console.log(***REMOVED***;
  files.forEach(renderFile***REMOVED***;
  if (options.watch***REMOVED*** {
    monocle.watchFiles({
      files: files,
      listener: function(file***REMOVED*** {
        renderFile(file.absolutePath***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED***
  process.on('exit', function (***REMOVED*** {
    console.log(***REMOVED***;
***REMOVED******REMOVED***;
// stdio
} else {
  stdin(***REMOVED***;
}

/**
 * Compile from stdin.
 */

function stdin(***REMOVED*** {
  var buf = '';
  process.stdin.setEncoding('utf8'***REMOVED***;
  process.stdin.on('data', function(chunk***REMOVED***{ buf += chunk; }***REMOVED***;
  process.stdin.on('end', function(***REMOVED***{
    var output;
    if (options.client***REMOVED*** {
      output = jade.compileClient(buf, options***REMOVED***;
  ***REMOVED*** else {
      var fn = jade.compile(buf, options***REMOVED***;
      var output = fn(options***REMOVED***;
  ***REMOVED***
    process.stdout.write(output***REMOVED***;
***REMOVED******REMOVED***.resume(***REMOVED***;
  
  process.on('SIGINT', function(***REMOVED*** {
    process.stdout.write('\n'***REMOVED***;
    process.stdin.emit('end'***REMOVED***;
    process.stdout.write('\n'***REMOVED***;
    process.exit(***REMOVED***;
***REMOVED******REMOVED***
}

/**
 * Process the given path, compiling the jade files found.
 * Always walk the subdirectories.
 */

function renderFile(path***REMOVED*** {
  var re = /\.jade$/;
  fs.lstat(path, function(err, stat***REMOVED*** {
    if (err***REMOVED*** throw err;
    // Found jade file
    if (stat.isFile(***REMOVED*** && re.test(path***REMOVED******REMOVED*** {
      fs.readFile(path, 'utf8', function(err, str***REMOVED***{
        if (err***REMOVED*** throw err;
        options.filename = path;
        var fn = options.client ? jade.compileClient(str, options***REMOVED*** : jade.compile(str, options***REMOVED***;
        var extname = options.client ? '.js' : '.html';
        path = path.replace(re, extname***REMOVED***;
        if (program.out***REMOVED*** path = join(program.out, basename(path***REMOVED******REMOVED***;
        var dir = resolve(dirname(path***REMOVED******REMOVED***;
        mkdirp(dir, 0755, function(err***REMOVED***{
          if (err***REMOVED*** throw err;
          try {
            var output = options.client ? fn : fn(options***REMOVED***;
            fs.writeFile(path, output, function(err***REMOVED***{
              if (err***REMOVED*** throw err;
              console.log('  \033[90mrendered \033[36m%s\033[0m', path***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED*** catch (e***REMOVED*** {
            if (options.watch***REMOVED*** {
              console.error(e.stack || e.message || e***REMOVED***;
          ***REMOVED*** else {
              throw e
          ***REMOVED***
        ***REMOVED***
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
    // Found directory
  ***REMOVED*** else if (stat.isDirectory(***REMOVED******REMOVED*** {
      fs.readdir(path, function(err, files***REMOVED*** {
        if (err***REMOVED*** throw err;
        files.map(function(filename***REMOVED*** {
          return path + '/' + filename;
      ***REMOVED******REMOVED***.forEach(renderFile***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;
}
