module.exports = ForeverAgent
ForeverAgent.SSL = ForeverAgentSSL

var util = require('util'***REMOVED***
  , Agent = require('http'***REMOVED***.Agent
  , net = require('net'***REMOVED***
  , tls = require('tls'***REMOVED***
  , AgentSSL = require('https'***REMOVED***.Agent

function ForeverAgent(options***REMOVED*** {
  var self = this
  self.options = options || {}
  self.requests = {}
  self.sockets = {}
  self.freeSockets = {}
  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets
  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets
  self.on('free', function(socket, host, port***REMOVED*** {
    var name = host + ':' + port
    if (self.requests[name] && self.requests[name].length***REMOVED*** {
      self.requests[name].shift(***REMOVED***.onSocket(socket***REMOVED***
  ***REMOVED*** else if (self.sockets[name].length < self.minSockets***REMOVED*** {
      if (!self.freeSockets[name]***REMOVED*** self.freeSockets[name] = []
      self.freeSockets[name].push(socket***REMOVED***
      
      // if an error happens while we don't use the socket anyway, meh, throw the socket away
      var onIdleError = function(***REMOVED*** {
        socket.destroy(***REMOVED***
    ***REMOVED***
      socket._onIdleError = onIdleError
      socket.on('error', onIdleError***REMOVED***
  ***REMOVED*** else {
      // If there are no pending requests just destroy the
      // socket and it will get removed from the pool. This
      // gets us out of timeout issues and allows us to
      // default to Connection:keep-alive.
      socket.destroy(***REMOVED***
  ***REMOVED***
***REMOVED******REMOVED***

}
util.inherits(ForeverAgent, Agent***REMOVED***

ForeverAgent.defaultMinSockets = 5


ForeverAgent.prototype.createConnection = net.createConnection
ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest
ForeverAgent.prototype.addRequest = function(req, host, port***REMOVED*** {
  var name = host + ':' + port
  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault***REMOVED*** {
    var idleSocket = this.freeSockets[name].pop(***REMOVED***
    idleSocket.removeListener('error', idleSocket._onIdleError***REMOVED***
    delete idleSocket._onIdleError
    req._reusedSocket = true
    req.onSocket(idleSocket***REMOVED***
***REMOVED*** else {
    this.addRequestNoreuse(req, host, port***REMOVED***
***REMOVED***
}

ForeverAgent.prototype.removeSocket = function(s, name, host, port***REMOVED*** {
  if (this.sockets[name]***REMOVED*** {
    var index = this.sockets[name].indexOf(s***REMOVED***
    if (index !== -1***REMOVED*** {
      this.sockets[name].splice(index, 1***REMOVED***
  ***REMOVED***
***REMOVED*** else if (this.sockets[name] && this.sockets[name].length === 0***REMOVED*** {
    // don't leak
    delete this.sockets[name]
    delete this.requests[name]
***REMOVED***
  
  if (this.freeSockets[name]***REMOVED*** {
    var index = this.freeSockets[name].indexOf(s***REMOVED***
    if (index !== -1***REMOVED*** {
      this.freeSockets[name].splice(index, 1***REMOVED***
      if (this.freeSockets[name].length === 0***REMOVED*** {
        delete this.freeSockets[name]
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  if (this.requests[name] && this.requests[name].length***REMOVED*** {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(name, host, port***REMOVED***.emit('free'***REMOVED***
***REMOVED***
}

function ForeverAgentSSL (options***REMOVED*** {
  ForeverAgent.call(this, options***REMOVED***
}
util.inherits(ForeverAgentSSL, ForeverAgent***REMOVED***

ForeverAgentSSL.prototype.createConnection = createConnectionSSL
ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest

function createConnectionSSL (port, host, options***REMOVED*** {
  if (typeof port === 'object'***REMOVED*** {
    options = port;
***REMOVED*** else if (typeof host === 'object'***REMOVED*** {
    options = host;
***REMOVED*** else if (typeof options === 'object'***REMOVED*** {
    options = options;
***REMOVED*** else {
    options = {};
***REMOVED***

  if (typeof port === 'number'***REMOVED*** {
    options.port = port;
***REMOVED***

  if (typeof host === 'string'***REMOVED*** {
    options.host = host;
***REMOVED***

  return tls.connect(options***REMOVED***;
}
