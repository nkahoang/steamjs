var util = require('util'***REMOVED***;
var Stream = require('stream'***REMOVED***.Stream;
var DelayedStream = require('delayed-stream'***REMOVED***;

module.exports = CombinedStream;
function CombinedStream(***REMOVED*** {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
}
util.inherits(CombinedStream, Stream***REMOVED***;

CombinedStream.create = function(options***REMOVED*** {
  var combinedStream = new this(***REMOVED***;

  options = options || {};
  for (var option in options***REMOVED*** {
    combinedStream[option] = options[option];
***REMOVED***

  return combinedStream;
};

CombinedStream.isStreamLike = function(stream***REMOVED*** {
  return (typeof stream !== 'function'***REMOVED***
    && (typeof stream !== 'string'***REMOVED***
    && (typeof stream !== 'boolean'***REMOVED***    
    && (typeof stream !== 'number'***REMOVED***
    && (!Buffer.isBuffer(stream***REMOVED******REMOVED***;
};

CombinedStream.prototype.append = function(stream***REMOVED*** {
  var isStreamLike = CombinedStream.isStreamLike(stream***REMOVED***;

  if (isStreamLike***REMOVED*** {
    if (!(stream instanceof DelayedStream***REMOVED******REMOVED*** {
      stream.on('data', this._checkDataSize.bind(this***REMOVED******REMOVED***;

      stream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
    ***REMOVED******REMOVED***;
  ***REMOVED***

    this._handleErrors(stream***REMOVED***;

    if (this.pauseStreams***REMOVED*** {
      stream.pause(***REMOVED***;
  ***REMOVED***
***REMOVED***

  this._streams.push(stream***REMOVED***;
  return this;
};

CombinedStream.prototype.pipe = function(dest, options***REMOVED*** {
  Stream.prototype.pipe.call(this, dest, options***REMOVED***;
  this.resume(***REMOVED***;
};

CombinedStream.prototype._getNext = function(***REMOVED*** {
  this._currentStream = null;
  var stream = this._streams.shift(***REMOVED***;


  if (typeof stream == 'undefined'***REMOVED*** {
    this.end(***REMOVED***;
    return;
***REMOVED***

  if (typeof stream !== 'function'***REMOVED*** {
    this._pipeNext(stream***REMOVED***;
    return;
***REMOVED***

  var getStream = stream;
  getStream(function(stream***REMOVED*** {
    var isStreamLike = CombinedStream.isStreamLike(stream***REMOVED***;
    if (isStreamLike***REMOVED*** {
      stream.on('data', this._checkDataSize.bind(this***REMOVED******REMOVED***;
      this._handleErrors(stream***REMOVED***;
  ***REMOVED***

    this._pipeNext(stream***REMOVED***;
***REMOVED***.bind(this***REMOVED******REMOVED***;
};

CombinedStream.prototype._pipeNext = function(stream***REMOVED*** {
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream***REMOVED***;
  if (isStreamLike***REMOVED*** {
    stream.on('end', this._getNext.bind(this***REMOVED******REMOVED***
    stream.pipe(this, {end: false}***REMOVED***;
    return;
***REMOVED***

  var value = stream;
  this.write(value***REMOVED***;
  this._getNext(***REMOVED***;
};

CombinedStream.prototype._handleErrors = function(stream***REMOVED*** {
  var self = this;
  stream.on('error', function(err***REMOVED*** {
    self._emitError(err***REMOVED***;
***REMOVED******REMOVED***;
};

CombinedStream.prototype.write = function(data***REMOVED*** {
  this.emit('data', data***REMOVED***;
};

CombinedStream.prototype.pause = function(***REMOVED*** {
  if (!this.pauseStreams***REMOVED*** {
    return;
***REMOVED***

  this.emit('pause'***REMOVED***;
};

CombinedStream.prototype.resume = function(***REMOVED*** {
  if (!this._released***REMOVED*** {
    this._released = true;
    this.writable = true;
    this._getNext(***REMOVED***;
***REMOVED***

  this.emit('resume'***REMOVED***;
};

CombinedStream.prototype.end = function(***REMOVED*** {
  this._reset(***REMOVED***;
  this.emit('end'***REMOVED***;
};

CombinedStream.prototype.destroy = function(***REMOVED*** {
  this._reset(***REMOVED***;
  this.emit('close'***REMOVED***;
};

CombinedStream.prototype._reset = function(***REMOVED*** {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function(***REMOVED*** {
  this._updateDataSize(***REMOVED***;
  if (this.dataSize <= this.maxDataSize***REMOVED*** {
    return;
***REMOVED***

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this._emitError(new Error(message***REMOVED******REMOVED***;
};

CombinedStream.prototype._updateDataSize = function(***REMOVED*** {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream***REMOVED*** {
    if (!stream.dataSize***REMOVED*** {
      return;
  ***REMOVED***

    self.dataSize += stream.dataSize;
***REMOVED******REMOVED***;

  if (this._currentStream && this._currentStream.dataSize***REMOVED*** {
    this.dataSize += this._currentStream.dataSize;
***REMOVED***
};

CombinedStream.prototype._emitError = function(err***REMOVED*** {
  this._reset(***REMOVED***;
  this.emit('error', err***REMOVED***;
};
