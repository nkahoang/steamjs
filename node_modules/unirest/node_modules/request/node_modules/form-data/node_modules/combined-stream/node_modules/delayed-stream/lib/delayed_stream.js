var Stream = require('stream'***REMOVED***.Stream;
var util = require('util'***REMOVED***;

module.exports = DelayedStream;
function DelayedStream(***REMOVED*** {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream***REMOVED***;

DelayedStream.create = function(source, options***REMOVED*** {
  var delayedStream = new this(***REMOVED***;

  options = options || {};
  for (var option in options***REMOVED*** {
    delayedStream[option] = options[option];
***REMOVED***

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function(***REMOVED*** {
    delayedStream._handleEmit(arguments***REMOVED***;
    return realEmit.apply(source, arguments***REMOVED***;
***REMOVED***;

  source.on('error', function(***REMOVED*** {}***REMOVED***;
  if (delayedStream.pauseStream***REMOVED*** {
    source.pause(***REMOVED***;
***REMOVED***

  return delayedStream;
};

DelayedStream.prototype.__defineGetter__('readable', function(***REMOVED*** {
  return this.source.readable;
}***REMOVED***;

DelayedStream.prototype.resume = function(***REMOVED*** {
  if (!this._released***REMOVED*** {
    this.release(***REMOVED***;
***REMOVED***

  this.source.resume(***REMOVED***;
};

DelayedStream.prototype.pause = function(***REMOVED*** {
  this.source.pause(***REMOVED***;
};

DelayedStream.prototype.release = function(***REMOVED*** {
  this._released = true;

  this._bufferedEvents.forEach(function(args***REMOVED*** {
    this.emit.apply(this, args***REMOVED***;
***REMOVED***.bind(this***REMOVED******REMOVED***;
  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function(***REMOVED*** {
  var r = Stream.prototype.pipe.apply(this, arguments***REMOVED***;
  this.resume(***REMOVED***;
  return r;
};

DelayedStream.prototype._handleEmit = function(args***REMOVED*** {
  if (this._released***REMOVED*** {
    this.emit.apply(this, args***REMOVED***;
    return;
***REMOVED***

  if (args[0] === 'data'***REMOVED*** {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded(***REMOVED***;
***REMOVED***

  this._bufferedEvents.push(args***REMOVED***;
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function(***REMOVED*** {
  if (this._maxDataSizeExceeded***REMOVED*** {
    return;
***REMOVED***

  if (this.dataSize <= this.maxDataSize***REMOVED*** {
    return;
***REMOVED***

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.'
  this.emit('error', new Error(message***REMOVED******REMOVED***;
};
