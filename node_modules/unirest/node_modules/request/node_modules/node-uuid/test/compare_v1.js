var assert = require('assert'***REMOVED***,
    nodeuuid = require('../uuid'***REMOVED***,
    uuidjs = require('uuid-js'***REMOVED***,
    libuuid = require('uuid'***REMOVED***.generate,
    util = require('util'***REMOVED***,
    exec = require('child_process'***REMOVED***.exec,
    os = require('os'***REMOVED***;

// On Mac Os X / macports there's only the ossp-uuid package that provides uuid
// On Linux there's uuid-runtime which provides uuidgen
var uuidCmd = os.type(***REMOVED*** === 'Darwin' ? 'uuid -1' : 'uuidgen -t';

function compare(ids***REMOVED*** {
  console.log(ids***REMOVED***;
  for (var i = 0; i < ids.length; i++***REMOVED*** {
    var id = ids[i].split('-'***REMOVED***;
    id = [id[2], id[1], id[0]].join(''***REMOVED***;
    ids[i] = id;
***REMOVED***
  var sorted = ([].concat(ids***REMOVED******REMOVED***.sort(***REMOVED***;

  if (sorted.toString(***REMOVED*** !== ids.toString(***REMOVED******REMOVED*** {
    console.log('Warning: sorted !== ids'***REMOVED***;
***REMOVED*** else {
    console.log('everything in order!'***REMOVED***;
***REMOVED***
}

// Test time order of v1 uuids
var ids = [];
while (ids.length < 10e3***REMOVED*** ids.push(nodeuuid.v1(***REMOVED******REMOVED***;

var max = 10;
console.log('node-uuid:'***REMOVED***;
ids = [];
for (var i = 0; i < max; i++***REMOVED*** ids.push(nodeuuid.v1(***REMOVED******REMOVED***;
compare(ids***REMOVED***;

console.log(''***REMOVED***;
console.log('uuidjs:'***REMOVED***;
ids = [];
for (var i = 0; i < max; i++***REMOVED*** ids.push(uuidjs.create(1***REMOVED***.toString(***REMOVED******REMOVED***;
compare(ids***REMOVED***;

console.log(''***REMOVED***;
console.log('libuuid:'***REMOVED***;
ids = [];
var count = 0;
var last = function(***REMOVED*** {
  compare(ids***REMOVED***;
}
var cb = function(err, stdout, stderr***REMOVED*** {
  ids.push(stdout.substring(0, stdout.length-1***REMOVED******REMOVED***;
  count++;
  if (count < max***REMOVED*** {
    return next(***REMOVED***;
***REMOVED***
  last(***REMOVED***;
};
var next = function(***REMOVED*** {
  exec(uuidCmd, cb***REMOVED***;
};
next(***REMOVED***;
