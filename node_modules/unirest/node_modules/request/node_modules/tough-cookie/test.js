/*
 * Copyright GoInstant, Inc. and other contributors. All rights reserved.
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"***REMOVED***, to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */
'use strict';
var vows = require('vows'***REMOVED***;
var assert = require('assert'***REMOVED***;
var async = require('async'***REMOVED***;

// NOTE use require("tough-cookie"***REMOVED*** in your own code:
var tough = require('./lib/cookie'***REMOVED***;
var Cookie = tough.Cookie;
var CookieJar = tough.CookieJar;


function dateVows(table***REMOVED*** {
  var theVows = { };
  Object.keys(table***REMOVED***.forEach(function(date***REMOVED*** {
    var expect = table[date];
    theVows[date] = function(***REMOVED*** {
      var got = tough.parseDate(date***REMOVED*** ? 'valid' : 'invalid';
      assert.equal(got, expect ? 'valid' : 'invalid'***REMOVED***;
  ***REMOVED***;
***REMOVED******REMOVED***;
  return { "date parsing": theVows };
}

function matchVows(func,table***REMOVED*** {
  var theVows = {};
  table.forEach(function(item***REMOVED*** {
    var str = item[0];
    var dom = item[1];
    var expect = item[2];
    var label = str+(expect?" matches ":" doesn't match "***REMOVED***+dom;
    theVows[label] = function(***REMOVED*** {
      assert.equal(func(str,dom***REMOVED***,expect***REMOVED***;
  ***REMOVED***;
***REMOVED******REMOVED***;
  return theVows;
}

function defaultPathVows(table***REMOVED*** {
  var theVows = {};
  table.forEach(function(item***REMOVED*** {
    var str = item[0];
    var expect = item[1];
    var label = str+" gives "+expect;
    theVows[label] = function(***REMOVED*** {
      assert.equal(tough.defaultPath(str***REMOVED***,expect***REMOVED***;
  ***REMOVED***;
***REMOVED******REMOVED***;
  return theVows;
}

var atNow = Date.now(***REMOVED***;
function at(offset***REMOVED*** { return {now: new Date(atNow+offset***REMOVED***}; }

vows.describe('Cookie Jar'***REMOVED***
.addBatch({
  "all defined": function(***REMOVED*** {
    assert.ok(Cookie***REMOVED***;
    assert.ok(CookieJar***REMOVED***;
***REMOVED***,
}***REMOVED***
.addBatch(
  dateVows({
    "Wed, 09 Jun 2021 10:18:14 GMT": true,
    "Wed, 09 Jun 2021 22:18:14 GMT": true,
    "Tue, 18 Oct 2011 07:42:42.123 GMT": true,
    "18 Oct 2011 07:42:42 GMT": true,
    "8 Oct 2011 7:42:42 GMT": true,
    "8 Oct 2011 7:2:42 GMT": false,
    "Oct 18 2011 07:42:42 GMT": true,
    "Tue Oct 18 2011 07:05:03 GMT+0000 (GMT***REMOVED***": true,
    "09 Jun 2021 10:18:14 GMT": true,
    "99 Jix 3038 48:86:72 ZMT": false,
    '01 Jan 1970 00:00:00 GMT': true,
    '01 Jan 1600 00:00:00 GMT': false, // before 1601
    '01 Jan 1601 00:00:00 GMT': true,
    '10 Feb 81 13:00:00 GMT': true, // implicit year
    'Thu, 01 Jan 1970 00:00:010 GMT': true, // strange time, non-strict OK
    'Thu, 17-Apr-2014 02:12:29 GMT': true, // dashes
    'Thu, 17-Apr-2014 02:12:29 UTC': true, // dashes and UTC
***REMOVED******REMOVED***
***REMOVED***
.addBatch({
  "strict date parse of Thu, 01 Jan 1970 00:00:010 GMT": {
    topic: function(***REMOVED*** {
      return tough.parseDate('Thu, 01 Jan 1970 00:00:010 GMT', true***REMOVED*** ? true : false;
  ***REMOVED***,
    "invalid": function(date***REMOVED*** {
      assert.equal(date,false***REMOVED***;
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "formatting": {
    "a simple cookie": {
      topic: function(***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'a';
        c.value = 'b';
        return c;
    ***REMOVED***,
      "validates": function(c***REMOVED*** {
        assert.ok(c.validate(***REMOVED******REMOVED***;
    ***REMOVED***,
      "to string": function(c***REMOVED*** {
        assert.equal(c.toString(***REMOVED***, 'a=b'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "a cookie with spaces in the value": {
      topic: function(***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'a';
        c.value = 'beta gamma';
        return c;
    ***REMOVED***,
      "doesn't validate": function(c***REMOVED*** {
        assert.ok(!c.validate(***REMOVED******REMOVED***;
    ***REMOVED***,
      "'garbage in, garbage out'": function(c***REMOVED*** {
        assert.equal(c.toString(***REMOVED***, 'a=beta gamma'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "with an empty value and HttpOnly": {
      topic: function(***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'a';
        c.httpOnly = true;
        return c;
    ***REMOVED***,
      "to string": function(c***REMOVED*** {
        assert.equal(c.toString(***REMOVED***, 'a=; HttpOnly'***REMOVED***;
    ***REMOVED***
  ***REMOVED***,
    "with an expiry": {
      topic: function(***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'a';
        c.value = 'b';
        c.setExpires("Oct 18 2011 07:05:03 GMT"***REMOVED***;
        return c;
    ***REMOVED***,
      "validates": function(c***REMOVED*** {
        assert.ok(c.validate(***REMOVED******REMOVED***;
    ***REMOVED***,
      "to string": function(c***REMOVED*** {
        assert.equal(c.toString(***REMOVED***, 'a=b; Expires=Tue, 18 Oct 2011 07:05:03 GMT'***REMOVED***;
    ***REMOVED***,
      "to short string": function(c***REMOVED*** {
        assert.equal(c.cookieString(***REMOVED***, 'a=b'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "with a max-age": {
      topic: function(***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'a';
        c.value = 'b';
        c.setExpires("Oct 18 2011 07:05:03 GMT"***REMOVED***;
        c.maxAge = 12345;
        return c;
    ***REMOVED***,
      "validates": function(c***REMOVED*** {
        assert.ok(c.validate(***REMOVED******REMOVED***; // mabe this one *shouldn't*?
    ***REMOVED***,
      "to string": function(c***REMOVED*** {
        assert.equal(c.toString(***REMOVED***, 'a=b; Expires=Tue, 18 Oct 2011 07:05:03 GMT; Max-Age=12345'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "with a bunch of things": function(***REMOVED*** {
      var c = new Cookie(***REMOVED***;
      c.key = 'a';
      c.value = 'b';
      c.setExpires("Oct 18 2011 07:05:03 GMT"***REMOVED***;
      c.maxAge = 12345;
      c.domain = 'example.com';
      c.path = '/foo';
      c.secure = true;
      c.httpOnly = true;
      c.extensions = ['MyExtension'];
      assert.equal(c.toString(***REMOVED***, 'a=b; Expires=Tue, 18 Oct 2011 07:05:03 GMT; Max-Age=12345; Domain=example.com; Path=/foo; Secure; HttpOnly; MyExtension'***REMOVED***;
  ***REMOVED***,
    "a host-only cookie": {
      topic: function(***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'a';
        c.value = 'b';
        c.hostOnly = true;
        c.domain = 'shouldnt-stringify.example.com';
        c.path = '/should-stringify';
        return c;
    ***REMOVED***,
      "validates": function(c***REMOVED*** {
        assert.ok(c.validate(***REMOVED******REMOVED***;
    ***REMOVED***,
      "to string": function(c***REMOVED*** {
        assert.equal(c.toString(***REMOVED***, 'a=b; Path=/should-stringify'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "minutes are '10'": {
      topic: function(***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'a';
        c.value = 'b';
        c.expires = new Date(1284113410000***REMOVED***;
        return c;
    ***REMOVED***,
      "validates": function(c***REMOVED*** {
        assert.ok(c.validate(***REMOVED******REMOVED***;
    ***REMOVED***,
      "to string": function(c***REMOVED*** {
        var str = c.toString(***REMOVED***;
        assert.notEqual(str, 'a=b; Expires=Fri, 010 Sep 2010 010:010:010 GMT'***REMOVED***;
        assert.equal(str, 'a=b; Expires=Fri, 10 Sep 2010 10:10:10 GMT'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***
***REMOVED***
}***REMOVED***
.addBatch({
  "TTL with max-age": function(***REMOVED*** {
    var c = new Cookie(***REMOVED***;
    c.maxAge = 123;
    assert.equal(c.TTL(***REMOVED***, 123000***REMOVED***;
    assert.equal(c.expiryTime(new Date(9000000***REMOVED******REMOVED***, 9123000***REMOVED***;
***REMOVED***,
  "TTL with zero max-age": function(***REMOVED*** {
    var c = new Cookie(***REMOVED***;
    c.key = 'a'; c.value = 'b';
    c.maxAge = 0; // should be treated as "earliest representable"
    assert.equal(c.TTL(***REMOVED***, 0***REMOVED***;
    assert.equal(c.expiryTime(new Date(9000000***REMOVED******REMOVED***, -Infinity***REMOVED***;
    assert.ok(!c.validate(***REMOVED******REMOVED***; // not valid, really: non-zero-digit *DIGIT
***REMOVED***,
  "TTL with negative max-age": function(***REMOVED*** {
    var c = new Cookie(***REMOVED***;
    c.key = 'a'; c.value = 'b';
    c.maxAge = -1; // should be treated as "earliest representable"
    assert.equal(c.TTL(***REMOVED***, 0***REMOVED***;
    assert.equal(c.expiryTime(new Date(9000000***REMOVED******REMOVED***, -Infinity***REMOVED***;
    assert.ok(!c.validate(***REMOVED******REMOVED***; // not valid, really: non-zero-digit *DIGIT
***REMOVED***,
  "TTL with max-age and expires": function(***REMOVED*** {
    var c = new Cookie(***REMOVED***;
    c.maxAge = 123;
    c.expires = new Date(Date.now(***REMOVED***+9000***REMOVED***;
    assert.equal(c.TTL(***REMOVED***, 123000***REMOVED***;
    assert.ok(c.isPersistent(***REMOVED******REMOVED***;
***REMOVED***,
  "TTL with expires": function(***REMOVED*** {
    var c = new Cookie(***REMOVED***;
    var now = Date.now(***REMOVED***;
    c.expires = new Date(now+9000***REMOVED***;
    assert.equal(c.TTL(now***REMOVED***, 9000***REMOVED***;
    assert.equal(c.expiryTime(***REMOVED***, c.expires.getTime(***REMOVED******REMOVED***;
***REMOVED***,
  "TTL with old expires": function(***REMOVED*** {
    var c = new Cookie(***REMOVED***;
    c.setExpires('17 Oct 2010 00:00:00 GMT'***REMOVED***;
    assert.ok(c.TTL(***REMOVED*** < 0***REMOVED***;
    assert.ok(c.isPersistent(***REMOVED******REMOVED***;
***REMOVED***,
  "default TTL": {
    topic: function(***REMOVED*** { return new Cookie(***REMOVED***; },
    "is Infinite-future": function(c***REMOVED*** { assert.equal(c.TTL(***REMOVED***, Infinity***REMOVED*** },
    "is a 'session' cookie": function(c***REMOVED*** { assert.ok(!c.isPersistent(***REMOVED******REMOVED*** },
***REMOVED***,
}***REMOVED***.addBatch({
  "Parsing": {
    "simple": {
      topic: function(***REMOVED*** {
        return Cookie.parse('a=bcd',true***REMOVED*** || null;
    ***REMOVED***,
      "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
      "key": function(c***REMOVED*** { assert.equal(c.key, 'a'***REMOVED*** },
      "value": function(c***REMOVED*** { assert.equal(c.value, 'bcd'***REMOVED*** },
      "no path": function(c***REMOVED*** { assert.equal(c.path, null***REMOVED*** },
      "no domain": function(c***REMOVED*** { assert.equal(c.domain, null***REMOVED*** },
      "no extensions": function(c***REMOVED*** { assert.ok(!c.extensions***REMOVED*** },
  ***REMOVED***,
    "with expiry": {
      topic: function(***REMOVED*** {
        return Cookie.parse('a=bcd; Expires=Tue, 18 Oct 2011 07:05:03 GMT',true***REMOVED*** || null;
    ***REMOVED***,
      "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
      "key": function(c***REMOVED*** { assert.equal(c.key, 'a'***REMOVED*** },
      "value": function(c***REMOVED*** { assert.equal(c.value, 'bcd'***REMOVED*** },
      "has expires": function(c***REMOVED*** {
        assert.ok(c.expires !== Infinity, 'expiry is infinite when it shouldn\'t be'***REMOVED***;
        assert.equal(c.expires.getTime(***REMOVED***, 1318921503000***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "with expiry and path": {
      topic: function(***REMOVED*** {
        return Cookie.parse('abc="xyzzy!"; Expires=Tue, 18 Oct 2011 07:05:03 GMT; Path=/aBc',true***REMOVED*** || null;
    ***REMOVED***,
      "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
      "key": function(c***REMOVED*** { assert.equal(c.key, 'abc'***REMOVED*** },
      "value": function(c***REMOVED*** { assert.equal(c.value, 'xyzzy!'***REMOVED*** },
      "has expires": function(c***REMOVED*** {
        assert.ok(c.expires !== Infinity, 'expiry is infinite when it shouldn\'t be'***REMOVED***;
        assert.equal(c.expires.getTime(***REMOVED***, 1318921503000***REMOVED***;
    ***REMOVED***,
      "has path": function(c***REMOVED*** { assert.equal(c.path, '/aBc'***REMOVED***; },
      "no httponly or secure": function(c***REMOVED*** {
        assert.ok(!c.httpOnly***REMOVED***;
        assert.ok(!c.secure***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "with everything": {
      topic: function(***REMOVED*** {
        return Cookie.parse('abc="xyzzy!"; Expires=Tue, 18 Oct 2011 07:05:03 GMT; Path=/aBc; Domain=example.com; Secure; HTTPOnly; Max-Age=1234; Foo=Bar; Baz', true***REMOVED*** || null;
    ***REMOVED***,
      "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
      "key": function(c***REMOVED*** { assert.equal(c.key, 'abc'***REMOVED*** },
      "value": function(c***REMOVED*** { assert.equal(c.value, 'xyzzy!'***REMOVED*** },
      "has expires": function(c***REMOVED*** {
        assert.ok(c.expires !== Infinity, 'expiry is infinite when it shouldn\'t be'***REMOVED***;
        assert.equal(c.expires.getTime(***REMOVED***, 1318921503000***REMOVED***;
    ***REMOVED***,
      "has path": function(c***REMOVED*** { assert.equal(c.path, '/aBc'***REMOVED***; },
      "has domain": function(c***REMOVED*** { assert.equal(c.domain, 'example.com'***REMOVED***; },
      "has httponly": function(c***REMOVED*** { assert.equal(c.httpOnly, true***REMOVED***; },
      "has secure": function(c***REMOVED*** { assert.equal(c.secure, true***REMOVED***; },
      "has max-age": function(c***REMOVED*** { assert.equal(c.maxAge, 1234***REMOVED***; },
      "has extensions": function(c***REMOVED*** {
        assert.ok(c.extensions***REMOVED***;
        assert.equal(c.extensions[0], 'Foo=Bar'***REMOVED***;
        assert.equal(c.extensions[1], 'Baz'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "invalid expires": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; Expires=xyzzy", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; Expires=xyzzy"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.expires, Infinity***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "zero max-age": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; Max-Age=0", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; Max-Age=0"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.maxAge, 0***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "negative max-age": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; Max-Age=-1", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; Max-Age=-1"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.maxAge, -1***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "empty domain": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; domain=", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; domain="***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.domain, null***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "dot domain": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; domain=.", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; domain=."***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.domain, null***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "uppercase domain": {
      "strict lowercases": function(***REMOVED*** {
        var c = Cookie.parse("a=b; domain=EXAMPLE.COM"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.domain, 'example.com'***REMOVED***;
    ***REMOVED***,
      "non-strict lowercases": function(***REMOVED*** {
        var c = Cookie.parse("a=b; domain=EXAMPLE.COM"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.domain, 'example.com'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "trailing dot in domain": {
      topic: function(***REMOVED*** {
        return Cookie.parse("a=b; Domain=example.com.", true***REMOVED*** || null;
    ***REMOVED***,
      "has the domain": function(c***REMOVED*** { assert.equal(c.domain,"example.com."***REMOVED*** },
      "but doesn't validate": function(c***REMOVED*** { assert.equal(c.validate(***REMOVED***,false***REMOVED*** },
  ***REMOVED***,
    "empty path": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; path=", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; path="***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.path, null***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "no-slash path": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; path=xyzzy", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; path=xyzzy"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.path, null***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "trailing semi-colons after path": {
      topic: function (***REMOVED*** {
        return [
          "a=b; path=/;",
          "c=d;;;;"
        ];
    ***REMOVED***,
      "strict": function (t***REMOVED*** {
        assert.ok(!Cookie.parse(t[0], true***REMOVED******REMOVED***;
        assert.ok(!Cookie.parse(t[1], true***REMOVED******REMOVED***;
    ***REMOVED***,
      "non-strict": function (t***REMOVED*** {
        var c1 = Cookie.parse(t[0]***REMOVED***;
        var c2 = Cookie.parse(t[1]***REMOVED***;
        assert.ok(c1***REMOVED***;
        assert.ok(c2***REMOVED***;
        assert.equal(c1.path, '/'***REMOVED***;
    ***REMOVED***
  ***REMOVED***,
    "secure-with-value": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; Secure=xyzzy", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; Secure=xyzzy"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.secure, true***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "httponly-with-value": {
      "strict": function(***REMOVED*** { assert.ok(!Cookie.parse("a=b; HttpOnly=xyzzy", true***REMOVED******REMOVED*** },
      "non-strict": function(***REMOVED*** {
        var c = Cookie.parse("a=b; HttpOnly=xyzzy"***REMOVED***;
        assert.ok(c***REMOVED***;
        assert.equal(c.httpOnly, true***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "garbage": {
      topic: function(***REMOVED*** {
        return Cookie.parse("\x08", true***REMOVED*** || null;
    ***REMOVED***,
      "doesn't parse": function(c***REMOVED*** { assert.equal(c,null***REMOVED*** },
  ***REMOVED***,
    "public suffix domain": {
      topic: function(***REMOVED*** {
        return Cookie.parse("a=b; domain=kyoto.jp", true***REMOVED*** || null;
    ***REMOVED***,
      "parses fine": function(c***REMOVED*** {
        assert.ok(c***REMOVED***;
        assert.equal(c.domain, 'kyoto.jp'***REMOVED***;
    ***REMOVED***,
      "but fails validation": function(c***REMOVED*** {
        assert.ok(c***REMOVED***;
        assert.ok(!c.validate(***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "Ironically, Google 'GAPS' cookie has very little whitespace": {
      topic: function(***REMOVED*** {
        return Cookie.parse("GAPS=1:A1aaaaAaAAa1aaAaAaaAAAaaa1a11a:aaaAaAaAa-aaaA1-;Path=/;Expires=Thu, 17-Apr-2014 02:12:29 GMT;Secure;HttpOnly"***REMOVED***;
    ***REMOVED***,
      "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
      "key": function(c***REMOVED*** { assert.equal(c.key, 'GAPS'***REMOVED*** },
      "value": function(c***REMOVED*** { assert.equal(c.value, '1:A1aaaaAaAAa1aaAaAaaAAAaaa1a11a:aaaAaAaAa-aaaA1-'***REMOVED*** },
      "path": function(c***REMOVED*** {
        assert.notEqual(c.path, '/;Expires'***REMOVED***; // BUG
        assert.equal(c.path, '/'***REMOVED***;
    ***REMOVED***,
      "expires": function(c***REMOVED*** {
        assert.notEqual(c.expires, Infinity***REMOVED***;
        assert.equal(c.expires.getTime(***REMOVED***, 1397700749000***REMOVED***;
    ***REMOVED***,
      "secure": function(c***REMOVED*** { assert.ok(c.secure***REMOVED*** },
      "httponly": function(c***REMOVED*** { assert.ok(c.httpOnly***REMOVED*** },
  ***REMOVED***,
    "lots of equal signs": {
      topic: function(***REMOVED*** {
        return Cookie.parse("queryPref=b=c&d=e; Path=/f=g; Expires=Thu, 17 Apr 2014 02:12:29 GMT; HttpOnly"***REMOVED***;
    ***REMOVED***,
      "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
      "key": function(c***REMOVED*** { assert.equal(c.key, 'queryPref'***REMOVED*** },
      "value": function(c***REMOVED*** { assert.equal(c.value, 'b=c&d=e'***REMOVED*** },
      "path": function(c***REMOVED*** {
        assert.equal(c.path, '/f=g'***REMOVED***;
    ***REMOVED***,
      "expires": function(c***REMOVED*** {
        assert.notEqual(c.expires, Infinity***REMOVED***;
        assert.equal(c.expires.getTime(***REMOVED***, 1397700749000***REMOVED***;
    ***REMOVED***,
      "httponly": function(c***REMOVED*** { assert.ok(c.httpOnly***REMOVED*** },
  ***REMOVED***,
    "spaces in value": {
      "strict": {
        topic: function(***REMOVED*** {
          return Cookie.parse('a=one two three',true***REMOVED*** || null;
      ***REMOVED***,
        "did not parse": function(c***REMOVED*** { assert.isNull(c***REMOVED*** },
    ***REMOVED***,
      "non-strict": {
        topic: function(***REMOVED*** {
          return Cookie.parse('a=one two three',false***REMOVED*** || null;
      ***REMOVED***,
        "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
        "key": function(c***REMOVED*** { assert.equal(c.key, 'a'***REMOVED*** },
        "value": function(c***REMOVED*** { assert.equal(c.value, 'one two three'***REMOVED*** },
        "no path": function(c***REMOVED*** { assert.equal(c.path, null***REMOVED*** },
        "no domain": function(c***REMOVED*** { assert.equal(c.domain, null***REMOVED*** },
        "no extensions": function(c***REMOVED*** { assert.ok(!c.extensions***REMOVED*** },
    ***REMOVED***,
  ***REMOVED***,
    "quoted spaces in value": {
      "strict": {
        topic: function(***REMOVED*** {
          return Cookie.parse('a="one two three"',true***REMOVED*** || null;
      ***REMOVED***,
        "did not parse": function(c***REMOVED*** { assert.isNull(c***REMOVED*** },
    ***REMOVED***,
      "non-strict": {
        topic: function(***REMOVED*** {
          return Cookie.parse('a="one two three"',false***REMOVED*** || null;
      ***REMOVED***,
        "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
        "key": function(c***REMOVED*** { assert.equal(c.key, 'a'***REMOVED*** },
        "value": function(c***REMOVED*** { assert.equal(c.value, 'one two three'***REMOVED*** },
        "no path": function(c***REMOVED*** { assert.equal(c.path, null***REMOVED*** },
        "no domain": function(c***REMOVED*** { assert.equal(c.domain, null***REMOVED*** },
        "no extensions": function(c***REMOVED*** { assert.ok(!c.extensions***REMOVED*** },
    ***REMOVED***
  ***REMOVED***,
    "non-ASCII in value": {
      "strict": {
        topic: function(***REMOVED*** {
          return Cookie.parse('farbe=weiß',true***REMOVED*** || null;
      ***REMOVED***,
        "did not parse": function(c***REMOVED*** { assert.isNull(c***REMOVED*** },
    ***REMOVED***,
      "non-strict": {
        topic: function(***REMOVED*** {
          return Cookie.parse('farbe=weiß',false***REMOVED*** || null;
      ***REMOVED***,
        "parsed": function(c***REMOVED*** { assert.ok(c***REMOVED*** },
        "key": function(c***REMOVED*** { assert.equal(c.key, 'farbe'***REMOVED*** },
        "value": function(c***REMOVED*** { assert.equal(c.value, 'weiß'***REMOVED*** },
        "no path": function(c***REMOVED*** { assert.equal(c.path, null***REMOVED*** },
        "no domain": function(c***REMOVED*** { assert.equal(c.domain, null***REMOVED*** },
        "no extensions": function(c***REMOVED*** { assert.ok(!c.extensions***REMOVED*** },
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "domain normalization": {
    "simple": function(***REMOVED*** {
      var c = new Cookie(***REMOVED***;
      c.domain = "EXAMPLE.com";
      assert.equal(c.canonicalizedDomain(***REMOVED***, "example.com"***REMOVED***;
  ***REMOVED***,
    "extra dots": function(***REMOVED*** {
      var c = new Cookie(***REMOVED***;
      c.domain = ".EXAMPLE.com";
      assert.equal(c.cdomain(***REMOVED***, "example.com"***REMOVED***;
  ***REMOVED***,
    "weird trailing dot": function(***REMOVED*** {
      var c = new Cookie(***REMOVED***;
      c.domain = "EXAMPLE.ca.";
      assert.equal(c.canonicalizedDomain(***REMOVED***, "example.ca."***REMOVED***;
  ***REMOVED***,
    "weird internal dots": function(***REMOVED*** {
      var c = new Cookie(***REMOVED***;
      c.domain = "EXAMPLE...ca.";
      assert.equal(c.canonicalizedDomain(***REMOVED***, "example...ca."***REMOVED***;
  ***REMOVED***,
    "IDN": function(***REMOVED*** {
      var c = new Cookie(***REMOVED***;
      c.domain = "δοκιμή.δοκιμή"; // "test.test" in greek
      assert.equal(c.canonicalizedDomain(***REMOVED***, "xn--jxalpdlp.xn--jxalpdlp"***REMOVED***;
  ***REMOVED***
***REMOVED***
}***REMOVED***
.addBatch({
  "Domain Match":matchVows(tough.domainMatch, [
    // str,          dom,          expect
    ["example.com", "example.com", true],
    ["eXaMpLe.cOm", "ExAmPlE.CoM", true],
    ["no.ca", "yes.ca", false],
    ["wwwexample.com", "example.com", false],
    ["www.example.com", "example.com", true],
    ["example.com", "www.example.com", false],
    ["www.subdom.example.com", "example.com", true],
    ["www.subdom.example.com", "subdom.example.com", true],
    ["example.com", "example.com.", false], // RFC6265 S4.1.2.3
    ["192.168.0.1", "168.0.1", false], // S5.1.3 "The string is a host name"
    [null, "example.com", null],
    ["example.com", null, null],
    [null, null, null],
    [undefined, undefined, null],
  ]***REMOVED***
}***REMOVED***
.addBatch({
  "default-path": defaultPathVows([
    [null,"/"],
    ["/","/"],
    ["/file","/"],
    ["/dir/file","/dir"],
    ["noslash","/"],
  ]***REMOVED***
}***REMOVED***
.addBatch({
  "Path-Match": matchVows(tough.pathMatch, [
    // request, cookie, match
    ["/","/",true],
    ["/dir","/",true],
    ["/","/dir",false],
    ["/dir/","/dir/", true],
    ["/dir/file","/dir/",true],
    ["/dir/file","/dir",true],
    ["/directory","/dir",false],
  ]***REMOVED***
}***REMOVED***
.addBatch({
  "Cookie Sorting": {
    topic: function(***REMOVED*** {
      var cookies = [];
      var now = Date.now(***REMOVED***;
      cookies.push(Cookie.parse("a=0; Domain=example.com"***REMOVED******REMOVED***;
      cookies.push(Cookie.parse("b=1; Domain=www.example.com"***REMOVED******REMOVED***;
      cookies.push(Cookie.parse("c=2; Domain=example.com; Path=/pathA"***REMOVED******REMOVED***;
      cookies.push(Cookie.parse("d=3; Domain=www.example.com; Path=/pathA"***REMOVED******REMOVED***;
      cookies.push(Cookie.parse("e=4; Domain=example.com; Path=/pathA/pathB"***REMOVED******REMOVED***;
      cookies.push(Cookie.parse("f=5; Domain=www.example.com; Path=/pathA/pathB"***REMOVED******REMOVED***;

      // force a stable creation time consistent with the order above since
      // some may have been created at now + 1ms.
      var i = cookies.length;
      cookies.forEach(function(cookie***REMOVED*** {
        cookie.creation = new Date(now - 100*(i--***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;

      // weak shuffle:
      cookies = cookies.sort(function(***REMOVED***{return Math.random(***REMOVED***-0.5}***REMOVED***;

      cookies = cookies.sort(tough.cookieCompare***REMOVED***;
      return cookies;
  ***REMOVED***,
    "got": function(cookies***REMOVED*** {
      assert.lengthOf(cookies, 6***REMOVED***;
      var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
      assert.deepEqual(names, ['e','f','c','d','a','b']***REMOVED***;
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "CookieJar": {
    "Setting a basic cookie": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=example.com; Path=/"***REMOVED***;
        assert.strictEqual(c.hostOnly, null***REMOVED***;
        assert.instanceOf(c.creation, Date***REMOVED***;
        assert.strictEqual(c.lastAccessed, null***REMOVED***;
        c.creation = new Date(Date.now(***REMOVED***-10000***REMOVED***;
        cj.setCookie(c, 'http://example.com/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "works": function(c***REMOVED*** { assert.instanceOf(c,Cookie***REMOVED*** }, // C is for Cookie, good enough for me
      "gets timestamped": function(c***REMOVED*** {
        assert.ok(c.creation***REMOVED***;
        assert.ok(Date.now(***REMOVED*** - c.creation.getTime(***REMOVED*** < 5000***REMOVED***; // recently stamped
        assert.ok(c.lastAccessed***REMOVED***;
        assert.equal(c.creation, c.lastAccessed***REMOVED***;
        assert.equal(c.TTL(***REMOVED***, Infinity***REMOVED***;
        assert.ok(!c.isPersistent(***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "Setting a no-path cookie": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=example.com"***REMOVED***;
        assert.strictEqual(c.hostOnly, null***REMOVED***;
        assert.instanceOf(c.creation, Date***REMOVED***;
        assert.strictEqual(c.lastAccessed, null***REMOVED***;
        c.creation = new Date(Date.now(***REMOVED***-10000***REMOVED***;
        cj.setCookie(c, 'http://example.com/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "domain": function(c***REMOVED*** { assert.equal(c.domain, 'example.com'***REMOVED*** },
      "path is /": function(c***REMOVED*** { assert.equal(c.path, '/'***REMOVED*** },
      "path was derived": function(c***REMOVED*** { assert.strictEqual(c.pathIsDefault, true***REMOVED*** },
  ***REMOVED***,
    "Setting a cookie already marked as host-only": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=example.com"***REMOVED***;
        assert.strictEqual(c.hostOnly, null***REMOVED***;
        assert.instanceOf(c.creation, Date***REMOVED***;
        assert.strictEqual(c.lastAccessed, null***REMOVED***;
        c.creation = new Date(Date.now(***REMOVED***-10000***REMOVED***;
        c.hostOnly = true;
        cj.setCookie(c, 'http://example.com/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "domain": function(c***REMOVED*** { assert.equal(c.domain, 'example.com'***REMOVED*** },
      "still hostOnly": function(c***REMOVED*** { assert.strictEqual(c.hostOnly, true***REMOVED*** },
  ***REMOVED***,
    "Setting a session cookie": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b"***REMOVED***;
        assert.strictEqual(c.path, null***REMOVED***;
        cj.setCookie(c, 'http://www.example.com/dir/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "works": function(c***REMOVED*** { assert.instanceOf(c,Cookie***REMOVED*** },
      "gets the domain": function(c***REMOVED*** { assert.equal(c.domain, 'www.example.com'***REMOVED*** },
      "gets the default path": function(c***REMOVED*** { assert.equal(c.path, '/dir'***REMOVED*** },
      "is 'hostOnly'": function(c***REMOVED*** { assert.ok(c.hostOnly***REMOVED*** },
  ***REMOVED***,
    "Setting wrong domain cookie": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=fooxample.com; Path=/"***REMOVED***;
        cj.setCookie(c, 'http://example.com/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "fails": function(err,c***REMOVED*** {
        assert.ok(err.message.match(/domain/i***REMOVED******REMOVED***;
        assert.ok(!c***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "Setting sub-domain cookie": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=www.example.com; Path=/"***REMOVED***;
        cj.setCookie(c, 'http://example.com/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "fails": function(err,c***REMOVED*** {
        assert.ok(err.message.match(/domain/i***REMOVED******REMOVED***;
        assert.ok(!c***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "Setting super-domain cookie": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=example.com; Path=/"***REMOVED***;
        cj.setCookie(c, 'http://www.app.example.com/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "success": function(err,c***REMOVED*** {
        assert.ok(!err***REMOVED***;
        assert.equal(c.domain, 'example.com'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "Setting a sub-path cookie on a super-domain": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=example.com; Path=/subpath"***REMOVED***;
        assert.strictEqual(c.hostOnly, null***REMOVED***;
        assert.instanceOf(c.creation, Date***REMOVED***;
        assert.strictEqual(c.lastAccessed, null***REMOVED***;
        c.creation = new Date(Date.now(***REMOVED***-10000***REMOVED***;
        cj.setCookie(c, 'http://www.example.com/index.html', this.callback***REMOVED***;
    ***REMOVED***,
      "domain is super-domain": function(c***REMOVED*** { assert.equal(c.domain, 'example.com'***REMOVED*** },
      "path is /subpath": function(c***REMOVED*** { assert.equal(c.path, '/subpath'***REMOVED*** },
      "path was NOT derived": function(c***REMOVED*** { assert.strictEqual(c.pathIsDefault, null***REMOVED*** },
  ***REMOVED***,
    "Setting HttpOnly cookie over non-HTTP API": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        var c = Cookie.parse("a=b; Domain=example.com; Path=/; HttpOnly"***REMOVED***;
        cj.setCookie(c, 'http://example.com/index.html', {http:false}, this.callback***REMOVED***;
    ***REMOVED***,
      "fails": function(err,c***REMOVED*** {
        assert.match(err.message, /HttpOnly/i***REMOVED***;
        assert.ok(!c***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***,
  "Cookie Jar store eight cookies": {
    topic: function(***REMOVED*** {
      var cj = new CookieJar(***REMOVED***;
      var ex = 'http://example.com/index.html';
      var tasks = [];
      tasks.push(function(next***REMOVED*** {
        cj.setCookie('a=1; Domain=example.com; Path=/',ex,at(0***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** {
        cj.setCookie('b=2; Domain=example.com; Path=/; HttpOnly',ex,at(1000***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** {
        cj.setCookie('c=3; Domain=example.com; Path=/; Secure',ex,at(2000***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** { // path
        cj.setCookie('d=4; Domain=example.com; Path=/foo',ex,at(3000***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** { // host only
        cj.setCookie('e=5',ex,at(4000***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** { // other domain
        cj.setCookie('f=6; Domain=nodejs.org; Path=/','http://nodejs.org',at(5000***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** { // expired
        cj.setCookie('g=7; Domain=example.com; Path=/; Expires=Tue, 18 Oct 2011 00:00:00 GMT',ex,at(6000***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** { // expired via Max-Age
        cj.setCookie('h=8; Domain=example.com; Path=/; Max-Age=1',ex,next***REMOVED***;
    ***REMOVED******REMOVED***;
      var cb = this.callback;
      async.parallel(tasks, function(err,results***REMOVED***{
        setTimeout(function(***REMOVED*** {
          cb(err,cj,results***REMOVED***;
      ***REMOVED***, 2000***REMOVED***; // so that 'h=8' expires
    ***REMOVED******REMOVED***;
  ***REMOVED***,
    "setup ok": function(err,cj,results***REMOVED*** {
      assert.ok(!err***REMOVED***;
      assert.ok(cj***REMOVED***;
      assert.ok(results***REMOVED***;
  ***REMOVED***,
    "then retrieving for http://nodejs.org": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('http://nodejs.org',this.callback***REMOVED***;
    ***REMOVED***,
      "get a nodejs cookie": function(cookies***REMOVED*** {
        assert.lengthOf(cookies, 1***REMOVED***;
        var cookie = cookies[0];
        assert.equal(cookie.domain, 'nodejs.org'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for https://example.com": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('https://example.com',{secure:true},this.callback***REMOVED***;
    ***REMOVED***,
      "get a secure example cookie with others": function(cookies***REMOVED*** {
        var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
        assert.deepEqual(names, ['a','b','c','e']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for https://example.com (missing options***REMOVED***": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('https://example.com',this.callback***REMOVED***;
    ***REMOVED***,
      "get a secure example cookie with others": function(cookies***REMOVED*** {
        var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
        assert.deepEqual(names, ['a','b','c','e']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for http://example.com": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('http://example.com',this.callback***REMOVED***;
    ***REMOVED***,
      "get a bunch of cookies": function(cookies***REMOVED*** {
        var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
        assert.deepEqual(names, ['a','b','e']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for http://EXAMPlE.com": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('http://EXAMPlE.com',this.callback***REMOVED***;
    ***REMOVED***,
      "get a bunch of cookies": function(cookies***REMOVED*** {
        var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
        assert.deepEqual(names, ['a','b','e']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for http://example.com, non-HTTP": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('http://example.com',{http:false},this.callback***REMOVED***;
    ***REMOVED***,
      "get a bunch of cookies": function(cookies***REMOVED*** {
        var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
        assert.deepEqual(names, ['a','e']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for http://example.com/foo/bar": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('http://example.com/foo/bar',this.callback***REMOVED***;
    ***REMOVED***,
      "get a bunch of cookies": function(cookies***REMOVED*** {
        var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
        assert.deepEqual(names, ['d','a','b','e']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for http://example.com as a string": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookieString('http://example.com',this.callback***REMOVED***;
    ***REMOVED***,
      "get a single string": function(cookieHeader***REMOVED*** {
        assert.equal(cookieHeader, "a=1; b=2; e=5"***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for http://example.com as a set-cookie header": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getSetCookieStrings('http://example.com',this.callback***REMOVED***;
    ***REMOVED***,
      "get a single string": function(cookieHeaders***REMOVED*** {
        assert.lengthOf(cookieHeaders, 3***REMOVED***;
        assert.equal(cookieHeaders[0], "a=1; Domain=example.com; Path=/"***REMOVED***;
        assert.equal(cookieHeaders[1], "b=2; Domain=example.com; Path=/; HttpOnly"***REMOVED***;
        assert.equal(cookieHeaders[2], "e=5; Path=/"***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "then retrieving for http://www.example.com/": {
      topic: function(cj,oldResults***REMOVED*** {
        assert.ok(oldResults***REMOVED***;
        cj.getCookies('http://www.example.com/foo/bar',this.callback***REMOVED***;
    ***REMOVED***,
      "get a bunch of cookies": function(cookies***REMOVED*** {
        var names = cookies.map(function(c***REMOVED*** {return c.key}***REMOVED***;
        assert.deepEqual(names, ['d','a','b']***REMOVED***; // note lack of 'e'
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***,
  "Repeated names": {
    topic: function(***REMOVED*** {
      var cb = this.callback;
      var cj = new CookieJar(***REMOVED***;
      var ex = 'http://www.example.com/';
      var sc = cj.setCookie;
      var tasks = [];
      var now = Date.now(***REMOVED***;
      tasks.push(sc.bind(cj,'aaaa=xxxx',ex,at(0***REMOVED******REMOVED******REMOVED***;
      tasks.push(sc.bind(cj,'aaaa=1111; Domain=www.example.com',ex,at(1000***REMOVED******REMOVED******REMOVED***;
      tasks.push(sc.bind(cj,'aaaa=2222; Domain=example.com',ex,at(2000***REMOVED******REMOVED******REMOVED***;
      tasks.push(sc.bind(cj,'aaaa=3333; Domain=www.example.com; Path=/pathA',ex,at(3000***REMOVED******REMOVED******REMOVED***;
      async.series(tasks,function(err,results***REMOVED*** {
        results = results.filter(function(e***REMOVED*** {return e !== undefined}***REMOVED***;
        cb(err,{cj:cj, cookies:results, now:now}***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***,
    "all got set": function(err,t***REMOVED*** {
      assert.lengthOf(t.cookies,4***REMOVED***;
  ***REMOVED***,
    "then getting 'em back": {
      topic: function(t***REMOVED*** {
        var cj = t.cj;
        cj.getCookies('http://www.example.com/pathA',this.callback***REMOVED***;
    ***REMOVED***,
      "there's just three": function (err,cookies***REMOVED*** {
        var vals = cookies.map(function(c***REMOVED*** {return c.value}***REMOVED***;
        // may break with sorting; sorting should put 3333 first due to longest path:
        assert.deepEqual(vals, ['3333','1111','2222']***REMOVED***;
    ***REMOVED***
  ***REMOVED***,
***REMOVED***,
  "CookieJar setCookie errors": {
    "public-suffix domain": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        cj.setCookie('i=9; Domain=kyoto.jp; Path=/','kyoto.jp',this.callback***REMOVED***;
    ***REMOVED***,
      "errors": function(err,cookie***REMOVED*** {
        assert.ok(err***REMOVED***;
        assert.ok(!cookie***REMOVED***;
        assert.match(err.message, /public suffix/i***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "wrong domain": {
      topic: function(***REMOVED*** {
        var cj = new CookieJar(***REMOVED***;
        cj.setCookie('j=10; Domain=google.com; Path=/','google.ca',this.callback***REMOVED***;
    ***REMOVED***,
      "errors": function(err,cookie***REMOVED*** {
        assert.ok(err***REMOVED***;
        assert.ok(!cookie***REMOVED***;
        assert.match(err.message, /not in this host's domain/i***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "old cookie is HttpOnly": {
      topic: function(***REMOVED*** {
        var cb = this.callback;
        var next = function (err,c***REMOVED*** {
          c = null;
          return cb(err,cj***REMOVED***;
      ***REMOVED***;
        var cj = new CookieJar(***REMOVED***;
        cj.setCookie('k=11; Domain=example.ca; Path=/; HttpOnly','http://example.ca',{http:true},next***REMOVED***;
    ***REMOVED***,
      "initial cookie is set": function(err,cj***REMOVED*** {
        assert.ok(!err***REMOVED***;
        assert.ok(cj***REMOVED***;
    ***REMOVED***,
      "but when trying to overwrite": {
        topic: function(cj***REMOVED*** {
          var cb = this.callback;
          var next = function(err,c***REMOVED*** {
            c = null;
            cb(null,err***REMOVED***;
        ***REMOVED***;
          cj.setCookie('k=12; Domain=example.ca; Path=/','http://example.ca',{http:false},next***REMOVED***;
      ***REMOVED***,
        "it's an error": function(err***REMOVED*** {
          assert.ok(err***REMOVED***;
      ***REMOVED***,
        "then, checking the original": {
          topic: function(ignored,cj***REMOVED*** {
            assert.ok(cj instanceof CookieJar***REMOVED***;
            cj.getCookies('http://example.ca',{http:true},this.callback***REMOVED***;
        ***REMOVED***,
          "cookie has original value": function(err,cookies***REMOVED*** {
            assert.equal(err,null***REMOVED***;
            assert.lengthOf(cookies, 1***REMOVED***;
            assert.equal(cookies[0].value,11***REMOVED***;
        ***REMOVED***,
      ***REMOVED***,
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***,
}***REMOVED***
.addBatch({
  "JSON": {
    "serialization": {
      topic: function(***REMOVED*** {
        var c = Cookie.parse('alpha=beta; Domain=example.com; Path=/foo; Expires=Tue, 19 Jan 2038 03:14:07 GMT; HttpOnly'***REMOVED***;
        return JSON.stringify(c***REMOVED***;
    ***REMOVED***,
      "gives a string": function(str***REMOVED*** {
        assert.equal(typeof str, "string"***REMOVED***;
    ***REMOVED***,
      "date is in ISO format": function(str***REMOVED*** {
        assert.match(str, /"expires":"2038-01-19T03:14:07\.000Z"/, 'expires is in ISO format'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "deserialization": {
      topic: function(***REMOVED*** {
        var json = '{"key":"alpha","value":"beta","domain":"example.com","path":"/foo","expires":"2038-01-19T03:14:07.000Z","httpOnly":true,"lastAccessed":2000000000123}';
        return Cookie.fromJSON(json***REMOVED***;
    ***REMOVED***,
      "works": function(c***REMOVED*** {
        assert.ok(c***REMOVED***;
    ***REMOVED***,
      "key": function(c***REMOVED*** { assert.equal(c.key, "alpha"***REMOVED*** },
      "value": function(c***REMOVED*** { assert.equal(c.value, "beta"***REMOVED*** },
      "domain": function(c***REMOVED*** { assert.equal(c.domain, "example.com"***REMOVED*** },
      "path": function(c***REMOVED*** { assert.equal(c.path, "/foo"***REMOVED*** },
      "httpOnly": function(c***REMOVED*** { assert.strictEqual(c.httpOnly, true***REMOVED*** },
      "secure": function(c***REMOVED*** { assert.strictEqual(c.secure, false***REMOVED*** },
      "hostOnly": function(c***REMOVED*** { assert.strictEqual(c.hostOnly, null***REMOVED*** },
      "expires is a date object": function(c***REMOVED*** {
        assert.equal(c.expires.getTime(***REMOVED***, 2147483647000***REMOVED***;
    ***REMOVED***,
      "lastAccessed is a date object": function(c***REMOVED*** {
        assert.equal(c.lastAccessed.getTime(***REMOVED***, 2000000000123***REMOVED***;
    ***REMOVED***,
      "creation defaulted": function(c***REMOVED*** {
        assert.ok(c.creation.getTime(***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***,
    "null deserialization": {
      topic: function(***REMOVED*** {
        return Cookie.fromJSON(null***REMOVED***;
    ***REMOVED***,
      "is null": function(cookie***REMOVED*** {
        assert.equal(cookie,null***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***,
  "expiry deserialization": {
    "Infinity": {
      topic: Cookie.fromJSON.bind(null, '{"expires":"Infinity"}'***REMOVED***,
      "is infinite": function(c***REMOVED*** {
        assert.strictEqual(c.expires, "Infinity"***REMOVED***;
        assert.equal(c.expires, Infinity***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***,
  "maxAge serialization": {
    topic: function(***REMOVED*** {
      return function(toSet***REMOVED*** {
        var c = new Cookie(***REMOVED***;
        c.key = 'foo'; c.value = 'bar';
        c.setMaxAge(toSet***REMOVED***;
        return JSON.stringify(c***REMOVED***;
    ***REMOVED***;
  ***REMOVED***,
    "zero": {
      topic: function(f***REMOVED*** { return f(0***REMOVED*** },
      "looks good": function(str***REMOVED*** {
        assert.match(str, /"maxAge":0/***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "Infinity": {
      topic: function(f***REMOVED*** { return f(Infinity***REMOVED*** },
      "looks good": function(str***REMOVED*** {
        assert.match(str, /"maxAge":"Infinity"/***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "-Infinity": {
      topic: function(f***REMOVED*** { return f(-Infinity***REMOVED*** },
      "looks good": function(str***REMOVED*** {
        assert.match(str, /"maxAge":"-Infinity"/***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "null": {
      topic: function(f***REMOVED*** { return f(null***REMOVED*** },
      "looks good": function(str***REMOVED*** {
        assert.match(str, /"maxAge":null/***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***,
  "maxAge deserialization": {
    "number": {
      topic: Cookie.fromJSON.bind(null,'{"key":"foo","value":"bar","maxAge":123}'***REMOVED***,
      "is the number": function(c***REMOVED*** {
        assert.strictEqual(c.maxAge, 123***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "null": {
      topic: Cookie.fromJSON.bind(null,'{"key":"foo","value":"bar","maxAge":null}'***REMOVED***,
      "is null": function(c***REMOVED*** {
        assert.strictEqual(c.maxAge, null***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "less than zero": {
      topic: Cookie.fromJSON.bind(null,'{"key":"foo","value":"bar","maxAge":-123}'***REMOVED***,
      "is -123": function(c***REMOVED*** {
        assert.strictEqual(c.maxAge, -123***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "Infinity": {
      topic: Cookie.fromJSON.bind(null,'{"key":"foo","value":"bar","maxAge":"Infinity"}'***REMOVED***,
      "is inf-as-string": function(c***REMOVED*** {
        assert.strictEqual(c.maxAge, "Infinity"***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "-Infinity": {
      topic: Cookie.fromJSON.bind(null,'{"key":"foo","value":"bar","maxAge":"-Infinity"}'***REMOVED***,
      "is inf-as-string": function(c***REMOVED*** {
        assert.strictEqual(c.maxAge, "-Infinity"***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "permuteDomain": {
    "base case": {
      topic: tough.permuteDomain.bind(null,'example.com'***REMOVED***,
      "got the domain": function(list***REMOVED*** {
        assert.deepEqual(list, ['example.com']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "two levels": {
      topic: tough.permuteDomain.bind(null,'foo.bar.example.com'***REMOVED***,
      "got three things": function(list***REMOVED*** {
        assert.deepEqual(list, ['example.com','bar.example.com','foo.bar.example.com']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "invalid domain": {
      topic: tough.permuteDomain.bind(null,'foo.bar.example.localduhmain'***REMOVED***,
      "got three things": function(list***REMOVED*** {
        assert.equal(list, null***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***,
  "permutePath": {
    "base case": {
      topic: tough.permutePath.bind(null,'/'***REMOVED***,
      "just slash": function(list***REMOVED*** {
        assert.deepEqual(list,['/']***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "single case": {
      topic: tough.permutePath.bind(null,'/foo'***REMOVED***,
      "two things": function(list***REMOVED*** {
        assert.deepEqual(list,['/foo','/']***REMOVED***;
    ***REMOVED***,
      "path matching": function(list***REMOVED*** {
        list.forEach(function(e***REMOVED*** {
          assert.ok(tough.pathMatch('/foo',e***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "double case": {
      topic: tough.permutePath.bind(null,'/foo/bar'***REMOVED***,
      "four things": function(list***REMOVED*** {
        assert.deepEqual(list,['/foo/bar','/foo','/']***REMOVED***;
    ***REMOVED***,
      "path matching": function(list***REMOVED*** {
        list.forEach(function(e***REMOVED*** {
          assert.ok(tough.pathMatch('/foo/bar',e***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "trailing slash": {
      topic: tough.permutePath.bind(null,'/foo/bar/'***REMOVED***,
      "three things": function(list***REMOVED*** {
        assert.deepEqual(list,['/foo/bar','/foo','/']***REMOVED***;
    ***REMOVED***,
      "path matching": function(list***REMOVED*** {
        list.forEach(function(e***REMOVED*** {
          assert.ok(tough.pathMatch('/foo/bar/',e***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "Issue 1": {
    topic: function(***REMOVED*** {
      var cj = new CookieJar(***REMOVED***;
      cj.setCookie('hello=world; path=/some/path/', 'http://domain/some/path/file', function(err,cookie***REMOVED*** {
        this.callback(err,{cj:cj, cookie:cookie}***REMOVED***;
    ***REMOVED***.bind(this***REMOVED******REMOVED***;
  ***REMOVED***,
    "stored a cookie": function(t***REMOVED*** {
      assert.ok(t.cookie***REMOVED***;
  ***REMOVED***,
    "cookie's path was modified to remove unnecessary slash": function(t***REMOVED*** {
      assert.equal(t.cookie.path, '/some/path'***REMOVED***;
  ***REMOVED***,
    "getting it back": {
      topic: function(t***REMOVED*** {
        t.cj.getCookies('http://domain/some/path/file', function(err,cookies***REMOVED*** {
          this.callback(err, {cj:t.cj, cookies:cookies||[]}***REMOVED***;
      ***REMOVED***.bind(this***REMOVED******REMOVED***;
    ***REMOVED***,
      "got one cookie": function(t***REMOVED*** {
        assert.lengthOf(t.cookies, 1***REMOVED***;
    ***REMOVED***,
      "it's the right one": function(t***REMOVED*** {
        var c = t.cookies[0];
        assert.equal(c.key, 'hello'***REMOVED***;
        assert.equal(c.value, 'world'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***
***REMOVED***
}***REMOVED***
.addBatch({
  "expiry option": {
    topic: function(***REMOVED*** {
      var cb = this.callback;
      var cj = new CookieJar(***REMOVED***;
      cj.setCookie('near=expiry; Domain=example.com; Path=/; Max-Age=1','http://www.example.com',at(-1***REMOVED***, function(err,cookie***REMOVED*** {

        cb(err, {cj:cj, cookie:cookie}***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***,
    "set the cookie": function(t***REMOVED*** {
      assert.ok(t.cookie, "didn't set?!"***REMOVED***;
      assert.equal(t.cookie.key, 'near'***REMOVED***;
  ***REMOVED***,
    "then, retrieving": {
      topic: function(t***REMOVED*** {
        var cb = this.callback;
        setTimeout(function(***REMOVED*** {
          t.cj.getCookies('http://www.example.com', {http:true, expire:false}, function(err,cookies***REMOVED*** {
            t.cookies = cookies;
            cb(err,t***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED***,2000***REMOVED***;
    ***REMOVED***,
      "got the cookie": function(t***REMOVED*** {
        assert.lengthOf(t.cookies, 1***REMOVED***;
        assert.equal(t.cookies[0].key, 'near'***REMOVED***;
    ***REMOVED***,
  ***REMOVED***
***REMOVED***
}***REMOVED***
.addBatch({
  "trailing semi-colon set into cj": {
    topic: function (***REMOVED*** {
      var cb = this.callback;
      var cj = new CookieJar(***REMOVED***;
      var ex = 'http://www.example.com';
      var tasks = [];
      tasks.push(function(next***REMOVED*** {
        cj.setCookie('broken_path=testme; path=/;',ex,at(-1***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      tasks.push(function(next***REMOVED*** {
        cj.setCookie('b=2; Path=/;;;;',ex,at(-1***REMOVED***,next***REMOVED***;
    ***REMOVED******REMOVED***;
      async.parallel(tasks, function (err, cookies***REMOVED*** {
        cb(null, {
          cj: cj,
          cookies: cookies
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***,
    "check number of cookies": function (t***REMOVED*** {
      assert.lengthOf(t.cookies, 2, "didn't set"***REMOVED***;
  ***REMOVED***,
    "check *broken_path* was set properly": function (t***REMOVED*** {
      assert.equal(t.cookies[0].key, "broken_path"***REMOVED***;
      assert.equal(t.cookies[0].value, "testme"***REMOVED***;
      assert.equal(t.cookies[0].path, "/"***REMOVED***;
  ***REMOVED***,
    "check *b* was set properly": function (t***REMOVED*** {
      assert.equal(t.cookies[1].key, "b"***REMOVED***;
      assert.equal(t.cookies[1].value, "2"***REMOVED***;
      assert.equal(t.cookies[1].path, "/"***REMOVED***;
  ***REMOVED***,
    "retrieve the cookie": {
      topic: function (t***REMOVED*** {
        var cb = this.callback;
        t.cj.getCookies('http://www.example.com', {}, function (err, cookies***REMOVED*** {
          t.cookies = cookies;
          cb(err, t***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***,
      "get the cookie": function(t***REMOVED*** {
        assert.lengthOf(t.cookies, 2***REMOVED***;
        assert.equal(t.cookies[0].key, 'broken_path'***REMOVED***;
        assert.equal(t.cookies[0].value, 'testme'***REMOVED***;
        assert.equal(t.cookies[1].key, "b"***REMOVED***;
        assert.equal(t.cookies[1].value, "2"***REMOVED***;
        assert.equal(t.cookies[1].path, "/"***REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "Constructor":{
    topic: function (***REMOVED*** {
      return new Cookie({
        key: 'test',
        value: 'b',
        maxAge: 60
    ***REMOVED******REMOVED***;
  ***REMOVED***,
    'check for key property': function (c***REMOVED*** {
      assert.ok(c***REMOVED***;
      assert.equal(c.key, 'test'***REMOVED***;
  ***REMOVED***,
    'check for value property': function (c***REMOVED*** {
      assert.equal(c.value, 'b'***REMOVED***;
  ***REMOVED***,
    'check for maxAge': function (c***REMOVED*** {
      assert.equal(c.maxAge, 60***REMOVED***;
  ***REMOVED***,
    'check for default values for unspecified properties': function (c***REMOVED*** {
      assert.equal(c.expires, "Infinity"***REMOVED***;
      assert.equal(c.secure, false***REMOVED***;
      assert.equal(c.httpOnly, false***REMOVED***;
  ***REMOVED***
***REMOVED***
}***REMOVED***
.addBatch({
  "allPaths option": {
    topic: function(***REMOVED*** {
      var cj = new CookieJar(***REMOVED***;
      var tasks = [];
      tasks.push(cj.setCookie.bind(cj, 'nopath_dom=qq; Path=/; Domain=example.com', 'http://example.com', {}***REMOVED******REMOVED***;
      tasks.push(cj.setCookie.bind(cj, 'path_dom=qq; Path=/foo; Domain=example.com', 'http://example.com', {}***REMOVED******REMOVED***;
      tasks.push(cj.setCookie.bind(cj, 'nopath_host=qq; Path=/', 'http://www.example.com', {}***REMOVED******REMOVED***;
      tasks.push(cj.setCookie.bind(cj, 'path_host=qq; Path=/foo', 'http://www.example.com', {}***REMOVED******REMOVED***;
      tasks.push(cj.setCookie.bind(cj, 'other=qq; Path=/', 'http://other.example.com/', {}***REMOVED******REMOVED***;
      tasks.push(cj.setCookie.bind(cj, 'other2=qq; Path=/foo', 'http://other.example.com/foo', {}***REMOVED******REMOVED***;
      var cb = this.callback;
      async.parallel(tasks, function(err,results***REMOVED*** {
        cb(err, {cj:cj, cookies: results}***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***,
    "all set": function(t***REMOVED*** {
      assert.equal(t.cookies.length, 6***REMOVED***;
      assert.ok(t.cookies.every(function(c***REMOVED*** { return !!c }***REMOVED******REMOVED***;
  ***REMOVED***,
    "getting without allPaths": {
      topic: function(t***REMOVED*** {
        var cb = this.callback;
        var cj = t.cj;
        cj.getCookies('http://www.example.com/', {}, function(err,cookies***REMOVED*** {
          cb(err, {cj:cj, cookies:cookies}***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***,
      "found just two cookies": function(t***REMOVED*** {
        assert.equal(t.cookies.length, 2***REMOVED***;
    ***REMOVED***,
      "all are path=/": function(t***REMOVED*** {
        assert.ok(t.cookies.every(function(c***REMOVED*** { return c.path === '/' }***REMOVED******REMOVED***;
    ***REMOVED***,
      "no 'other' cookies": function(t***REMOVED*** {
        assert.ok(!t.cookies.some(function(c***REMOVED*** { return (/^other/***REMOVED***.test(c.name***REMOVED*** }***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "getting without allPaths for /foo": {
      topic: function(t***REMOVED*** {
        var cb = this.callback;
        var cj = t.cj;
        cj.getCookies('http://www.example.com/foo', {}, function(err,cookies***REMOVED*** {
          cb(err, {cj:cj, cookies:cookies}***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***,
      "found four cookies": function(t***REMOVED*** {
        assert.equal(t.cookies.length, 4***REMOVED***;
    ***REMOVED***,
      "no 'other' cookies": function(t***REMOVED*** {
        assert.ok(!t.cookies.some(function(c***REMOVED*** { return (/^other/***REMOVED***.test(c.name***REMOVED*** }***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
    "getting with allPaths:true": {
      topic: function(t***REMOVED*** {
        var cb = this.callback;
        var cj = t.cj;
        cj.getCookies('http://www.example.com/', {allPaths:true}, function(err,cookies***REMOVED*** {
          cb(err, {cj:cj, cookies:cookies}***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***,
      "found four cookies": function(t***REMOVED*** {
        assert.equal(t.cookies.length, 4***REMOVED***;
    ***REMOVED***,
      "no 'other' cookies": function(t***REMOVED*** {
        assert.ok(!t.cookies.some(function(c***REMOVED*** { return (/^other/***REMOVED***.test(c.name***REMOVED*** }***REMOVED******REMOVED***;
    ***REMOVED***,
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "remove cookies": {
    topic: function(***REMOVED*** {
      var jar = new CookieJar(***REMOVED***;
      var cookie = Cookie.parse("a=b; Domain=example.com; Path=/"***REMOVED***;
      var cookie2 = Cookie.parse("a=b; Domain=foo.com; Path=/"***REMOVED***;
      var cookie3 = Cookie.parse("foo=bar; Domain=foo.com; Path=/"***REMOVED***;
      jar.setCookie(cookie, 'http://example.com/index.html', function(***REMOVED***{}***REMOVED***;
      jar.setCookie(cookie2, 'http://foo.com/index.html', function(***REMOVED***{}***REMOVED***;
      jar.setCookie(cookie3, 'http://foo.com/index.html', function(***REMOVED***{}***REMOVED***;
      return jar;
  ***REMOVED***,
    "all from matching domain": function(jar***REMOVED***{
      jar.store.removeCookies('example.com',null, function(err***REMOVED*** {
        assert(err == null***REMOVED***;

        jar.store.findCookies('example.com', null, function(err, cookies***REMOVED***{
          assert(err == null***REMOVED***;
          assert(cookies != null***REMOVED***;
          assert(cookies.length === 0, 'cookie was not removed'***REMOVED***;
      ***REMOVED******REMOVED***;

        jar.store.findCookies('foo.com', null, function(err, cookies***REMOVED***{
          assert(err == null***REMOVED***;
          assert(cookies != null***REMOVED***;
          assert(cookies.length === 2, 'cookies should not have been removed'***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***,
    "from cookie store matching domain and key": function(jar***REMOVED***{
      jar.store.removeCookie('foo.com', '/', 'foo', function(err***REMOVED*** {
        assert(err == null***REMOVED***;

        jar.store.findCookies('foo.com', null, function(err, cookies***REMOVED***{
          assert(err == null***REMOVED***;
          assert(cookies != null***REMOVED***;
          assert(cookies.length === 1, 'cookie was not removed correctly'***REMOVED***;
          assert(cookies[0].key === 'a', 'wrong cookie was removed'***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***
}***REMOVED***
.addBatch({
  "Synchronous CookieJar": {
    "setCookieSync": {
      topic: function(***REMOVED*** {
        var jar = new CookieJar(***REMOVED***;
        var cookie = Cookie.parse("a=b; Domain=example.com; Path=/"***REMOVED***;
        cookie = jar.setCookieSync(cookie, 'http://example.com/index.html'***REMOVED***;
        return cookie;
    ***REMOVED***,
      "returns a copy of the cookie": function(cookie***REMOVED*** {
        assert.instanceOf(cookie, Cookie***REMOVED***;
    ***REMOVED***
  ***REMOVED***,

    "setCookieSync strict parse error": {
      topic: function(***REMOVED*** {
        var jar = new CookieJar(***REMOVED***;
        var opts = { strict: true };
        try {
          jar.setCookieSync("farbe=weiß", 'http://example.com/index.html', opts***REMOVED***;
          return false;
      ***REMOVED*** catch (e***REMOVED*** {
          return e;
      ***REMOVED***
    ***REMOVED***,
      "throws the error": function(err***REMOVED*** {
        assert.instanceOf(err, Error***REMOVED***;
        assert.equal(err.message, "Cookie failed to parse"***REMOVED***;
    ***REMOVED***
  ***REMOVED***,

    "getCookiesSync": {
      topic: function(***REMOVED*** {
        var jar = new CookieJar(***REMOVED***;
        var url = 'http://example.com/index.html';
        jar.setCookieSync("a=b; Domain=example.com; Path=/", url***REMOVED***;
        jar.setCookieSync("c=d; Domain=example.com; Path=/", url***REMOVED***;
        return jar.getCookiesSync(url***REMOVED***;
    ***REMOVED***,
      "returns the cookie array": function(err, cookies***REMOVED*** {
        assert.ok(!err***REMOVED***;
        assert.ok(Array.isArray(cookies***REMOVED******REMOVED***;
        assert.lengthOf(cookies, 2***REMOVED***;
        cookies.forEach(function(cookie***REMOVED*** {
          assert.instanceOf(cookie, Cookie***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***,

    "getCookieStringSync": {
      topic: function(***REMOVED*** {
        var jar = new CookieJar(***REMOVED***;
        var url = 'http://example.com/index.html';
        jar.setCookieSync("a=b; Domain=example.com; Path=/", url***REMOVED***;
        jar.setCookieSync("c=d; Domain=example.com; Path=/", url***REMOVED***;
        return jar.getCookieStringSync(url***REMOVED***;
    ***REMOVED***,
      "returns the cookie header string": function(err, str***REMOVED*** {
        assert.ok(!err***REMOVED***;
        assert.typeOf(str, 'string'***REMOVED***;
    ***REMOVED***
  ***REMOVED***,

    "getSetCookieStringsSync": {
      topic: function(***REMOVED*** {
        var jar = new CookieJar(***REMOVED***;
        var url = 'http://example.com/index.html';
        jar.setCookieSync("a=b; Domain=example.com; Path=/", url***REMOVED***;
        jar.setCookieSync("c=d; Domain=example.com; Path=/", url***REMOVED***;
        return jar.getSetCookieStringsSync(url***REMOVED***;
    ***REMOVED***,
      "returns the cookie header string": function(err, headers***REMOVED*** {
        assert.ok(!err***REMOVED***;
        assert.ok(Array.isArray(headers***REMOVED******REMOVED***;
        assert.lengthOf(headers, 2***REMOVED***;
        headers.forEach(function(header***REMOVED*** {
          assert.typeOf(header, 'string'***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.addBatch({
  "Synchronous API on async CookieJar": {
    topic: function(***REMOVED*** {
      return new tough.Store(***REMOVED***;
  ***REMOVED***,
    "setCookieSync": {
      topic: function(store***REMOVED*** {
        var jar = new CookieJar(store***REMOVED***;
        try {
          jar.setCookieSync("a=b", 'http://example.com/index.html'***REMOVED***;
          return false;
      ***REMOVED*** catch(e***REMOVED*** {
          return e;
      ***REMOVED***
    ***REMOVED***,
      "fails": function(err***REMOVED*** {
        assert.instanceOf(err, Error***REMOVED***;
        assert.equal(err.message,
                     'CookieJar store is not synchronous; use async API instead.'***REMOVED***;
    ***REMOVED***
  ***REMOVED***,
    "getCookiesSync": {
      topic: function(store***REMOVED*** {
        var jar = new CookieJar(store***REMOVED***;
        try {
          jar.getCookiesSync('http://example.com/index.html'***REMOVED***;
          return false;
      ***REMOVED*** catch(e***REMOVED*** {
          return e;
      ***REMOVED***
    ***REMOVED***,
      "fails": function(err***REMOVED*** {
        assert.instanceOf(err, Error***REMOVED***;
        assert.equal(err.message,
                     'CookieJar store is not synchronous; use async API instead.'***REMOVED***;
    ***REMOVED***
  ***REMOVED***,
    "getCookieStringSync": {
      topic: function(store***REMOVED*** {
        var jar = new CookieJar(store***REMOVED***;
        try {
          jar.getCookieStringSync('http://example.com/index.html'***REMOVED***;
          return false;
      ***REMOVED*** catch(e***REMOVED*** {
          return e;
      ***REMOVED***
    ***REMOVED***,
      "fails": function(err***REMOVED*** {
        assert.instanceOf(err, Error***REMOVED***;
        assert.equal(err.message,
                     'CookieJar store is not synchronous; use async API instead.'***REMOVED***;
    ***REMOVED***
  ***REMOVED***,
    "getSetCookieStringsSync": {
      topic: function(store***REMOVED*** {
        var jar = new CookieJar(store***REMOVED***;
        try {
          jar.getSetCookieStringsSync('http://example.com/index.html'***REMOVED***;
          return false;
      ***REMOVED*** catch(e***REMOVED*** {
          return e;
      ***REMOVED***
    ***REMOVED***,
      "fails": function(err***REMOVED*** {
        assert.instanceOf(err, Error***REMOVED***;
        assert.equal(err.message,
                     'CookieJar store is not synchronous; use async API instead.'***REMOVED***;
    ***REMOVED***
  ***REMOVED***,
***REMOVED***
}***REMOVED***
.export(module***REMOVED***;
