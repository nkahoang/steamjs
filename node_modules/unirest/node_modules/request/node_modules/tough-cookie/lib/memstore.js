'use strict';
var tough = require('./cookie'***REMOVED***;
var Store = require('./store'***REMOVED***.Store;
var permuteDomain = tough.permuteDomain;
var permutePath = tough.permutePath;
var util = require('util'***REMOVED***;

function MemoryCookieStore(***REMOVED*** {
  Store.call(this***REMOVED***;
  this.idx = {};
}
util.inherits(MemoryCookieStore, Store***REMOVED***;
exports.MemoryCookieStore = MemoryCookieStore;
MemoryCookieStore.prototype.idx = null;
MemoryCookieStore.prototype.synchronous = true;

// force a default depth:
MemoryCookieStore.prototype.inspect = function(***REMOVED*** {
  return "{ idx: "+util.inspect(this.idx, false, 2***REMOVED***+' }';
};

MemoryCookieStore.prototype.findCookie = function(domain, path, key, cb***REMOVED*** {
  if (!this.idx[domain]***REMOVED*** {
    return cb(null,undefined***REMOVED***;
***REMOVED***
  if (!this.idx[domain][path]***REMOVED*** {
    return cb(null,undefined***REMOVED***;
***REMOVED***
  return cb(null,this.idx[domain][path][key]||null***REMOVED***;
};

MemoryCookieStore.prototype.findCookies = function(domain, path, cb***REMOVED*** {
  var results = [];
  if (!domain***REMOVED*** {
    return cb(null,[]***REMOVED***;
***REMOVED***

  var pathMatcher;
  if (!path***REMOVED*** {
    // null or '/' means "all paths"
    pathMatcher = function matchAll(domainIndex***REMOVED*** {
      for (var curPath in domainIndex***REMOVED*** {
        var pathIndex = domainIndex[curPath];
        for (var key in pathIndex***REMOVED*** {
          results.push(pathIndex[key]***REMOVED***;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

***REMOVED*** else if (path === '/'***REMOVED*** {
    pathMatcher = function matchSlash(domainIndex***REMOVED*** {
      var pathIndex = domainIndex['/'];
      if (!pathIndex***REMOVED*** {
        return;
    ***REMOVED***
      for (var key in pathIndex***REMOVED*** {
        results.push(pathIndex[key]***REMOVED***;
    ***REMOVED***
  ***REMOVED***;

***REMOVED*** else {
    var paths = permutePath(path***REMOVED*** || [path];
    pathMatcher = function matchRFC(domainIndex***REMOVED*** {
      paths.forEach(function(curPath***REMOVED*** {
        var pathIndex = domainIndex[curPath];
        if (!pathIndex***REMOVED*** {
          return;
      ***REMOVED***
        for (var key in pathIndex***REMOVED*** {
          results.push(pathIndex[key]***REMOVED***;
      ***REMOVED***
    ***REMOVED******REMOVED***;
  ***REMOVED***;
***REMOVED***

  var domains = permuteDomain(domain***REMOVED*** || [domain];
  var idx = this.idx;
  domains.forEach(function(curDomain***REMOVED*** {
    var domainIndex = idx[curDomain];
    if (!domainIndex***REMOVED*** {
      return;
  ***REMOVED***
    pathMatcher(domainIndex***REMOVED***;
***REMOVED******REMOVED***;

  cb(null,results***REMOVED***;
};

MemoryCookieStore.prototype.putCookie = function(cookie, cb***REMOVED*** {
  if (!this.idx[cookie.domain]***REMOVED*** {
    this.idx[cookie.domain] = {};
***REMOVED***
  if (!this.idx[cookie.domain][cookie.path]***REMOVED*** {
    this.idx[cookie.domain][cookie.path] = {};
***REMOVED***
  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
  cb(null***REMOVED***;
};

MemoryCookieStore.prototype.updateCookie = function updateCookie(oldCookie, newCookie, cb***REMOVED*** {
  // updateCookie(***REMOVED*** may avoid updating cookies that are identical.  For example,
  // lastAccessed may not be important to some stores and an equality
  // comparison could exclude that field.
  this.putCookie(newCookie,cb***REMOVED***;
};

MemoryCookieStore.prototype.removeCookie = function removeCookie(domain, path, key, cb***REMOVED*** {
  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]***REMOVED*** {
    delete this.idx[domain][path][key];
***REMOVED***
  cb(null***REMOVED***;
};

MemoryCookieStore.prototype.removeCookies = function removeCookies(domain, path, cb***REMOVED*** {
  if (this.idx[domain]***REMOVED*** {
    if (path***REMOVED*** {
      delete this.idx[domain][path];
  ***REMOVED*** else {
      delete this.idx[domain];
  ***REMOVED***
***REMOVED***
  return cb(null***REMOVED***;
};
