// Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus'***REMOVED***;
var crypto = require('crypto'***REMOVED***;
var ***REMOVED***;

var sprintf = require('util'***REMOVED***.format;



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var Authorization =
  'Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';



///--- Specific Errors

function MissingHeaderError(message***REMOVED*** {
    this.name = 'MissingHeaderError';
    this.message = message;
    this.stack = (new Error(***REMOVED******REMOVED***.stack;
}
MissingHeaderError.prototype = new Error(***REMOVED***;


function InvalidAlgorithmError(message***REMOVED*** {
    this.name = 'InvalidAlgorithmError';
    this.message = message;
    this.stack = (new Error(***REMOVED******REMOVED***.stack;
}
InvalidAlgorithmError.prototype = new Error(***REMOVED***;



///--- Internal Functions

function _pad(val***REMOVED*** {
  if (parseInt(val, 10***REMOVED*** < 10***REMOVED*** {
    val = '0' + val;
***REMOVED***
  return val;
}


function _rfc1123(***REMOVED*** {
  var date = new Date(***REMOVED***;

  var months = ['Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec'];
  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  return days[date.getUTCDay(***REMOVED***] + ', ' +
    _pad(date.getUTCDate(***REMOVED******REMOVED*** + ' ' +
    months[date.getUTCMonth(***REMOVED***] + ' ' +
    date.getUTCFullYear(***REMOVED*** + ' ' +
    _pad(date.getUTCHours(***REMOVED******REMOVED*** + ':' +
    _pad(date.getUTCMinutes(***REMOVED******REMOVED*** + ':' +
    _pad(date.getUTCSeconds(***REMOVED******REMOVED*** +
    ' GMT';
}



///--- Exported API

module.exports = {

  /**
   * Adds an 'Authorization' header to an http.ClientRequest object.
   *
   * Note that this API will add a Date header if it's not already set. Any
   * other headers in the options.headers array MUST be present, or this
   * will throw.
   *
   * You shouldn't need to check the return type; it's just there if you want
   * to be pedantic.
   *
   * @param {Object} request an instance of http.ClientRequest.
   * @param {Object} options signing parameters object:
   *                   - {String} keyId required.
   *                   - {String} key required (either a PEM or HMAC key***REMOVED***.
   *                   - {Array} headers optional; defaults to ['date'].
   *                   - {String} algorithm optional; defaults to 'rsa-sha256'.
   *                   - {String} httpVersion optional; defaults to '1.1'.
   * @return {Boolean} true if Authorization (and optionally Date***REMOVED*** were added.
   * @throws {TypeError} on bad parameter types (input***REMOVED***.
   * @throws {InvalidAlgorithmError} if algorithm was bad.
   * @throws {MissingHeaderError} if a header to be signed was specified but
   *                              was not present.
   */
  signRequest: function signRequest(request, options***REMOVED*** {
    assert.object(request, 'request'***REMOVED***;
    assert.object(options, 'options'***REMOVED***;
    assert.optionalString(options.algorithm, 'options.algorithm'***REMOVED***;
    assert.string(options.keyId, 'options.keyId'***REMOVED***;
    assert.optionalArrayOfString(options.headers, 'options.headers'***REMOVED***;
    assert.optionalString(options.httpVersion, 'options.httpVersion'***REMOVED***;

    if (!request.getHeader('Date'***REMOVED******REMOVED***
      request.setHeader('Date', _rfc1123(***REMOVED******REMOVED***;
    if (!options.headers***REMOVED***
      options.headers = ['date'];
    if (!options.algorithm***REMOVED***
      options.algorithm = 'rsa-sha256';
    if (!options.httpVersion***REMOVED***
      options.httpVersion = '1.1';

    options.algorithm = options.algorithm.toLowerCase(***REMOVED***;

    if (!Algorithms[options.algorithm]***REMOVED***
      throw new InvalidAlgorithmError(options.algorithm + ' is not supported'***REMOVED***;

    var i;
    var stringToSign = '';
    for (i = 0; i < options.headers.length; i++***REMOVED*** {
      if (typeof (options.headers[i]***REMOVED*** !== 'string'***REMOVED***
        throw new TypeError('options.headers must be an array of Strings'***REMOVED***;

      var h = options.headers[i].toLowerCase(***REMOVED***;

      if (h !== 'request-line'***REMOVED*** {
        var value = request.getHeader(h***REMOVED***;
        if (!value***REMOVED*** {
          throw new MissingHeaderError(h + ' was not in the request'***REMOVED***;
      ***REMOVED***
        stringToSign += h + ': ' + value;
    ***REMOVED*** else {
        value =
        stringToSign +=
          request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;
    ***REMOVED***

      if ((i + 1***REMOVED*** < options.headers.length***REMOVED***
        stringToSign += '\n';
  ***REMOVED***

    var alg = options.algorithm.match(/(hmac|rsa***REMOVED***-(\w+***REMOVED***/***REMOVED***;
    var signature;
    if (alg[1] === 'hmac'***REMOVED*** {
      var hmac = crypto.createHmac(alg[2].toUpperCase(***REMOVED***, options.key***REMOVED***;
      hmac.update(stringToSign***REMOVED***;
      signature = hmac.digest('base64'***REMOVED***;
  ***REMOVED*** else {
      var signer = crypto.createSign(options.algorithm.toUpperCase(***REMOVED******REMOVED***;
      signer.update(stringToSign***REMOVED***;
      signature = signer.sign(options.key, 'base64'***REMOVED***;
  ***REMOVED***

    request.setHeader('Authorization', sprintf(Authorization,
                                               options.keyId,
                                               options.algorithm,
                                               options.headers.join(' '***REMOVED***,
                                               signature***REMOVED******REMOVED***;

    return true;
***REMOVED***

};
