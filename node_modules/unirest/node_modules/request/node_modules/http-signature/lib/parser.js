// Copyright 2012 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus'***REMOVED***;
var util = require('util'***REMOVED***;



///--- Globals

var Algorithms = {
  'rsa-sha1': true,
  'rsa-sha256': true,
  'rsa-sha512': true,
  'dsa-sha1': true,
  'hmac-sha1': true,
  'hmac-sha256': true,
  'hmac-sha512': true
};

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};



///--- Specific Errors

function HttpSignatureError(message, caller***REMOVED*** {
  if (Error.captureStackTrace***REMOVED***
    Error.captureStackTrace(this, caller || HttpSignatureError***REMOVED***;

  this.message = message;
  this.name = caller.name;
}
util.inherits(HttpSignatureError, Error***REMOVED***;

function ExpiredRequestError(message***REMOVED*** {
  HttpSignatureError.call(this, message, ExpiredRequestError***REMOVED***;
}
util.inherits(ExpiredRequestError, HttpSignatureError***REMOVED***;


function InvalidHeaderError(message***REMOVED*** {
  HttpSignatureError.call(this, message, InvalidHeaderError***REMOVED***;
}
util.inherits(InvalidHeaderError, HttpSignatureError***REMOVED***;


function InvalidParamsError(message***REMOVED*** {
  HttpSignatureError.call(this, message, InvalidParamsError***REMOVED***;
}
util.inherits(InvalidParamsError, HttpSignatureError***REMOVED***;


function MissingHeaderError(message***REMOVED*** {
  HttpSignatureError.call(this, message, MissingHeaderError***REMOVED***;
}
util.inherits(MissingHeaderError, HttpSignatureError***REMOVED***;



///--- Exported API

module.exports = {

  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "content-md5"
   *         ],
   *         "signature": "base64"
   *     ***REMOVED***,
   *       "signingString": "ready to be passed to crypto.verify(***REMOVED***"
   *   ***REMOVED***
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300***REMOVED***.
   *                   - headers: required header names (def: date or x-date***REMOVED***
   *                   - algorithms: algorithms to support (default: all***REMOVED***.
   * @return {Object} parsed out object (see above***REMOVED***.
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options***REMOVED*** {
    assert.object(request, 'request'***REMOVED***;
    assert.object(request.headers, 'request.headers'***REMOVED***;
    if (options === undefined***REMOVED*** {
      options = {};
  ***REMOVED***
    if (options.headers === undefined***REMOVED*** {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
  ***REMOVED***
    assert.object(options, 'options'***REMOVED***;
    assert.arrayOfString(options.headers, 'options.headers'***REMOVED***;
    assert.optionalNumber(options.clockSkew, 'options.clockSkew'***REMOVED***;

    if (!request.headers.authorization***REMOVED***
      throw new MissingHeaderError('no authorization header present in ' +
                                   'the request'***REMOVED***;

    options.clockSkew = options.clockSkew || 300;


    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: '',

      get algorithm(***REMOVED*** {
        return this.params.algorithm.toUpperCase(***REMOVED***;
    ***REMOVED***,

      get keyId(***REMOVED*** {
        return this.params.keyId;
    ***REMOVED***

  ***REMOVED***;

    var authz = request.headers.authorization;
    for (i = 0; i < authz.length; i++***REMOVED*** {
      var c = authz.charAt(i***REMOVED***;

      switch (Number(state***REMOVED******REMOVED*** {

      case State.New:
        if (c !== ' '***REMOVED*** parsed.scheme += c;
        else state = State.Params;
        break;

      case State.Params:
        switch (Number(substate***REMOVED******REMOVED*** {

        case ParamsState.Name:
          var code = c.charCodeAt(0***REMOVED***;
          // restricted name of A-Z / a-z
          if ((code >= 0x41 && code <= 0x5a***REMOVED*** || // A-Z
              (code >= 0x61 && code <= 0x7a***REMOVED******REMOVED*** { // a-z
            tmpName += c;
        ***REMOVED*** else if (c === '='***REMOVED*** {
            if (tmpName.length === 0***REMOVED***
              throw new InvalidHeaderError('bad param format'***REMOVED***;
            substate = ParamsState.Quote;
        ***REMOVED*** else {
            throw new InvalidHeaderError('bad param format'***REMOVED***;
        ***REMOVED***
          break;

        case ParamsState.Quote:
          if (c === '"'***REMOVED*** {
            tmpValue = '';
            substate = ParamsState.Value;
        ***REMOVED*** else {
            throw new InvalidHeaderError('bad param format'***REMOVED***;
        ***REMOVED***
          break;

        case ParamsState.Value:
          if (c === '"'***REMOVED*** {
            parsed.params[tmpName] = tmpValue;
            substate = ParamsState.Comma;
        ***REMOVED*** else {
            tmpValue += c;
        ***REMOVED***
          break;

        case ParamsState.Comma:
          if (c === ','***REMOVED*** {
            tmpName = '';
            substate = ParamsState.Name;
        ***REMOVED*** else {
            throw new InvalidHeaderError('bad param format'***REMOVED***;
        ***REMOVED***
          break;

        default:
          throw new Error('Invalid substate'***REMOVED***;
      ***REMOVED***
        break;

      default:
        throw new Error('Invalid substate'***REMOVED***;
    ***REMOVED***

  ***REMOVED***

    if (!parsed.params.headers || parsed.params.headers === ''***REMOVED*** {
      if (request.headers['x-date']***REMOVED*** {
        parsed.params.headers = ['x-date'];
    ***REMOVED*** else {
        parsed.params.headers = ['date'];
    ***REMOVED***
  ***REMOVED*** else {
      parsed.params.headers = parsed.params.headers.split(' '***REMOVED***;
  ***REMOVED***

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature'***REMOVED***
      throw new InvalidHeaderError('scheme was not "Signature"'***REMOVED***;

    if (!parsed.params.keyId***REMOVED***
      throw new InvalidHeaderError('keyId was not specified'***REMOVED***;

    if (!parsed.params.algorithm***REMOVED***
      throw new InvalidHeaderError('algorithm was not specified'***REMOVED***;

    if (!parsed.params.signature***REMOVED***
      throw new InvalidHeaderError('signature was not specified'***REMOVED***;

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase(***REMOVED***;
    if (!Algorithms[parsed.params.algorithm]***REMOVED***
      throw new InvalidParamsError(parsed.params.algorithm +
                                   ' is not supported'***REMOVED***;

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++***REMOVED*** {
      var h = parsed.params.headers[i].toLowerCase(***REMOVED***;
      parsed.params.headers[i] = h;

      if (h !== 'request-line'***REMOVED*** {
        var value = request.headers[h];
        if (!value***REMOVED***
          throw new MissingHeaderError(h + ' was not in the request'***REMOVED***;
        parsed.signingString += h + ': ' + value;
    ***REMOVED*** else {
        parsed.signingString +=
          request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
    ***REMOVED***

      if ((i + 1***REMOVED*** < parsed.params.headers.length***REMOVED***
        parsed.signingString += '\n';
  ***REMOVED***

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']***REMOVED*** {
        if (request.headers['x-date']***REMOVED*** {
          date = new Date(request.headers['x-date']***REMOVED***;
      ***REMOVED*** else {
          date = new Date(request.headers.date***REMOVED***;
      ***REMOVED***
      var now = new Date(***REMOVED***;
      var skew = Math.abs(now.getTime(***REMOVED*** - date.getTime(***REMOVED******REMOVED***;

      if (skew > options.clockSkew * 1000***REMOVED*** {
        throw new ExpiredRequestError('clock skew of ' +
                                      (skew / 1000***REMOVED*** +
                                      's was greater than ' +
                                      options.clockSkew + 's'***REMOVED***;
    ***REMOVED***
  ***REMOVED***

    options.headers.forEach(function (hdr***REMOVED*** {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr***REMOVED*** < 0***REMOVED***
        throw new MissingHeaderError(hdr + ' was not a signed header'***REMOVED***;
  ***REMOVED******REMOVED***;

    if (options.algorithms***REMOVED*** {
      if (options.algorithms.indexOf(parsed.params.algorithm***REMOVED*** === -1***REMOVED***
        throw new InvalidParamsError(parsed.params.algorithm +
                                     ' is not a supported algorithm'***REMOVED***;
  ***REMOVED***

    return parsed;
***REMOVED***

};
