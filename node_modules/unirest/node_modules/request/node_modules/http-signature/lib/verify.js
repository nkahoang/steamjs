// Copyright 2011 Joyent, Inc.  All rights reserved.

var assert = require('assert-plus'***REMOVED***;
var crypto = require('crypto'***REMOVED***;



///--- Exported API

module.exports = {

  /**
   * Simply wraps up the node crypto operations for you, and returns
   * true or false.  You are expected to pass in an object that was
   * returned from `parse(***REMOVED***`.
   *
   * @param {Object} parsedSignature the object you got from `parse`.
   * @param {String} key either an RSA private key PEM or HMAC secret.
   * @return {Boolean} true if valid, false otherwise.
   * @throws {TypeError} if you pass in bad arguments.
   */
  verifySignature: function verifySignature(parsedSignature, key***REMOVED*** {
    assert.object(parsedSignature, 'parsedSignature'***REMOVED***;
    assert.string(key, 'key'***REMOVED***;

    var alg = parsedSignature.algorithm.match(/(HMAC|RSA|DSA***REMOVED***-(\w+***REMOVED***/***REMOVED***;
    if (!alg || alg.length !== 3***REMOVED***
      throw new TypeError('parsedSignature: unsupported algorithm ' +
                          parsedSignature.algorithm***REMOVED***;

    if (alg[1] === 'HMAC'***REMOVED*** {
      var hmac = crypto.createHmac(alg[2].toUpperCase(***REMOVED***, key***REMOVED***;
      hmac.update(parsedSignature.signingString***REMOVED***;
      return (hmac.digest('base64'***REMOVED*** === parsedSignature.params.signature***REMOVED***;
  ***REMOVED*** else {
      var verify = crypto.createVerify(alg[0]***REMOVED***;
      verify.update(parsedSignature.signingString***REMOVED***;
      return verify.verify(key, parsedSignature.params.signature, 'base64'***REMOVED***;
  ***REMOVED***
***REMOVED***

};
