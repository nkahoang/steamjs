/*
 * Testing to ensure we're reading the expected number bytes
 */
var mod_ctype = require('../../ctype'***REMOVED***;
var ASSERT = require('assert'***REMOVED***;

function testUint8(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('80', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'uint8_t' } } ], buffer,
	    0***REMOVED***;
	ASSERT.equal(result['size'], 1***REMOVED***;
}

function testSint8(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('80', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'int8_t' } } ], buffer, 0***REMOVED***;
	ASSERT.equal(result['size'], 1***REMOVED***;
}

function testUint16(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('8000', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'uint16_t' } } ], buffer,
	    0***REMOVED***;
	ASSERT.equal(result['size'], 2***REMOVED***;
}

function testSint16(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('8000', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'int16_t' } } ], buffer,
	    0***REMOVED***;
	ASSERT.equal(result['size'], 2***REMOVED***;
}

function testUint32(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('80000000', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'uint32_t' } } ], buffer,
	    0***REMOVED***;
	ASSERT.equal(result['size'], 4***REMOVED***;
}

function testSint32(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('80000000', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'int32_t' } } ], buffer,
	    0***REMOVED***;
	ASSERT.equal(result['size'], 4***REMOVED***;
}

function testUint64(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('8000000000000000', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'uint64_t' } } ], buffer,
	    0***REMOVED***;
	ASSERT.equal(result['size'], 8***REMOVED***;
}

function testSint64(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('8000000000000000', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'int64_t' } } ], buffer,
	    0***REMOVED***;
	ASSERT.equal(result['size'], 8***REMOVED***;
}

function testFloat(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('ABAAAA3E', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'float' } } ], buffer, 0***REMOVED***;
	ASSERT.equal(result['size'], 4***REMOVED***;
}

function testDouble(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('000000000000F03F', 'hex'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'double' } } ], buffer, 0***REMOVED***;
	ASSERT.equal(result['size'], 8***REMOVED***;
}

function testChar(***REMOVED***
{
	var parser, result, buffer;
	parser = new mod_ctype.Parser({ endian: 'little' }***REMOVED***;
	buffer = new Buffer('t'***REMOVED***;
	result = parser.readStruct([ { item: { type: 'char' } } ], buffer, 0***REMOVED***;
	ASSERT.equal(result['size'], 1***REMOVED***;
}

function test(***REMOVED***
{
	testSint8(***REMOVED***;
	testUint8(***REMOVED***;
	testSint16(***REMOVED***;
	testUint16(***REMOVED***;
	testSint32(***REMOVED***;
	testUint32(***REMOVED***;
	testSint64(***REMOVED***;
	testUint64(***REMOVED***;
	testFloat(***REMOVED***;
	testDouble(***REMOVED***;
	testChar(***REMOVED***;
}

test(***REMOVED***;
