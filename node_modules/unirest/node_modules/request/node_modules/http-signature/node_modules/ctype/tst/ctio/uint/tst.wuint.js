/*
 * A battery of tests to help us read a series of uints
 */

var mod_ctype = require('../../../ctio.js'***REMOVED***;
var ASSERT = require('assert'***REMOVED***;

/*
 * We need to check the following things:
 *  - We are correctly resolving big endian (doesn't mean anything for 8 bit***REMOVED***
 *  - Correctly resolving little endian (doesn't mean anything for 8 bit***REMOVED***
 *  - Correctly using the offsets
 *  - Correctly interpreting values that are beyond the signed range as unsigned
 */
function test8(***REMOVED***
{
	var data = new Buffer(4***REMOVED***;
	mod_ctype.wuint8(23, 'big', data, 0***REMOVED***;
	mod_ctype.wuint8(23, 'big', data, 1***REMOVED***;
	mod_ctype.wuint8(23, 'big', data, 2***REMOVED***;
	mod_ctype.wuint8(23, 'big', data, 3***REMOVED***;
	ASSERT.equal(23, data[0]***REMOVED***;
	ASSERT.equal(23, data[1]***REMOVED***;
	ASSERT.equal(23, data[2]***REMOVED***;
	ASSERT.equal(23, data[3]***REMOVED***;
	mod_ctype.wuint8(23, 'little', data, 0***REMOVED***;
	mod_ctype.wuint8(23, 'little', data, 1***REMOVED***;
	mod_ctype.wuint8(23, 'little', data, 2***REMOVED***;
	mod_ctype.wuint8(23, 'little', data, 3***REMOVED***;
	ASSERT.equal(23, data[0]***REMOVED***;
	ASSERT.equal(23, data[1]***REMOVED***;
	ASSERT.equal(23, data[2]***REMOVED***;
	ASSERT.equal(23, data[3]***REMOVED***;
	mod_ctype.wuint8(255, 'big', data, 0***REMOVED***;
	ASSERT.equal(255, data[0]***REMOVED***;
	mod_ctype.wuint8(255, 'little', data, 0***REMOVED***;
	ASSERT.equal(255, data[0]***REMOVED***;
}

function test16(***REMOVED***
{
	var value = 0x2343;
	var data = new Buffer(4***REMOVED***;
	mod_ctype.wuint16(value, 'big', data, 0***REMOVED***;
	ASSERT.equal(0x23, data[0]***REMOVED***;
	ASSERT.equal(0x43, data[1]***REMOVED***;
	mod_ctype.wuint16(value, 'big', data, 1***REMOVED***;
	ASSERT.equal(0x23, data[1]***REMOVED***;
	ASSERT.equal(0x43, data[2]***REMOVED***;
	mod_ctype.wuint16(value, 'big', data, 2***REMOVED***;
	ASSERT.equal(0x23, data[2]***REMOVED***;
	ASSERT.equal(0x43, data[3]***REMOVED***;

	mod_ctype.wuint16(value, 'little', data, 0***REMOVED***;
	ASSERT.equal(0x23, data[1]***REMOVED***;
	ASSERT.equal(0x43, data[0]***REMOVED***;

	mod_ctype.wuint16(value, 'little', data, 1***REMOVED***;
	ASSERT.equal(0x23, data[2]***REMOVED***;
	ASSERT.equal(0x43, data[1]***REMOVED***;

	mod_ctype.wuint16(value, 'little', data, 2***REMOVED***;
	ASSERT.equal(0x23, data[3]***REMOVED***;
	ASSERT.equal(0x43, data[2]***REMOVED***;

	value = 0xff80;
	mod_ctype.wuint16(value, 'little', data, 0***REMOVED***;
	ASSERT.equal(0xff, data[1]***REMOVED***;
	ASSERT.equal(0x80, data[0]***REMOVED***;

	mod_ctype.wuint16(value, 'big', data, 0***REMOVED***;
	ASSERT.equal(0xff, data[0]***REMOVED***;
	ASSERT.equal(0x80, data[1]***REMOVED***;
}

function test32(***REMOVED***
{
	var data = new Buffer(6***REMOVED***;
	var value = 0xe7f90a6d;

	mod_ctype.wuint32(value, 'big', data, 0***REMOVED***;
	ASSERT.equal(0xe7, data[0]***REMOVED***;
	ASSERT.equal(0xf9, data[1]***REMOVED***;
	ASSERT.equal(0x0a, data[2]***REMOVED***;
	ASSERT.equal(0x6d, data[3]***REMOVED***;

	mod_ctype.wuint32(value, 'big', data, 1***REMOVED***;
	ASSERT.equal(0xe7, data[1]***REMOVED***;
	ASSERT.equal(0xf9, data[2]***REMOVED***;
	ASSERT.equal(0x0a, data[3]***REMOVED***;
	ASSERT.equal(0x6d, data[4]***REMOVED***;

	mod_ctype.wuint32(value, 'big', data, 2***REMOVED***;
	ASSERT.equal(0xe7, data[2]***REMOVED***;
	ASSERT.equal(0xf9, data[3]***REMOVED***;
	ASSERT.equal(0x0a, data[4]***REMOVED***;
	ASSERT.equal(0x6d, data[5]***REMOVED***;

	mod_ctype.wuint32(value, 'little', data, 0***REMOVED***;
	ASSERT.equal(0xe7, data[3]***REMOVED***;
	ASSERT.equal(0xf9, data[2]***REMOVED***;
	ASSERT.equal(0x0a, data[1]***REMOVED***;
	ASSERT.equal(0x6d, data[0]***REMOVED***;

	mod_ctype.wuint32(value, 'little', data, 1***REMOVED***;
	ASSERT.equal(0xe7, data[4]***REMOVED***;
	ASSERT.equal(0xf9, data[3]***REMOVED***;
	ASSERT.equal(0x0a, data[2]***REMOVED***;
	ASSERT.equal(0x6d, data[1]***REMOVED***;

	mod_ctype.wuint32(value, 'little', data, 2***REMOVED***;
	ASSERT.equal(0xe7, data[5]***REMOVED***;
	ASSERT.equal(0xf9, data[4]***REMOVED***;
	ASSERT.equal(0x0a, data[3]***REMOVED***;
	ASSERT.equal(0x6d, data[2]***REMOVED***;
}

function test64(***REMOVED***
{
	var data = new Buffer(10***REMOVED***;
	var value = 0x0007cda8e7f90a6d;
	var high = Math.floor(value / Math.pow(2, 32***REMOVED******REMOVED***;
	var low = value - (high * Math.pow(2, 32***REMOVED******REMOVED***;
	ASSERT.equal(0x0007cda8, high***REMOVED***;
	ASSERT.equal(0xe7f90a6d, low***REMOVED***;

	mod_ctype.wuint64([high, low], 'big', data, 0***REMOVED***;
	ASSERT.equal(0x00, data[0]***REMOVED***;
	ASSERT.equal(0x07, data[1]***REMOVED***;
	ASSERT.equal(0xcd, data[2]***REMOVED***;
	ASSERT.equal(0xa8, data[3]***REMOVED***;
	ASSERT.equal(0xe7, data[4]***REMOVED***;
	ASSERT.equal(0xf9, data[5]***REMOVED***;
	ASSERT.equal(0x0a, data[6]***REMOVED***;
	ASSERT.equal(0x6d, data[7]***REMOVED***;

	mod_ctype.wuint64([high, low], 'little', data, 0***REMOVED***;
	ASSERT.equal(0x6d, data[0]***REMOVED***;
	ASSERT.equal(0x0a, data[1]***REMOVED***;
	ASSERT.equal(0xf9, data[2]***REMOVED***;
	ASSERT.equal(0xe7, data[3]***REMOVED***;
	ASSERT.equal(0xa8, data[4]***REMOVED***;
	ASSERT.equal(0xcd, data[5]***REMOVED***;
	ASSERT.equal(0x07, data[6]***REMOVED***;
	ASSERT.equal(0x00, data[7]***REMOVED***;
}

test8(***REMOVED***;
test16(***REMOVED***;
test32(***REMOVED***;
test64(***REMOVED***;

exports.test8 = test8;
exports.test16 = test16;
exports.test32 = test32;
exports.test64 = test64;
