// Copyright (c***REMOVED*** 2012, Mark Cavage. All rights reserved.

var assert = require('assert'***REMOVED***;
var Stream = require('stream'***REMOVED***.Stream;
var util = require('util'***REMOVED***;



///--- Globals

var NDEBUG = process.env.NODE_NDEBUG || false;



///--- Messages

var ARRAY_TYPE_REQUIRED = '%s ([%s]***REMOVED*** required';
var TYPE_REQUIRED = '%s (%s***REMOVED*** is required';



///--- Internal

function capitalize(str***REMOVED*** {
        return (str.charAt(0***REMOVED***.toUpperCase(***REMOVED*** + str.slice(1***REMOVED******REMOVED***;
}

function uncapitalize(str***REMOVED*** {
        return (str.charAt(0***REMOVED***.toLowerCase(***REMOVED*** + str.slice(1***REMOVED******REMOVED***;
}

function _(***REMOVED*** {
        return (util.format.apply(util, arguments***REMOVED******REMOVED***;
}


function _assert(arg, type, name, stackFunc***REMOVED*** {
        if (!NDEBUG***REMOVED*** {
                name = name || type;
                stackFunc = stackFunc || _assert.caller;
                var t = typeof (arg***REMOVED***;

                if (t !== type***REMOVED*** {
                        throw new assert.AssertionError({
                                message: _(TYPE_REQUIRED, name, type***REMOVED***,
                                actual: t,
                                expected: type,
                                operator: '===',
                                stackStartFunction: stackFunc
                      ***REMOVED******REMOVED***;
              ***REMOVED***
      ***REMOVED***
}



///--- API

function array(arr, type, name***REMOVED*** {
        if (!NDEBUG***REMOVED*** {
                name = name || type;

                if (!Array.isArray(arr***REMOVED******REMOVED*** {
                        throw new assert.AssertionError({
                                message: _(ARRAY_TYPE_REQUIRED, name, type***REMOVED***,
                                actual: typeof (arr***REMOVED***,
                                expected: 'array',
                                operator: 'Array.isArray',
                                stackStartFunction: array.caller
                      ***REMOVED******REMOVED***;
              ***REMOVED***

                for (var i = 0; i < arr.length; i++***REMOVED*** {
                        _assert(arr[i], type, name, array***REMOVED***;
              ***REMOVED***
      ***REMOVED***
}


function bool(arg, name***REMOVED*** {
        _assert(arg, 'boolean', name, bool***REMOVED***;
}


function buffer(arg, name***REMOVED*** {
        if (!Buffer.isBuffer(arg***REMOVED******REMOVED*** {
                throw new assert.AssertionError({
                        message: _(TYPE_REQUIRED, name, type***REMOVED***,
                        actual: typeof (arg***REMOVED***,
                        expected: 'buffer',
                        operator: 'Buffer.isBuffer',
                        stackStartFunction: buffer
              ***REMOVED******REMOVED***;
      ***REMOVED***
}


function func(arg, name***REMOVED*** {
        _assert(arg, 'function', name***REMOVED***;
}


function number(arg, name***REMOVED*** {
        _assert(arg, 'number', name***REMOVED***;
}


function object(arg, name***REMOVED*** {
        _assert(arg, 'object', name***REMOVED***;
}


function stream(arg, name***REMOVED*** {
        if (!(arg instanceof Stream***REMOVED******REMOVED*** {
                throw new assert.AssertionError({
                        message: _(TYPE_REQUIRED, name, type***REMOVED***,
                        actual: typeof (arg***REMOVED***,
                        expected: 'Stream',
                        operator: 'instanceof',
                        stackStartFunction: buffer
              ***REMOVED******REMOVED***;
      ***REMOVED***
}


function string(arg, name***REMOVED*** {
        _assert(arg, 'string', name***REMOVED***;
}



///--- Exports

module.exports = {
        bool: bool,
        buffer: buffer,
        func: func,
        number: number,
        object: object,
        stream: stream,
        string: string
};


Object.keys(module.exports***REMOVED***.forEach(function (k***REMOVED*** {
        if (k === 'buffer'***REMOVED***
                return;

        var name = 'arrayOf' + capitalize(k***REMOVED***;

        if (k === 'bool'***REMOVED***
                k = 'boolean';
        if (k === 'func'***REMOVED***
                k = 'function';
        module.exports[name] = function (arg, name***REMOVED*** {
                array(arg, k, name***REMOVED***;
      ***REMOVED***;
}***REMOVED***;

Object.keys(module.exports***REMOVED***.forEach(function (k***REMOVED*** {
        var _name = 'optional' + capitalize(k***REMOVED***;
        var s = uncapitalize(k.replace('arrayOf', ''***REMOVED******REMOVED***;
        if (s === 'bool'***REMOVED***
                s = 'boolean';
        if (s === 'func'***REMOVED***
                s = 'function';

        if (k.indexOf('arrayOf'***REMOVED*** !== -1***REMOVED*** {
          module.exports[_name] = function (arg, name***REMOVED*** {
                  if (!NDEBUG && arg !== undefined***REMOVED*** {
                          array(arg, s, name***REMOVED***;
                ***REMOVED***
        ***REMOVED***;
      ***REMOVED*** else {
          module.exports[_name] = function (arg, name***REMOVED*** {
                  if (!NDEBUG && arg !== undefined***REMOVED*** {
                          _assert(arg, s, name***REMOVED***;
                ***REMOVED***
        ***REMOVED***;
      ***REMOVED***
}***REMOVED***;


// Reexport built-in assertions
Object.keys(assert***REMOVED***.forEach(function (k***REMOVED*** {
        if (k === 'AssertionError'***REMOVED*** {
                module.exports[k] = assert[k];
                return;
      ***REMOVED***

        module.exports[k] = function (***REMOVED*** {
                if (!NDEBUG***REMOVED*** {
                        assert[k].apply(assert[k], arguments***REMOVED***;
              ***REMOVED***
      ***REMOVED***;
}***REMOVED***;
