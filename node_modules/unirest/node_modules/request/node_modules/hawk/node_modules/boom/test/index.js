// Load modules

var Lab = require('lab'***REMOVED***;
var Boom = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Boom', function (***REMOVED*** {

    it('returns an error with info when constructed using another error', function (done***REMOVED*** {

        var error = new Error('ka-boom'***REMOVED***;
        error.xyz = 123;
        var err = new Boom(error***REMOVED***;
        expect(err.data.xyz***REMOVED***.to.equal(123***REMOVED***;
        expect(err.message***REMOVED***.to.equal('ka-boom'***REMOVED***;
        expect(err.response***REMOVED***.to.deep.equal({
            code: 500,
            payload: {
                code: 500,
                error: 'Internal Server Error',
                message: 'ka-boom'
          ***REMOVED***,
            headers: {}
      ***REMOVED******REMOVED***;
        done(***REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#isBoom', function (***REMOVED*** {

        it('returns true for Boom object', function (done***REMOVED*** {

            expect(Boom.badRequest(***REMOVED***.isBoom***REMOVED***.to.equal(true***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns false for Error object', function (done***REMOVED*** {

            expect(new Error(***REMOVED***.isBoom***REMOVED***.to.not.exist;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#badRequest', function (***REMOVED*** {

        it('returns a 400 error code', function (done***REMOVED*** {

            expect(Boom.badRequest(***REMOVED***.response.code***REMOVED***.to.equal(400***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the message with the passed in message', function (done***REMOVED*** {

            expect(Boom.badRequest('my message'***REMOVED***.message***REMOVED***.to.equal('my message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#unauthorized', function (***REMOVED*** {

        it('returns a 401 error code', function (done***REMOVED*** {

            var err = Boom.unauthorized(***REMOVED***;
            expect(err.response.code***REMOVED***.to.equal(401***REMOVED***;
            expect(err.response.headers***REMOVED***.to.deep.equal({}***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the message with the passed in message', function (done***REMOVED*** {

            expect(Boom.unauthorized('my message'***REMOVED***.message***REMOVED***.to.equal('my message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns a WWW-Authenticate header when passed a scheme', function (done***REMOVED*** {

            var err = Boom.unauthorized('boom', 'Test'***REMOVED***;
            expect(err.response.code***REMOVED***.to.equal(401***REMOVED***;
            expect(err.response.headers['WWW-Authenticate']***REMOVED***.to.equal('Test error="boom"'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns a WWW-Authenticate header when passed a scheme and attributes', function (done***REMOVED*** {

            var err = Boom.unauthorized('boom', 'Test', { a: 1, b: 'something', c: null, d: 0 }***REMOVED***;
            expect(err.response.code***REMOVED***.to.equal(401***REMOVED***;
            expect(err.response.headers['WWW-Authenticate']***REMOVED***.to.equal('Test a="1", b="something", c="", d="0", error="boom"'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the isMissing flag when error message is empty', function (done***REMOVED*** {

            var err = Boom.unauthorized('', 'Basic'***REMOVED***;
            expect(err.isMissing***REMOVED***.to.equal(true***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('does not set the isMissing flag when error message is not empty', function (done***REMOVED*** {

            var err = Boom.unauthorized('message', 'Basic'***REMOVED***;
            expect(err.isMissing***REMOVED***.to.equal(undefined***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets a WWW-Authenticate when passed as an array', function (done***REMOVED*** {

            var err = Boom.unauthorized('message', ['Basic', 'Example e="1"', 'Another x="3", y="4"']***REMOVED***;
            expect(err.response.headers['WWW-Authenticate']***REMOVED***.to.equal('Basic, Example e="1", Another x="3", y="4"'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#clientTimeout', function (***REMOVED*** {

        it('returns a 408 error code', function (done***REMOVED*** {

            expect(Boom.clientTimeout(***REMOVED***.response.code***REMOVED***.to.equal(408***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the message with the passed in message', function (done***REMOVED*** {

            expect(Boom.clientTimeout('my message'***REMOVED***.message***REMOVED***.to.equal('my message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#serverTimeout', function (***REMOVED*** {

        it('returns a 503 error code', function (done***REMOVED*** {

            expect(Boom.serverTimeout(***REMOVED***.response.code***REMOVED***.to.equal(503***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the message with the passed in message', function (done***REMOVED*** {

            expect(Boom.serverTimeout('my message'***REMOVED***.message***REMOVED***.to.equal('my message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#forbidden', function (***REMOVED*** {

        it('returns a 403 error code', function (done***REMOVED*** {

            expect(Boom.forbidden(***REMOVED***.response.code***REMOVED***.to.equal(403***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the message with the passed in message', function (done***REMOVED*** {

            expect(Boom.forbidden('my message'***REMOVED***.message***REMOVED***.to.equal('my message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#notFound', function (***REMOVED*** {

        it('returns a 404 error code', function (done***REMOVED*** {

            expect(Boom.notFound(***REMOVED***.response.code***REMOVED***.to.equal(404***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the message with the passed in message', function (done***REMOVED*** {

            expect(Boom.notFound('my message'***REMOVED***.message***REMOVED***.to.equal('my message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#internal', function (***REMOVED*** {

        it('returns a 500 error code', function (done***REMOVED*** {

            expect(Boom.internal(***REMOVED***.response.code***REMOVED***.to.equal(500***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('sets the message with the passed in message', function (done***REMOVED*** {

            var err = Boom.internal('my message'***REMOVED***;
            expect(err.message***REMOVED***.to.equal('my message'***REMOVED***;
            expect(err.response.payload.message***REMOVED***.to.equal('An internal server error occurred'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('passes data on the callback if its passed in', function (done***REMOVED*** {

            expect(Boom.internal('my message', { my: 'data' }***REMOVED***.data.my***REMOVED***.to.equal('data'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('uses passed in stack if its available', function (done***REMOVED*** {

            var error = new Error(***REMOVED***;
            error.stack = 'my stack line\nmy second stack line';
            expect(Boom.internal('my message', error***REMOVED***.trace[0]***REMOVED***.to.equal('my stack line'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#passThrough', function (***REMOVED*** {

        it('returns a pass-through error', function (done***REMOVED*** {

            var err = Boom.passThrough(499, { a: 1 }, 'application/text', { 'X-Test': 'Boom' }***REMOVED***;
            expect(err.response.code***REMOVED***.to.equal(499***REMOVED***;
            expect(err.message***REMOVED***.to.equal('Pass-through'***REMOVED***;
            expect(err.response***REMOVED***.to.deep.equal({
                code: 499,
                payload: { a: 1 },
                headers: { 'X-Test': 'Boom' },
                type: 'application/text'
          ***REMOVED******REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#reformat', function (***REMOVED*** {

        it('encodes any HTML markup in the response payload', function (done***REMOVED*** {

            var boom = new Boom(new Error('<script>alert(1***REMOVED***</script>'***REMOVED******REMOVED***;
            expect(boom.response.payload.message***REMOVED***.to.not.contain('<script>'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;


