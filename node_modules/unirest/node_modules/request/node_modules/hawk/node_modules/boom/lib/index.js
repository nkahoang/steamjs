// Load modules

var Http = require('http'***REMOVED***;
var NodeUtil = require('util'***REMOVED***;
var Hoek = require('hoek'***REMOVED***;


// Declare internals

var internals = {};


exports = module.exports = internals.Boom = function (/* (new Error***REMOVED*** or (code, message***REMOVED*** */***REMOVED*** {

    var self = this;

    Hoek.assert(this.constructor === internals.Boom, 'Error must be instantiated using new'***REMOVED***;

    Error.call(this***REMOVED***;
    this.isBoom = true;

    this.response = {
        code: 0,
        payload: {},
        headers: {}
        // type: 'content-type'
  ***REMOVED***;

    if (arguments[0] instanceof Error***REMOVED*** {

        // Error

        var error = arguments[0];

        this.data = error;
        this.response.code = error.code || 500;
        if (error.message***REMOVED*** {
            this.message = error.message;
      ***REMOVED***
  ***REMOVED***
    else {

        // code, message

        var code = arguments[0];
        var message = arguments[1];

        Hoek.assert(!isNaN(parseFloat(code***REMOVED******REMOVED*** && isFinite(code***REMOVED*** && code >= 400, 'First argument must be a number (400+***REMOVED***'***REMOVED***;

        this.response.code = code;
        if (message***REMOVED*** {
            this.message = message;
      ***REMOVED***
  ***REMOVED***

    // Response format

    this.reformat(***REMOVED***;

    return this;
};

NodeUtil.inherits(internals.Boom, Error***REMOVED***;


internals.Boom.prototype.reformat = function (***REMOVED*** {

    this.response.payload.code = this.response.code;
    this.response.payload.error = Http.STATUS_CODES[this.response.code] || 'Unknown';
    if (this.message***REMOVED*** {
        this.response.payload.message = Hoek.escapeHtml(this.message***REMOVED***;         // Prevent XSS from error message
  ***REMOVED***
};


// Utilities

internals.Boom.badRequest = function (message***REMOVED*** {

    return new internals.Boom(400, message***REMOVED***;
};


internals.Boom.unauthorized = function (message, scheme, attributes***REMOVED*** {          // Or function (message, wwwAuthenticate[]***REMOVED***

    var err = new internals.Boom(401, message***REMOVED***;

    if (!scheme***REMOVED*** {
        return err;
  ***REMOVED***

    var wwwAuthenticate = '';

    if (typeof scheme === 'string'***REMOVED*** {

        // function (message, scheme, attributes***REMOVED***

        wwwAuthenticate = scheme;
        if (attributes***REMOVED*** {
            var names = Object.keys(attributes***REMOVED***;
            for (var i = 0, il = names.length; i < il; ++i***REMOVED*** {
                if (i***REMOVED*** {
                    wwwAuthenticate += ',';
              ***REMOVED***

                var value = attributes[names[i]];
                if (value === null ||
                    value === undefined***REMOVED*** {              // Value can be zero

                    value = '';
              ***REMOVED***
                wwwAuthenticate += ' ' + names[i] + '="' + Hoek.escapeHeaderAttribute(value.toString(***REMOVED******REMOVED*** + '"';
          ***REMOVED***
      ***REMOVED***

        if (message***REMOVED*** {
            if (attributes***REMOVED*** {
                wwwAuthenticate += ',';
          ***REMOVED***
            wwwAuthenticate += ' error="' + Hoek.escapeHeaderAttribute(message***REMOVED*** + '"';
      ***REMOVED***
        else {
            err.isMissing = true;
      ***REMOVED***
  ***REMOVED***
    else {

        // function (message, wwwAuthenticate[]***REMOVED***

        var wwwArray = scheme;
        for (var i = 0, il = wwwArray.length; i < il; ++i***REMOVED*** {
            if (i***REMOVED*** {
                wwwAuthenticate += ', ';
          ***REMOVED***

            wwwAuthenticate += wwwArray[i];
      ***REMOVED***
  ***REMOVED***

    err.response.headers['WWW-Authenticate'] = wwwAuthenticate;

    return err;
};


internals.Boom.clientTimeout = function (message***REMOVED*** {

    return new internals.Boom(408, message***REMOVED***;
};


internals.Boom.serverTimeout = function (message***REMOVED*** {

    return new internals.Boom(503, message***REMOVED***;
};


internals.Boom.forbidden = function (message***REMOVED*** {

    return new internals.Boom(403, message***REMOVED***;
};


internals.Boom.notFound = function (message***REMOVED*** {

    return new internals.Boom(404, message***REMOVED***;
};


internals.Boom.internal = function (message, data***REMOVED*** {

    var err = new internals.Boom(500, message***REMOVED***;

    if (data && data.stack***REMOVED*** {
        err.trace = data.stack.split('\n'***REMOVED***;
        err.outterTrace = Hoek.displayStack(1***REMOVED***;
  ***REMOVED***
    else {
        err.trace = Hoek.displayStack(1***REMOVED***;
  ***REMOVED***

    err.data = data;
    err.response.payload.message = 'An internal server error occurred';                     // Hide actual error from user

    return err;
};


internals.Boom.passThrough = function (code, payload, contentType, headers***REMOVED*** {

    var err = new internals.Boom(500, 'Pass-through'***REMOVED***;                                      // 500 code is only used to initialize

    err.data = {
        code: code,
        payload: payload,
        type: contentType
  ***REMOVED***;

    err.response.code = code;
    err.response.type = contentType;
    err.response.headers = headers;
    err.response.payload = payload;

    return err;
};


