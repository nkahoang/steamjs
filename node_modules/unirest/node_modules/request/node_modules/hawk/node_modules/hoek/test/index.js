// Load modules

var Lab = require('lab'***REMOVED***;
var Hoek = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Hoek', function (***REMOVED*** {

    var nestedObj = {
        v: [7,8,9],
        w: /^something$/igm,
        x: {
            a: [1, 2, 3],
            b: 123456,
            c: new Date(***REMOVED***,
            d: /hi/igm,
            e: /hello/
      ***REMOVED***,
        y: 'y',
        z: new Date(***REMOVED***
  ***REMOVED***;

    var dupsArray = [nestedObj, { z: 'z' }, nestedObj];
    var reducedDupsArray = [nestedObj, { z: 'z' }];

    describe('#clone', function (***REMOVED*** {

        it('should clone a nested object', function (done***REMOVED*** {

            var a = nestedObj;
            var b = Hoek.clone(a***REMOVED***;

            expect(a***REMOVED***.to.deep.equal(b***REMOVED***;
            expect(a.z.getTime(***REMOVED******REMOVED***.to.equal(b.z.getTime(***REMOVED******REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should clone a null object', function (done***REMOVED*** {

            var b = Hoek.clone(null***REMOVED***;

            expect(b***REMOVED***.to.equal(null***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should not convert undefined properties to null', function (done***REMOVED*** {

            var obj = { something: undefined };
            var b = Hoek.clone(obj***REMOVED***;

            expect(typeof b.something***REMOVED***.to.equal('undefined'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should not throw on circular reference', function (done***REMOVED*** {

            var a = {};
            a.x = a;

            var test = (function (***REMOVED*** {

                var b = Hoek.clone(a***REMOVED***;
          ***REMOVED******REMOVED***;

            expect(test***REMOVED***.to.not.throw(***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should properly clone circular reference', function (done***REMOVED*** {

            var x = {
                'z': new Date(***REMOVED***
          ***REMOVED***;
            x.y = x;

            var b = Hoek.clone(x***REMOVED***;
            expect(Object.keys(b.y***REMOVED******REMOVED***.to.deep.equal(Object.keys(x***REMOVED******REMOVED***
            expect(b.z***REMOVED***.to.not.equal(x.z***REMOVED***;
            expect(b.y***REMOVED***.to.not.equal(x.y***REMOVED***;
            expect(b.y.z***REMOVED***.to.not.equal(x.y.z***REMOVED***;
            expect(b.y***REMOVED***.to.equal(b***REMOVED***;
            expect(b.y.y.y.y***REMOVED***.to.equal(b***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should properly clone deeply nested object', function (done***REMOVED*** {

            var a = {
                x: {
                    y: {
                        a: [1, 2, 3],
                        b: 123456,
                        c: new Date(***REMOVED***,
                        d: /hi/igm,
                        e: /hello/
                  ***REMOVED***,
              ***REMOVED***
          ***REMOVED***;

            var b = Hoek.clone(a***REMOVED***;

            expect(a***REMOVED***.to.deep.equal(b***REMOVED***;
            expect(a.x.y.c.getTime(***REMOVED******REMOVED***.to.equal(b.x.y.c.getTime(***REMOVED******REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should properly clone arrays', function (done***REMOVED*** {

            var a = [1,2,3];

            var b = Hoek.clone(a***REMOVED***;

            expect(a***REMOVED***.to.deep.equal(b***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should perform actual copy for shallow keys (no pass by reference***REMOVED***', function (done***REMOVED*** {

            var x = Hoek.clone(nestedObj***REMOVED***;
            var y = Hoek.clone(nestedObj***REMOVED***;

            // Date
            expect(x.z***REMOVED***.to.not.equal(nestedObj.z***REMOVED***;
            expect(x.z***REMOVED***.to.not.equal(y.z***REMOVED***;

            // Regex
            expect(x.w***REMOVED***.to.not.equal(nestedObj.w***REMOVED***;
            expect(x.w***REMOVED***.to.not.equal(y.w***REMOVED***;

            // Array
            expect(x.v***REMOVED***.to.not.equal(nestedObj.v***REMOVED***;
            expect(x.v***REMOVED***.to.not.equal(y.v***REMOVED***;

            // Immutable(s***REMOVED***
            x.y = 5;
            expect(x.y***REMOVED***.to.not.equal(nestedObj.y***REMOVED***;
            expect(x.y***REMOVED***.to.not.equal(y.y***REMOVED***;

            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should perform actual copy for deep keys (no pass by reference***REMOVED***', function (done***REMOVED*** {

            var x = Hoek.clone(nestedObj***REMOVED***;
            var y = Hoek.clone(nestedObj***REMOVED***;

            expect(x.x.c***REMOVED***.to.not.equal(nestedObj.x.c***REMOVED***;
            expect(x.x.c***REMOVED***.to.not.equal(y.x.c***REMOVED***;

            expect(x.x.c.getTime(***REMOVED******REMOVED***.to.equal(nestedObj.x.c.getTime(***REMOVED******REMOVED***;
            expect(x.x.c.getTime(***REMOVED******REMOVED***.to.equal(y.x.c.getTime(***REMOVED******REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('copies functions with properties', function (done***REMOVED*** {

            var a = {
                x: function (***REMOVED*** { return 1; },
                y: {}
          ***REMOVED***;
            a.x.z = 'string in function';
            a.x.v = function (***REMOVED*** { return 2; };
            a.y.u = a.x;

            var b = Hoek.clone(a***REMOVED***;
            expect(b.x(***REMOVED******REMOVED***.to.equal(1***REMOVED***;
            expect(b.x.v(***REMOVED******REMOVED***.to.equal(2***REMOVED***;
            expect(b.y.u***REMOVED***.to.equal(b.x***REMOVED***;
            expect(b.x.z***REMOVED***.to.equal('string in function'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should copy a buffer', function(done***REMOVED***{
            var tls = {
                key: new Buffer([1,2,3,4,5]***REMOVED***,
                cert: new Buffer([1,2,3,4,5,6,10]***REMOVED***
          ***REMOVED***

            copiedTls = Hoek.clone(tls***REMOVED***;
            expect(Buffer.isBuffer(copiedTls.key***REMOVED******REMOVED***.to.equal(true***REMOVED***;
            expect(JSON.stringify(copiedTls.key***REMOVED******REMOVED***.to.equal(JSON.stringify(tls.key***REMOVED******REMOVED***
            expect(Buffer.isBuffer(copiedTls.cert***REMOVED******REMOVED***.to.equal(true***REMOVED***;
            expect(JSON.stringify(copiedTls.cert***REMOVED******REMOVED***.to.equal(JSON.stringify(tls.cert***REMOVED******REMOVED***
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#merge', function (***REMOVED*** {

        it('does not throw if source is null', function (done***REMOVED*** {

            var a = {};
            var b = null;
            var c = null;

            expect(function (***REMOVED*** {

                c = Hoek.merge(a, b***REMOVED***;
          ***REMOVED******REMOVED***.to.not.throw(***REMOVED***;

            expect(c***REMOVED***.to.equal(a***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('does not throw if source is undefined', function (done***REMOVED*** {

            var a = {};
            var b = undefined;
            var c = null;

            expect(function (***REMOVED*** {

                c = Hoek.merge(a, b***REMOVED***;
          ***REMOVED******REMOVED***.to.not.throw(***REMOVED***;

            expect(c***REMOVED***.to.equal(a***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('throws if source is not an object', function (done***REMOVED*** {

            expect(function (***REMOVED*** {

                var a = {};
                var b = 0;

                Hoek.merge(a, b***REMOVED***;
          ***REMOVED******REMOVED***.to.throw('Invalid source value: must be null, undefined, or an object'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('throws if target is not an object', function (done***REMOVED*** {

            expect(function (***REMOVED*** {

                var a = 0;
                var b = {};

                Hoek.merge(a, b***REMOVED***;
          ***REMOVED******REMOVED***.to.throw('Invalid target value: must be an object'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('throws if target is not an array and source is', function (done***REMOVED*** {

            expect(function (***REMOVED*** {

                var a = {};
                var b = [1, 2];

                Hoek.merge(a, b***REMOVED***;
          ***REMOVED******REMOVED***.to.throw('Cannot merge array onto an object'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns the same object when merging arrays', function (done***REMOVED*** {

            var a = [];
            var b = [1, 2];

            expect(Hoek.merge(a, b***REMOVED******REMOVED***.to.equal(a***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should combine an empty object with a non-empty object', function (done***REMOVED*** {

            var a = {};
            var b = nestedObj;

            var c = Hoek.merge(a, b***REMOVED***;
            expect(a***REMOVED***.to.deep.equal(b***REMOVED***;
            expect(c***REMOVED***.to.deep.equal(b***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should override values in target', function (done***REMOVED*** {

            var a = { x: 1, y: 2, z: 3, v: 5, t: 'test', m: 'abc' };
            var b = { x: null, z: 4, v: 0, t: { u: 6 }, m: '123' };

            var c = Hoek.merge(a, b***REMOVED***;
            expect(c.x***REMOVED***.to.equal(null***REMOVED***;
            expect(c.y***REMOVED***.to.equal(2***REMOVED***;
            expect(c.z***REMOVED***.to.equal(4***REMOVED***;
            expect(c.v***REMOVED***.to.equal(0***REMOVED***;
            expect(c.m***REMOVED***.to.equal('123'***REMOVED***;
            expect(c.t***REMOVED***.to.deep.equal({ u: 6 }***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should override values in target (flip***REMOVED***', function (done***REMOVED*** {

            var a = { x: 1, y: 2, z: 3, v: 5, t: 'test', m: 'abc' };
            var b = { x: null, z: 4, v: 0, t: { u: 6 }, m: '123' };

            var d = Hoek.merge(b, a***REMOVED***;
            expect(d.x***REMOVED***.to.equal(1***REMOVED***;
            expect(d.y***REMOVED***.to.equal(2***REMOVED***;
            expect(d.z***REMOVED***.to.equal(3***REMOVED***;
            expect(d.v***REMOVED***.to.equal(5***REMOVED***;
            expect(d.m***REMOVED***.to.equal('abc'***REMOVED***;
            expect(d.t***REMOVED***.to.deep.equal('test'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#applyToDefaults', function (***REMOVED*** {

        var defaults = {
            a: 1,
            b: 2,
            c: {
                d: 3,
                e: [5, 6]
          ***REMOVED***,
            f: 6,
            g: 'test'
      ***REMOVED***;

        it('should return null if options is false', function (done***REMOVED*** {

            var result = Hoek.applyToDefaults(defaults, false***REMOVED***;
            expect(result***REMOVED***.to.equal(null***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return a copy of defaults if options is true', function (done***REMOVED*** {

            var result = Hoek.applyToDefaults(defaults, true***REMOVED***;
            expect(result***REMOVED***.to.deep.equal(result***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should apply object to defaults', function (done***REMOVED*** {

            var obj = {
                a: null,
                c: {
                    e: [4]
              ***REMOVED***,
                f: 0,
                g: {
                    h: 5
              ***REMOVED***
          ***REMOVED***;

            var result = Hoek.applyToDefaults(defaults, obj***REMOVED***;
            expect(result.c.e***REMOVED***.to.deep.equal([4]***REMOVED***;
            expect(result.a***REMOVED***.to.equal(1***REMOVED***;
            expect(result.b***REMOVED***.to.equal(2***REMOVED***;
            expect(result.f***REMOVED***.to.equal(0***REMOVED***;
            expect(result.g***REMOVED***.to.deep.equal({ h: 5 }***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#unique', function (***REMOVED*** {

        it('should ensure uniqueness within array of objects based on subkey', function (done***REMOVED*** {

            var a = Hoek.unique(dupsArray, 'x'***REMOVED***;
            expect(a***REMOVED***.to.deep.equal(reducedDupsArray***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('removes duplicated without key', function (done***REMOVED*** {

            expect(Hoek.unique([1, 2, 3, 4, 2, 1, 5]***REMOVED******REMOVED***.to.deep.equal([1, 2, 3, 4, 5]***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#mapToObject', function (***REMOVED*** {

        it('should return null on null array', function (done***REMOVED*** {

            var a = Hoek.mapToObject(null***REMOVED***;
            expect(a***REMOVED***.to.equal(null***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should convert basic array to existential object', function (done***REMOVED*** {

            var keys = [1, 2, 3, 4];
            var a = Hoek.mapToObject(keys***REMOVED***;
            for (var i in keys***REMOVED*** {
                expect(a[keys[i]]***REMOVED***.to.equal(true***REMOVED***;
          ***REMOVED***
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should convert array of objects to existential object', function (done***REMOVED*** {

            var keys = [{ x: 1 }, { x: 2 }, { x: 3 }];
            var subkey = 'x';
            var a = Hoek.mapToObject(keys, subkey***REMOVED***;
            for (var i in keys***REMOVED*** {
                expect(a[keys[i][subkey]]***REMOVED***.to.equal(true***REMOVED***;
          ***REMOVED***
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#intersect', function (***REMOVED*** {

        it('should return the common objects of two arrays', function (done***REMOVED*** {

            var array1 = [1, 2, 3, 4, 4, 5, 5];
            var array2 = [5, 4, 5, 6, 7];
            var common = Hoek.intersect(array1, array2***REMOVED***;
            expect(common.length***REMOVED***.to.equal(2***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return just the first common object of two arrays', function (done***REMOVED*** {

            var array1 = [1, 2, 3, 4, 4, 5, 5];
            var array2 = [5, 4, 5, 6, 7];
            var common = Hoek.intersect(array1, array2, true***REMOVED***;
            expect(common***REMOVED***.to.equal(5***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return an empty array if either input is null', function (done***REMOVED*** {

            expect(Hoek.intersect([1], null***REMOVED***.length***REMOVED***.to.equal(0***REMOVED***;
            expect(Hoek.intersect(null, [1]***REMOVED***.length***REMOVED***.to.equal(0***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return the common objects of object and array', function (done***REMOVED*** {

            var array1 = [1, 2, 3, 4, 4, 5, 5];
            var array2 = [5, 4, 5, 6, 7];
            var common = Hoek.intersect(Hoek.mapToObject(array1***REMOVED***, array2***REMOVED***;
            expect(common.length***REMOVED***.to.equal(2***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#matchKeys', function (***REMOVED*** {

        it('should match the existing object keys', function (done***REMOVED*** {

            var obj = {
                a: 1,
                b: 2,
                c: 3,
                d: null
          ***REMOVED***;

            expect(Hoek.matchKeys(obj, ['b', 'c', 'd', 'e']***REMOVED******REMOVED***.to.deep.equal(['b', 'c', 'd']***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#flatten', function (***REMOVED*** {

        it('should return a flat array', function (done***REMOVED*** {

            var result = Hoek.flatten([1, 2, [3, 4, [5, 6], [7], 8], [9], [10, [11, 12]], 13]***REMOVED***;
            expect(result.length***REMOVED***.to.equal(13***REMOVED***;
            expect(result***REMOVED***.to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#removeKeys', function (***REMOVED*** {

        var objWithHiddenKeys = {
            location: {
                name: 'San Bruno'
          ***REMOVED***,
            company: {
                name: '@WalmartLabs'
          ***REMOVED***
      ***REMOVED***;

        it('should delete params with definition\'s hide set to true', function (done***REMOVED*** {

            var a = Hoek.removeKeys(objWithHiddenKeys, ['location']***REMOVED***;
            expect(objWithHiddenKeys.location***REMOVED***.to.not.exist;
            expect(objWithHiddenKeys.company***REMOVED***.to.exist;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#reach', function (***REMOVED*** {

        var obj = {
            a: {
                b: {
                    c: {
                        d: 1,
                        e: 2
                  ***REMOVED***,
                    f: 'hello'
              ***REMOVED***,
                g: {
                    h: 3
              ***REMOVED***
          ***REMOVED***,
            i: function (***REMOVED*** { }
      ***REMOVED***;

        it('returns a valid member', function (done***REMOVED*** {

            expect(Hoek.reach(obj, 'a.b.c.d'***REMOVED******REMOVED***.to.equal(1***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns null on null object', function (done***REMOVED*** {

            expect(Hoek.reach(null, 'a.b.c.d'***REMOVED******REMOVED***.to.not.exist;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns null on missing member', function (done***REMOVED*** {

            expect(Hoek.reach(obj, 'a.b.c.d.x'***REMOVED******REMOVED***.to.not.exist;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns null on invalid member', function (done***REMOVED*** {

            expect(Hoek.reach(obj, 'a.b.c.d-.x'***REMOVED******REMOVED***.to.not.exist;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns function member', function (done***REMOVED*** {

            expect(typeof Hoek.reach(obj, 'i'***REMOVED******REMOVED***.to.equal('function'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#inheritAsync', function (***REMOVED*** {

        it('should inherit selected methods and wrap in async call', function (done***REMOVED*** {

            var proto = {
                a: function (***REMOVED*** {
                    return 'a!';
              ***REMOVED***,
                b: function (***REMOVED*** {
                    return 'b!';
              ***REMOVED***,
                c: function (***REMOVED*** {
                    throw new Error('c!'***REMOVED***;
              ***REMOVED***
          ***REMOVED***;

            var targetFunc = function (***REMOVED*** { };
            targetFunc.prototype.c = function (***REMOVED*** {

                return 'oops';
          ***REMOVED***;

            Hoek.inheritAsync(targetFunc, proto, ['a', 'c']***REMOVED***;
            var target = new targetFunc(***REMOVED***;

            expect(typeof target.a***REMOVED***.to.equal('function'***REMOVED***;
            expect(typeof target.c***REMOVED***.to.equal('function'***REMOVED***;
            expect(target.b***REMOVED***.to.not.exist;

            target.a(function (err, result***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(result***REMOVED***.to.equal('a!'***REMOVED***;

                target.c(function (err, result***REMOVED*** {

                    expect(result***REMOVED***.to.not.exist;
                    expect(err.message***REMOVED***.to.equal('c!'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#callStack', function (***REMOVED*** {

        it('should return the full call stack', function (done***REMOVED*** {

            var stack = Hoek.callStack(***REMOVED***;
            expect(stack[0][0]***REMOVED***.to.contain('index.js'***REMOVED***;
            expect(stack[0][2]***REMOVED***.to.equal(30***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#displayStack ', function (***REMOVED*** {

        it('should return the full call stack for display', function (done***REMOVED*** {

            var stack = Hoek.displayStack(***REMOVED***;
            expect(stack[0]***REMOVED***.to.contain('test/index.js:'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should include constructor functions correctly', function (done***REMOVED*** {

            var Something = function (next***REMOVED*** {

                next(***REMOVED***;
          ***REMOVED***;

            var something = new Something(function (***REMOVED*** {

                var stack = Hoek.displayStack(***REMOVED***;
                expect(stack[1]***REMOVED***.to.contain('new Something'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#abort', function (***REMOVED*** {

        it('should exit process when not in test mode', function (done***REMOVED*** {

            var env = process.env.NODE_ENV;
            var write = process.stdout.write;
            var exit = process.exit;

            process.env.NODE_ENV = 'nottatest';
            process.stdout.write = function (***REMOVED*** { };
            process.exit = function (state***REMOVED*** {

                process.exit = exit;
                process.env.NODE_ENV = env;
                process.stdout.write = write;

                expect(state***REMOVED***.to.equal(1***REMOVED***;
                done(***REMOVED***;
          ***REMOVED***;

            Hoek.abort('Boom'***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should throw when not in test mode and abortThrow is true', function (done***REMOVED*** {

            var env = process.env.NODE_ENV;
            process.env.NODE_ENV = 'nottatest';
            Hoek.abortThrow = true;

            var fn = function (***REMOVED*** {

                Hoek.abort('my error message'***REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw('my error message'***REMOVED***;
            Hoek.abortThrow = false;
            process.env.NODE_ENV = env;

            done(***REMOVED***;
      ***REMOVED******REMOVED***;


        it('should respect hideStack argument', function (done***REMOVED*** {

            var env = process.env.NODE_ENV;
            var write = process.stdout.write;
            var exit = process.exit;
            var output = '';

            process.exit = function (***REMOVED*** { };
            process.env.NODE_ENV = '';
            process.stdout.write = function (message***REMOVED*** {

                output = message;
          ***REMOVED***;

            Hoek.abort('my error message', true***REMOVED***;

            process.env.NODE_ENV = env;
            process.stdout.write = write;
            process.exit = exit;

            expect(output***REMOVED***.to.equal('ABORT: my error message\n\t\n'***REMOVED***;

            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should default to showing stack', function (done***REMOVED*** {

            var env = process.env.NODE_ENV;
            var write = process.stdout.write;
            var exit = process.exit;
            var output = '';

            process.exit = function (***REMOVED*** { };
            process.env.NODE_ENV = '';
            process.stdout.write = function (message***REMOVED*** {

                output = message;
          ***REMOVED***;

            Hoek.abort('my error message'***REMOVED***;

            process.env.NODE_ENV = env;
            process.stdout.write = write;
            process.exit = exit;

            expect(output***REMOVED***.to.contain('index.js'***REMOVED***;

            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#assert', function (***REMOVED*** {

        it('should throw an Error when using assert in a test', function (done***REMOVED*** {

            var fn = function (***REMOVED*** {

                Hoek.assert(false, 'my error message'***REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw('my error message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should throw an Error when using assert in a test with no message', function (done***REMOVED*** {

            var fn = function (***REMOVED*** {

                Hoek.assert(false***REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw('Unknown error'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should throw an Error when using assert in a test with multipart message', function (done***REMOVED*** {

            var fn = function (***REMOVED*** {

                Hoek.assert(false, 'This', 'is', 'my message'***REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw('This is my message'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should throw an Error when using assert in a test with object message', function (done***REMOVED*** {

            var fn = function (***REMOVED*** {

                Hoek.assert(false, 'This', 'is', { spinal: 'tap' }***REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw('This is {"spinal":"tap"}'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should throw an Error when using assert in a test with error object message', function (done***REMOVED*** {

            var fn = function (***REMOVED*** {

                Hoek.assert(false, new Error('This is spinal tap'***REMOVED******REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw('This is spinal tap'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#loadDirModules', function (***REMOVED*** {

        it('should load modules from directory', function (done***REMOVED*** {

            var target = {};
            Hoek.loadDirModules(__dirname + '/modules', ['test2'], target***REMOVED***;
            expect(target.Test1.x***REMOVED***.to.equal(1***REMOVED***;
            expect(target.Test2***REMOVED***.to.not.exist;
            expect(target.Test3.z***REMOVED***.to.equal(3***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should list modules from directory into function', function (done***REMOVED*** {

            var target = {};
            Hoek.loadDirModules(__dirname + '/modules', ['test2'], function (path, name, capName***REMOVED*** {

                target[name] = capName;
          ***REMOVED******REMOVED***;

            expect(target.test1***REMOVED***.to.equal('Test1'***REMOVED***;
            expect(target.test2***REMOVED***.to.not.exist;
            expect(target.test3***REMOVED***.to.equal('Test3'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#rename', function (***REMOVED*** {

        it('should rename object key', function (done***REMOVED*** {

            var a = { b: 'c' };
            Hoek.rename(a, 'b', 'x'***REMOVED***;
            expect(a.b***REMOVED***.to.not.exist;
            expect(a.x***REMOVED***.to.equal('c'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('Timer', function (***REMOVED*** {

        it('should return time elapsed', function (done***REMOVED*** {

            var timer = new Hoek.Timer(***REMOVED***;
            setTimeout(function (***REMOVED*** {

                expect(timer.elapsed(***REMOVED******REMOVED***.to.be.above(9***REMOVED***;
                done(***REMOVED***;
          ***REMOVED***, 12***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#loadPackage', function (***REMOVED*** {

        it('should', function (done***REMOVED*** {

            var pack = Hoek.loadPackage(***REMOVED***;
            expect(pack.name***REMOVED***.to.equal('hoek'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#escapeRegex', function (***REMOVED*** {

        it('should escape all special regular expression characters', function (done***REMOVED*** {

            var a = Hoek.escapeRegex('4^f$s.4*5+-_?%=#!:@|~\\/`"(>***REMOVED***[<]d{}s,'***REMOVED***;
            expect(a***REMOVED***.to.equal('4\\^f\\$s\\.4\\*5\\+\\-_\\?%\\=#\\!\\:@\\|~\\\\\\/`"\\(>\\***REMOVED***\\[<\\]d\\{\\}s\\,'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#toss', function (***REMOVED*** {

        it('should call callback with new error', function (done***REMOVED*** {

            var callback = function (err***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('bug'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED***;

            Hoek.toss(true, 'feature', callback***REMOVED***;
            Hoek.toss(false, 'bug', callback***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should call callback with new error and no message', function (done***REMOVED*** {

            Hoek.toss(false, function (err***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal(''***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should call callback with error condition', function (done***REMOVED*** {

            Hoek.toss(new Error('boom'***REMOVED***, function (err***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('boom'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should call callback with new error using message with error condition', function (done***REMOVED*** {

            Hoek.toss(new Error('ka'***REMOVED***, 'boom', function (err***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('boom'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should call callback with new error using passed error with error condition', function (done***REMOVED*** {

            Hoek.toss(new Error('ka'***REMOVED***, new Error('boom'***REMOVED***, function (err***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('boom'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('Base64Url', function (***REMOVED*** {

        var base64str = 'AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0-P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn-AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq-wsbKztLW2t7i5uru8vb6_wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t_g4eLj5OXm5-jp6uvs7e7v8PHy8_T19vf4-fr7_P3-_w';
        var str = unescape('%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28%29*+%2C-./0123456789%3A%3B%3C%3D%3E%3F@ABCDEFGHIJKLMNOPQRSTUVWXYZ%5B%5C%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF'***REMOVED***;

        describe('#base64urlEncode', function (***REMOVED*** {

            it('should base64 URL-safe a string', function (done***REMOVED*** {

                expect(Hoek.base64urlEncode(str***REMOVED******REMOVED***.to.equal(base64str***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        describe('#base64urlDecode', function (***REMOVED*** {

            it('should un-base64 URL-safe a string', function (done***REMOVED*** {

                expect(Hoek.base64urlDecode(base64str***REMOVED******REMOVED***.to.equal(str***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('should return error on undefined input', function (done***REMOVED*** {

                expect(Hoek.base64urlDecode(***REMOVED***.message***REMOVED***.to.exist;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('should return error on invalid input', function (done***REMOVED*** {

                expect(Hoek.base64urlDecode('*'***REMOVED***.message***REMOVED***.to.exist;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#escapeHeaderAttribute', function (***REMOVED*** {

        it('should not alter ascii values', function (done***REMOVED*** {

            var a = Hoek.escapeHeaderAttribute('My Value'***REMOVED***;
            expect(a***REMOVED***.to.equal('My Value'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should escape all special HTTP header attribute characters', function (done***REMOVED*** {

            var a = Hoek.escapeHeaderAttribute('I said go!!!#"' + String.fromCharCode(92***REMOVED******REMOVED***;
            expect(a***REMOVED***.to.equal('I said go!!!#\\"\\\\'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should throw on large unicode characters', function (done***REMOVED*** {

            var fn = function (***REMOVED*** {

                Hoek.escapeHeaderAttribute('this is a test' + String.fromCharCode(500***REMOVED*** + String.fromCharCode(300***REMOVED******REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw(Error***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should throw on CRLF to prevent response splitting', function (done***REMOVED*** {

            var fn = function (***REMOVED*** {

                Hoek.escapeHeaderAttribute('this is a test\r\n'***REMOVED***;
          ***REMOVED***;

            expect(fn***REMOVED***.to.throw(Error***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#escapeHtml', function (***REMOVED*** {

        it('should escape all special HTML characters', function (done***REMOVED*** {

            var a = Hoek.escapeHtml('&<>"\'`'***REMOVED***;
            expect(a***REMOVED***.to.equal('&amp;&lt;&gt;&quot;&#x27;&#x60;'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return empty string on falsy input', function (done***REMOVED*** {

            var a = Hoek.escapeHtml(''***REMOVED***;
            expect(a***REMOVED***.to.equal(''***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return unchanged string on no reserved input', function (done***REMOVED*** {

            var a = Hoek.escapeHtml('abc'***REMOVED***;
            expect(a***REMOVED***.to.equal('abc'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#printEvent', function (***REMOVED*** {

        it('outputs event as string', function (done***REMOVED*** {

            var event = {
                timestamp: (new Date(2013, 1, 1, 6, 30, 45, 123***REMOVED******REMOVED***.getTime(***REMOVED***,
                tags: ['a', 'b', 'c'],
                data: { some: 'data' }
          ***REMOVED***;

            Hoek.consoleFunc = function (string***REMOVED*** {

                Hoek.consoleFunc = console.log;
                expect(string***REMOVED***.to.equal('130201/063045.123, a, {"some":"data"}'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED***;

            Hoek.printEvent(event***REMOVED***;
      ***REMOVED******REMOVED***;

        it('outputs JSON error', function (done***REMOVED*** {

            var event = {
                timestamp: (new Date(2013, 1, 1, 6, 30, 45, 123***REMOVED******REMOVED***.getTime(***REMOVED***,
                tags: ['a', 'b', 'c'],
                data: { some: 'data' }
          ***REMOVED***;

            event.data.a = event.data;

            Hoek.consoleFunc = function (string***REMOVED*** {

                Hoek.consoleFunc = console.log;
                expect(string***REMOVED***.to.equal('130201/063045.123, a, JSON Error: Converting circular structure to JSON'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED***;

            Hoek.printEvent(event***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#nextTick', function (***REMOVED*** {

        it('calls the provided callback on nextTick', function (done***REMOVED*** {

            var a = 0;

            var inc = function (step, next***REMOVED*** {

                a += step;
                next(***REMOVED***;
          ***REMOVED***;

            var ticked = Hoek.nextTick(inc***REMOVED***;

            ticked(5, function (***REMOVED*** {

                expect(a***REMOVED***.to.equal(6***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            expect(a***REMOVED***.to.equal(0***REMOVED***;
            inc(1, function (***REMOVED*** {

                expect(a***REMOVED***.to.equal(1***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;

