// Load modules

var Lab = require('lab'***REMOVED***;
var Hoek = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Hoek', function (***REMOVED*** {

    describe('#escapeJavaScript', function (***REMOVED*** {

        it('encodes / characters', function (done***REMOVED*** {

            var encoded = Hoek.escapeJavaScript('<script>alert(1***REMOVED***</script>'***REMOVED***;
            expect(encoded***REMOVED***.to.equal('\\x3cscript\\x3ealert\\x281\\x29\\x3c\\x2fscript\\x3e'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('encodes \' characters', function (done***REMOVED*** {

            var encoded = Hoek.escapeJavaScript('something(\'param\'***REMOVED***'***REMOVED***;
            expect(encoded***REMOVED***.to.equal('something\\x28\\x27param\\x27\\x29'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('encodes large unicode characters with the correct padding', function (done***REMOVED*** {

            var encoded = Hoek.escapeJavaScript(String.fromCharCode(500***REMOVED*** + String.fromCharCode(1000***REMOVED******REMOVED***;
            expect(encoded***REMOVED***.to.equal('\\u0500\\u1000'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('doesn\'t throw an exception when passed null', function (done***REMOVED*** {

            var encoded = Hoek.escapeJavaScript(null***REMOVED***;
            expect(encoded***REMOVED***.to.equal(''***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#escapeHtml', function (***REMOVED*** {

        it('encodes / characters', function (done***REMOVED*** {

            var encoded = Hoek.escapeHtml('<script>alert(1***REMOVED***</script>'***REMOVED***;
            expect(encoded***REMOVED***.to.equal('&lt;script&gt;alert&#x28;1&#x29;&lt;&#x2f;script&gt;'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('encodes < and > as named characters', function (done***REMOVED*** {

            var encoded = Hoek.escapeHtml('<script><>'***REMOVED***;
            expect(encoded***REMOVED***.to.equal('&lt;script&gt;&lt;&gt;'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('encodes large unicode characters', function (done***REMOVED*** {

            var encoded = Hoek.escapeHtml(String.fromCharCode(500***REMOVED*** + String.fromCharCode(1000***REMOVED******REMOVED***;
            expect(encoded***REMOVED***.to.equal('&#500;&#1000;'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('doesn\'t throw an exception when passed null', function (done***REMOVED*** {

            var encoded = Hoek.escapeHtml(null***REMOVED***;
            expect(encoded***REMOVED***.to.equal(''***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;


