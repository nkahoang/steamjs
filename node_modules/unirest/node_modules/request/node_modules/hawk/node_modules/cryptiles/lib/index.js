// Load modules

var Crypto = require('crypto'***REMOVED***;
var Boom = require('boom'***REMOVED***;


// Declare internals

var internals = {};


// Generate a cryptographically strong pseudo-random data

exports.randomString = function (size***REMOVED*** {

    var buffer = exports.randomBits((size + 1***REMOVED*** * 6***REMOVED***;
    if (buffer instanceof Error***REMOVED*** {
        return buffer;
  ***REMOVED***

    var string = buffer.toString('base64'***REMOVED***.replace(/\+/g, '-'***REMOVED***.replace(/\//g, '_'***REMOVED***.replace(/\=/g, ''***REMOVED***;
    return string.slice(0, size***REMOVED***;
};


exports.randomBits = function (bits***REMOVED*** {

    if (!bits ||
        bits < 0***REMOVED*** {

        return Boom.internal('Invalid random bits count'***REMOVED***;
  ***REMOVED***

    var bytes = Math.ceil(bits / 8***REMOVED***;
    try {
        return Crypto.randomBytes(bytes***REMOVED***;
  ***REMOVED***
    catch (err***REMOVED*** {
        return Boom.internal('Failed generating random bits: ' + err.message***REMOVED***;
  ***REMOVED***
};


// Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match***REMOVED***

exports.fixedTimeComparison = function (a, b***REMOVED*** {

    if (typeof a !== 'string' ||
        typeof b !== 'string'***REMOVED*** {

        return false;
  ***REMOVED***

    var mismatch = (a.length === b.length ? 0 : 1***REMOVED***;
    if (mismatch***REMOVED*** {
        b = a;
  ***REMOVED***

    for (var i = 0, il = a.length; i < il; ++i***REMOVED*** {
        var ac = a.charCodeAt(i***REMOVED***;
        var bc = b.charCodeAt(i***REMOVED***;
        mismatch += (ac === bc ? 0 : 1***REMOVED***;
  ***REMOVED***

    return (mismatch === 0***REMOVED***;
};


