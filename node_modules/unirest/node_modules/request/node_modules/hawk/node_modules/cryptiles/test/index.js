// Load modules

var Lab = require('lab'***REMOVED***;
var Cryptiles = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Cryptiles', function (***REMOVED*** {

    describe('#randomString', function (***REMOVED*** {

        it('should generate the right length string', function (done***REMOVED*** {

            for (var i = 1; i <= 1000; ++i***REMOVED*** {
                expect(Cryptiles.randomString(i***REMOVED***.length***REMOVED***.to.equal(i***REMOVED***;
          ***REMOVED***

            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns an error on invalid bits size', function (done***REMOVED*** {

            expect(Cryptiles.randomString(99999999999999999999***REMOVED***.message***REMOVED***.to.equal('Failed generating random bits: Argument #1 must be number > 0'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#randomBits', function (***REMOVED*** {

        it('returns an error on invalid input', function (done***REMOVED*** {

            expect(Cryptiles.randomBits(0***REMOVED***.message***REMOVED***.to.equal('Invalid random bits count'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#fixedTimeComparison', function (***REMOVED*** {

        var a = Cryptiles.randomString(50000***REMOVED***;
        var b = Cryptiles.randomString(150000***REMOVED***;

        it('should take the same amount of time comparing different string sizes', function (done***REMOVED*** {

            var now = Date.now(***REMOVED***;
            Cryptiles.fixedTimeComparison(b, a***REMOVED***;
            var t1 = Date.now(***REMOVED*** - now;

            now = Date.now(***REMOVED***;
            Cryptiles.fixedTimeComparison(b, b***REMOVED***;
            var t2 = Date.now(***REMOVED*** - now;

            expect(t2 - t1***REMOVED***.to.be.within(-20, 20***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return true for equal strings', function (done***REMOVED*** {

            expect(Cryptiles.fixedTimeComparison(a, a***REMOVED******REMOVED***.to.equal(true***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return false for different strings (size, a < b***REMOVED***', function (done***REMOVED*** {

            expect(Cryptiles.fixedTimeComparison(a, a + 'x'***REMOVED******REMOVED***.to.equal(false***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return false for different strings (size, a > b***REMOVED***', function (done***REMOVED*** {

            expect(Cryptiles.fixedTimeComparison(a + 'x', a***REMOVED******REMOVED***.to.equal(false***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return false for different strings (size, a = b***REMOVED***', function (done***REMOVED*** {

            expect(Cryptiles.fixedTimeComparison(a + 'x', a + 'y'***REMOVED******REMOVED***.to.equal(false***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return false when not a string', function (done***REMOVED*** {

            expect(Cryptiles.fixedTimeComparison('x', null***REMOVED******REMOVED***.to.equal(false***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;


