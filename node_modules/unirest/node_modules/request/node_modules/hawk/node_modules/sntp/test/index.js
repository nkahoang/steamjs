// Load modules

var Dgram = require('dgram'***REMOVED***;
var Lab = require('lab'***REMOVED***;
var Sntp = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('SNTP', function (***REMOVED*** {

    describe('#time', function (***REMOVED*** {

        it('returns consistent result over multiple tries', function (done***REMOVED*** {

            Sntp.time(function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(time***REMOVED***.to.exist;
                var t1 = time.t;

                Sntp.time(function (err, time***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(time***REMOVED***.to.exist;
                    var t2 = time.t;
                    expect(Math.abs(t1 - t2***REMOVED******REMOVED***.is.below(200***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('resolves reference IP', function (done***REMOVED*** {

            Sntp.time({ host: 'ntp.exnet.com', resolveReference: true }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(time***REMOVED***.to.exist;
                expect(time.referenceHost***REMOVED***.to.exist;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('times out on no response', function (done***REMOVED*** {

            Sntp.time({ port: 124, timeout: 100 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time***REMOVED***.to.not.exist;
                expect(err.message***REMOVED***.to.equal('Timeout'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('errors on error event', function (done***REMOVED*** {

            var orig = Dgram.createSocket;
            Dgram.createSocket = function (type***REMOVED*** {

                Dgram.createSocket = orig;
                var socket = Dgram.createSocket(type***REMOVED***;
                process.nextTick(function (***REMOVED*** { socket.emit('error', new Error('Fake'***REMOVED******REMOVED*** }***REMOVED***;
                return socket;
          ***REMOVED***;

            Sntp.time(function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time***REMOVED***.to.not.exist;
                expect(err.message***REMOVED***.to.equal('Fake'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('times out on invalid host', function (done***REMOVED*** {

            Sntp.time({ host: 'error', timeout: 10000 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time***REMOVED***.to.not.exist;
                expect(err.message***REMOVED***.to.equal('getaddrinfo ENOTFOUND'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails on bad response buffer size', function (done***REMOVED*** {

            var server = Dgram.createSocket('udp4'***REMOVED***;
            server.on('message', function (message, remote***REMOVED*** {
                var message = new Buffer(10***REMOVED***;
                server.send(message, 0, message.length, remote.port, remote.address, function (err, bytes***REMOVED*** {

                    server.close(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            server.bind(49123***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Invalid server response'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        var messup = function (bytes***REMOVED*** {

            var server = Dgram.createSocket('udp4'***REMOVED***;
            server.on('message', function (message, remote***REMOVED*** {

                var message = new Buffer([
                    0x24, 0x01, 0x00, 0xe3,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x41, 0x43, 0x54, 0x53,
                    0xd4, 0xa8, 0x2d, 0xc7,
                    0x1c, 0x5d, 0x49, 0x1b,
                    0xd4, 0xa8, 0x2d, 0xe6,
                    0x67, 0xef, 0x9d, 0xb2,
                    0xd4, 0xa8, 0x2d, 0xe6,
                    0x71, 0xed, 0xb5, 0xfb,
                    0xd4, 0xa8, 0x2d, 0xe6,
                    0x71, 0xee, 0x6c, 0xc5
                ]***REMOVED***;

                for (var i = 0, il = bytes.length; i < il; ++i***REMOVED*** {
                    message[bytes[i][0]] = bytes[i][1];
              ***REMOVED***

                server.send(message, 0, message.length, remote.port, remote.address, function (err, bytes***REMOVED*** {

                    server.close(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            server.bind(49123***REMOVED***;
      ***REMOVED***;

        it('fails on bad version', function (done***REMOVED*** {

            messup([[0, (0 << 6***REMOVED*** + (3 << 3***REMOVED*** + (4 << 0***REMOVED***]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time.version***REMOVED***.to.equal(3***REMOVED***;
                expect(err.message***REMOVED***.to.equal('Invalid server response'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails on bad originate timestamp and alarm li', function (done***REMOVED*** {

            messup([[0, (3 << 6***REMOVED*** + (4 << 3***REMOVED*** + (4 << 0***REMOVED***]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Wrong originate timestamp'***REMOVED***;
                expect(time.leapIndicator***REMOVED***.to.equal('alarm'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns time with death stratum and last61 li', function (done***REMOVED*** {

            messup([[0, (1 << 6***REMOVED*** + (4 << 3***REMOVED*** + (4 << 0***REMOVED***], [1, 0]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(time.stratum***REMOVED***.to.equal('death'***REMOVED***;
                expect(time.leapIndicator***REMOVED***.to.equal('last-minute-61'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('returns time with reserved stratum and last59 li', function (done***REMOVED*** {

            messup([[0, (2 << 6***REMOVED*** + (4 << 3***REMOVED*** + (4 << 0***REMOVED***], [1, 0x1f]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(time.stratum***REMOVED***.to.equal('reserved'***REMOVED***;
                expect(time.leapIndicator***REMOVED***.to.equal('last-minute-59'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails on bad mode (symmetric-active***REMOVED***', function (done***REMOVED*** {

            messup([[0, (0 << 6***REMOVED*** + (4 << 3***REMOVED*** + (1 << 0***REMOVED***]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time.mode***REMOVED***.to.equal('symmetric-active'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails on bad mode (symmetric-passive***REMOVED***', function (done***REMOVED*** {

            messup([[0, (0 << 6***REMOVED*** + (4 << 3***REMOVED*** + (2 << 0***REMOVED***]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time.mode***REMOVED***.to.equal('symmetric-passive'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails on bad mode (client***REMOVED***', function (done***REMOVED*** {

            messup([[0, (0 << 6***REMOVED*** + (4 << 3***REMOVED*** + (3 << 0***REMOVED***]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time.mode***REMOVED***.to.equal('client'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails on bad mode (broadcast***REMOVED***', function (done***REMOVED*** {

            messup([[0, (0 << 6***REMOVED*** + (4 << 3***REMOVED*** + (5 << 0***REMOVED***]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time.mode***REMOVED***.to.equal('broadcast'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails on bad mode (reserved***REMOVED***', function (done***REMOVED*** {

            messup([[0, (0 << 6***REMOVED*** + (4 << 3***REMOVED*** + (6 << 0***REMOVED***]]***REMOVED***;

            Sntp.time({ host: 'localhost', port: 49123 }, function (err, time***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(time.mode***REMOVED***.to.equal('reserved'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#offset', function (***REMOVED*** {

        it('gets the current offset', function (done***REMOVED*** {

            Sntp.offset(function (err, offset***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(offset***REMOVED***.to.not.equal(0***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('gets the current offset from cache', function (done***REMOVED*** {

            Sntp.offset(function (err, offset***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(offset***REMOVED***.to.not.equal(0***REMOVED***;
                var offset1 = offset;
                Sntp.offset({}, function (err, offset***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(offset***REMOVED***.to.equal(offset1***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('fails getting the current offset on invalid server', function (done***REMOVED*** {

            Sntp.offset({ host: 'error' }, function (err, offset***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(offset***REMOVED***.to.equal(0***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#now', function (***REMOVED*** {

        it('starts auto-sync, gets now, then stops', function (done***REMOVED*** {

            Sntp.stop(***REMOVED***;

            var before = Sntp.now(***REMOVED***;
            expect(before***REMOVED***.to.equal(Date.now(***REMOVED******REMOVED***;

            Sntp.start(function (***REMOVED*** {

                var now = Sntp.now(***REMOVED***;
                expect(now***REMOVED***.to.not.equal(Date.now(***REMOVED******REMOVED***;
                Sntp.stop(***REMOVED***;

                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('starts twice', function (done***REMOVED*** {

            Sntp.start(function (***REMOVED*** {

                Sntp.start(function (***REMOVED*** {

                    var now = Sntp.now(***REMOVED***;
                    expect(now***REMOVED***.to.not.equal(Date.now(***REMOVED******REMOVED***;
                    Sntp.stop(***REMOVED***;

                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('starts auto-sync, gets now, waits, gets again after timeout', function (done***REMOVED*** {

            Sntp.stop(***REMOVED***;

            var before = Sntp.now(***REMOVED***;
            expect(before***REMOVED***.to.equal(Date.now(***REMOVED******REMOVED***;

            Sntp.start({ clockSyncRefresh: 100 }, function (***REMOVED*** {

                var now = Sntp.now(***REMOVED***;
                expect(now***REMOVED***.to.not.equal(Date.now(***REMOVED******REMOVED***;
                expect(now***REMOVED***.to.equal(Sntp.now(***REMOVED******REMOVED***;

                setTimeout(function (***REMOVED*** {

                    expect(Sntp.now(***REMOVED******REMOVED***.to.not.equal(now***REMOVED***;
                    Sntp.stop(***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED***, 110***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;

