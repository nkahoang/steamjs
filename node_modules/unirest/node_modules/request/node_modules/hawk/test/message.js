// Load modules

var Url = require('url'***REMOVED***;
var Lab = require('lab'***REMOVED***;
var Hoek = require('hoek'***REMOVED***;
var Hawk = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Hawk', function (***REMOVED*** {

    var credentialsFunc = function (id, callback***REMOVED*** {

        var credentials = {
            id: id,
            key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
            algorithm: (id === '1' ? 'sha1' : 'sha256'***REMOVED***,
            user: 'steve'
      ***REMOVED***;

        return callback(null, credentials***REMOVED***;
  ***REMOVED***;

    it('should generate an authorization then successfully parse it', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on mismatching host', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            Hawk.server.authenticateMessage('example1.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Bad mac'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on stale timestamp', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, { localtimeOffsetMsec: 100000 }, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Stale timestamp'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on invalid authorization', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;
            delete auth.id;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Invalid authorization'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on bad hash', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message1', auth, credentialsFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Bad message hash'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on nonce error', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, credentialsFunc, { nonceFunc: function (nonce, ts, callback***REMOVED*** { callback (new Error('kaboom'***REMOVED******REMOVED***; } }, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Invalid nonce'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on credentials error', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            var errFunc = function (id, callback***REMOVED*** {

                callback(new Error('kablooey'***REMOVED******REMOVED***;
          ***REMOVED***;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('kablooey'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on missing credentials', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            var errFunc = function (id, callback***REMOVED*** {

                callback(***REMOVED***;
          ***REMOVED***;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Unknown credentials'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on invalid credentials', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            var errFunc = function (id, callback***REMOVED*** {

                callback(null, {}***REMOVED***;
          ***REMOVED***;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Invalid credentials'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail authorization on invalid credentials algorithm', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.exist;

            var errFunc = function (id, callback***REMOVED*** {

                callback(null, { key: '123', algorithm: '456' }***REMOVED***;
          ***REMOVED***;

            Hawk.server.authenticateMessage('example.com', 8080, 'some message', auth, errFunc, {}, function (err, credentials***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Unknown algorithm'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail on missing host', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var auth = Hawk.client.message(null, 8080, 'some message', { credentials: credentials }***REMOVED***;
            expect(auth***REMOVED***.to.not.exist;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail on missing credentials', function (done***REMOVED*** {

        var auth = Hawk.client.message('example.com', 8080, 'some message', {}***REMOVED***;
        expect(auth***REMOVED***.to.not.exist;
        done(***REMOVED***;
  ***REMOVED******REMOVED***;

    it('should fail on invalid algorithm', function (done***REMOVED*** {

        credentialsFunc('123456', function (err, credentials***REMOVED*** {

            var creds = Hoek.clone(credentials***REMOVED***;
            creds.algorithm = 'blah';
            var auth = Hawk.client.message('example.com', 8080, 'some message', { credentials: creds }***REMOVED***;
            expect(auth***REMOVED***.to.not.exist;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;
