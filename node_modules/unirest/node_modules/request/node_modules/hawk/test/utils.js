// Load modules

var Lab = require('lab'***REMOVED***;
var Hawk = require('../lib'***REMOVED***;
var Package = require('../package.json'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Hawk', function (***REMOVED*** {

    describe('Utils', function (***REMOVED*** {

        describe('#parseHost', function (***REMOVED*** {

            it('returns port 80 for non tls node request', function (done***REMOVED*** {

                var req = {
                    method: 'POST',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: 'example.com',
                        'content-type': 'text/plain;x=y'
                  ***REMOVED***
              ***REMOVED***;

                expect(Hawk.utils.parseHost(req, 'Host'***REMOVED***.port***REMOVED***.to.equal(80***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('returns port 443 for non tls node request', function (done***REMOVED*** {

                var req = {
                    method: 'POST',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: 'example.com',
                        'content-type': 'text/plain;x=y'
                  ***REMOVED***,
                    connection: {
                        encrypted: true
                  ***REMOVED***
              ***REMOVED***;

                expect(Hawk.utils.parseHost(req, 'Host'***REMOVED***.port***REMOVED***.to.equal(443***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('returns port 443 for non tls node request (IPv6***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'POST',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: '[123:123:123]',
                        'content-type': 'text/plain;x=y'
                  ***REMOVED***,
                    connection: {
                        encrypted: true
                  ***REMOVED***
              ***REMOVED***;

                expect(Hawk.utils.parseHost(req, 'Host'***REMOVED***.port***REMOVED***.to.equal(443***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('parses IPv6 headers', function (done***REMOVED*** {

                var req = {
                    method: 'POST',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: '[123:123:123]:8000',
                        'content-type': 'text/plain;x=y'
                  ***REMOVED***,
                    connection: {
                        encrypted: true
                  ***REMOVED***
              ***REMOVED***;

                var host = Hawk.utils.parseHost(req, 'Host'***REMOVED***;
                expect(host.port***REMOVED***.to.equal('8000'***REMOVED***;
                expect(host.name***REMOVED***.to.equal('[123:123:123]'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        describe('#version', function (***REMOVED*** {

            it('returns the correct package version number', function (done***REMOVED*** {

                expect(Hawk.utils.version(***REMOVED******REMOVED***.to.equal(Package.version***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        describe('#unauthorized', function (***REMOVED*** {

            it('returns a hawk 401', function (done***REMOVED*** {

                expect(Hawk.utils.unauthorized('kaboom'***REMOVED***.response.headers['WWW-Authenticate']***REMOVED***.to.equal('Hawk error="kaboom"'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;


