// Load modules

var Lab = require('lab'***REMOVED***;
var Hawk = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Hawk', function (***REMOVED*** {

    describe('Crypto', function (***REMOVED*** {

        describe('#generateNormalizedString', function (***REMOVED*** {

            it('should return a valid normalized string', function (done***REMOVED*** {

                expect(Hawk.crypto.generateNormalizedString('header', {
                    credentials: {
                        key: 'dasdfasdf',
                        algorithm: 'sha256'
                  ***REMOVED***,
                    ts: 1357747017,
                    nonce: 'k3k4j5',
                    method: 'GET',
                    resource: '/resource/something',
                    host: 'example.com',
                    port: 8080
              ***REMOVED******REMOVED******REMOVED***.to.equal('hawk.1.header\n1357747017\nk3k4j5\nGET\n/resource/something\nexample.com\n8080\n\n\n'***REMOVED***;

                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('should return a valid normalized string (ext***REMOVED***', function (done***REMOVED*** {

                expect(Hawk.crypto.generateNormalizedString('header', {
                    credentials: {
                        key: 'dasdfasdf',
                        algorithm: 'sha256'
                  ***REMOVED***,
                    ts: 1357747017,
                    nonce: 'k3k4j5',
                    method: 'GET',
                    resource: '/resource/something',
                    host: 'example.com',
                    port: 8080,
                    ext: 'this is some app data'
              ***REMOVED******REMOVED******REMOVED***.to.equal('hawk.1.header\n1357747017\nk3k4j5\nGET\n/resource/something\nexample.com\n8080\n\nthis is some app data\n'***REMOVED***;

                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('should return a valid normalized string (payload + ext***REMOVED***', function (done***REMOVED*** {

                expect(Hawk.crypto.generateNormalizedString('header', {
                    credentials: {
                        key: 'dasdfasdf',
                        algorithm: 'sha256'
                  ***REMOVED***,
                    ts: 1357747017,
                    nonce: 'k3k4j5',
                    method: 'GET',
                    resource: '/resource/something',
                    host: 'example.com',
                    port: 8080,
                    hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',
                    ext: 'this is some app data'
              ***REMOVED******REMOVED******REMOVED***.to.equal('hawk.1.header\n1357747017\nk3k4j5\nGET\n/resource/something\nexample.com\n8080\nU4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=\nthis is some app data\n'***REMOVED***;

                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;

