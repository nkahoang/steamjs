// Load modules

var Url = require('url'***REMOVED***;
var Lab = require('lab'***REMOVED***;
var Hawk = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Hawk', function (***REMOVED*** {

    describe('server', function (***REMOVED*** {

        var credentialsFunc = function (id, callback***REMOVED*** {

            var credentials = {
                id: id,
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: (id === '1' ? 'sha1' : 'sha256'***REMOVED***,
                user: 'steve'
          ***REMOVED***;

            return callback(null, credentials***REMOVED***;
      ***REMOVED***;

        describe('#authenticate', function (***REMOVED*** {

            it('should parse a valid authentication header (sha1***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="1", ts="1353788437", nonce="k3j4h2", mac="zy79QQ5/EYFmQqutVnYb73gAc/U=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should parse a valid authentication header (sha256***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/1?b=1&a=2',
                    host: 'example.com',
                    port: 8000,
                    authorization: 'Hawk id="dh37fgj492je", ts="1353832234", nonce="j4h3g2", mac="m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=", ext="some-app-data"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353832234000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should parse a valid authentication header (host override***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: 'example1.com:8080',
                        authorization: 'Hawk id="1", ts="1353788437", nonce="k3j4h2", mac="zy79QQ5/EYFmQqutVnYb73gAc/U=", ext="hello"'
                  ***REMOVED***
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { host: 'example.com', localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should parse a valid authentication header (host port override***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: 'example1.com:80',
                        authorization: 'Hawk id="1", ts="1353788437", nonce="k3j4h2", mac="zy79QQ5/EYFmQqutVnYb73gAc/U=", ext="hello"'
                  ***REMOVED***
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { host: 'example.com', port: 8080, localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should parse a valid authentication header (POST with payload***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'POST',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123456", ts="1357926341", nonce="1AwuJD", hash="qAiXIVv+yjDATneWxZP2YCTa9aHRgQdnH9b3Wc+o3dg=", ext="some-app-data", mac="UeYcj5UoTVaAWXNvJfLVia7kU3VabxCqrccXP8sUGC4="'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1357926341000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on missing hash', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/1?b=1&a=2',
                    host: 'example.com',
                    port: 8000,
                    authorization: 'Hawk id="dh37fgj492je", ts="1353832234", nonce="j4h3g2", mac="m8r1rHbXN6NgO+KIIhjO7sFRyd78RNGVUwehe8Cp2dU=", ext="some-app-data"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { payload: 'body', localtimeOffsetMsec: 1353832234000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Missing required payload hash'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on a stale timestamp', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123456", ts="1362337299", nonce="UzmxSs", ext="some-app-data", mac="wnNUxchvvryMH2RxckTdZ/gY3ijzvccx4keVvELC61w="'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Stale timestamp'***REMOVED***;
                    var header = err.response.headers['WWW-Authenticate'];
                    var ts = header.match(/^Hawk ts\=\"(\d+***REMOVED***\"\, tsm\=\"([^\"]+***REMOVED***\"\, error=\"Stale timestamp\"$/***REMOVED***;
                    var now = Hawk.utils.now(***REMOVED***;
                    expect(parseInt(ts[1], 10***REMOVED*** * 1000***REMOVED***.to.be.within(now - 1000, now + 1000***REMOVED***;

                    var res = {
                        headers: {
                            'www-authenticate': header
                      ***REMOVED***
                  ***REMOVED***;

                    expect(Hawk.client.authenticate(res, credentials, artifacts***REMOVED******REMOVED***.to.equal(true***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on a replay', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="bXx7a7p1h9QYQNZ8x7QhvDQym8ACgab4m3lVSFn4DBw=", ext="hello"'
              ***REMOVED***;

                var memoryCache = {};
                var options = {
                    localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED***,
                    nonceFunc: function (nonce, ts, callback***REMOVED*** {

                        if (memoryCache[nonce]***REMOVED*** {
                            return callback(new Error(***REMOVED******REMOVED***;
                      ***REMOVED***

                        memoryCache[nonce] = true;
                        return callback(***REMOVED***;
                  ***REMOVED***
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, options, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;

                    Hawk.server.authenticate(req, credentialsFunc, options, function (err, credentials, artifacts***REMOVED*** {

                        expect(err***REMOVED***.to.exist;
                        expect(err.response.payload.message***REMOVED***.to.equal('Invalid nonce'***REMOVED***;
                        done(***REMOVED***;
                  ***REMOVED******REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an invalid authentication header: wrong scheme', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Basic asdasdasdasd'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.not.exist;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an invalid authentication header: no scheme', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: '!@#'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Invalid header syntax'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an missing authorization header', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, {}, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.isMissing***REMOVED***.to.equal(true***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an missing host header', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    headers: {
                        authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
                  ***REMOVED***
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Invalid Host header'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an missing authorization attribute (id***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Missing attributes'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an missing authorization attribute (ts***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Missing attributes'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an missing authorization attribute (nonce***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Missing attributes'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an missing authorization attribute (mac***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Missing attributes'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an unknown authorization attribute', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", x="3", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Unknown attribute: x'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an bad authorization header format', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123\\", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Bad header format'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an bad authorization attribute value', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="\t", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Bad attribute value: id'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an empty authorization attribute value', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Bad attribute value: id'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on duplicated authorization attribute key', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", id="456", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Duplicate attribute: id'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an invalid authorization header format', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk'
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Invalid header syntax'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an bad host header (missing host***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: ':8080',
                        authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
                  ***REMOVED***
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Invalid Host header'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on an bad host header (pad port***REMOVED***', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    headers: {
                        host: 'example.com:something',
                        authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
                  ***REMOVED***
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Invalid Host header'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on credentialsFunc error', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                var credentialsFunc = function (id, callback***REMOVED*** {

                    return callback(new Error('Unknown user'***REMOVED******REMOVED***;
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.message***REMOVED***.to.equal('Unknown user'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on missing credentials', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                var credentialsFunc = function (id, callback***REMOVED*** {

                    return callback(null, null***REMOVED***;
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Unknown credentials'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on invalid credentials', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                var credentialsFunc = function (id, callback***REMOVED*** {

                    var credentials = {
                        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                        user: 'steve'
                  ***REMOVED***;

                    return callback(null, credentials***REMOVED***;
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.message***REMOVED***.to.equal('Invalid credentials'***REMOVED***;
                    expect(err.response.payload.message***REMOVED***.to.equal('An internal server error occurred'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on unknown credentials algorithm', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcUyW6EEgUH4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                var credentialsFunc = function (id, callback***REMOVED*** {

                    var credentials = {
                        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                        algorithm: 'hmac-sha-0',
                        user: 'steve'
                  ***REMOVED***;

                    return callback(null, credentials***REMOVED***;
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.message***REMOVED***.to.equal('Unknown algorithm'***REMOVED***;
                    expect(err.response.payload.message***REMOVED***.to.equal('An internal server error occurred'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;

            it('should fail on unknown bad mac', function (done***REMOVED*** {

                var req = {
                    method: 'GET',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080,
                    authorization: 'Hawk id="123", ts="1353788437", nonce="k3j4h2", mac="/qwS4UjfVWMcU4jlr7T/wuKe3dKijvTvSos=", ext="hello"'
              ***REMOVED***;

                var credentialsFunc = function (id, callback***REMOVED*** {

                    var credentials = {
                        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                        algorithm: 'sha256',
                        user: 'steve'
                  ***REMOVED***;

                    return callback(null, credentials***REMOVED***;
              ***REMOVED***;

                Hawk.server.authenticate(req, credentialsFunc, { localtimeOffsetMsec: 1353788437000 - Hawk.utils.now(***REMOVED*** }, function (err, credentials, artifacts***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Bad mac'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        describe('#header', function (***REMOVED*** {

            it('should return an empty authorization header on missing options', function (done***REMOVED*** {

                var header = Hawk.server.header(***REMOVED***;
                expect(header***REMOVED***.to.equal(''***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('should return an empty authorization header on missing credentials', function (done***REMOVED*** {

                var header = Hawk.server.header(null, {}***REMOVED***;
                expect(header***REMOVED***.to.equal(''***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('should return an empty authorization header on invalid credentials', function (done***REMOVED*** {

                var credentials = {
                    key: '2983d45yun89q'
              ***REMOVED***;

                var header = Hawk.server.header(credentials***REMOVED***;
                expect(header***REMOVED***.to.equal(''***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;

            it('should return an empty authorization header on invalid algorithm', function (done***REMOVED*** {

                var artifacts = {
                    id: '123456'
              ***REMOVED***;

                var credentials = {
                    key: '2983d45yun89q',
                    algorithm: 'hmac-sha-0'
              ***REMOVED***;

                var header = Hawk.server.header(credentials, artifacts***REMOVED***;
                expect(header***REMOVED***.to.equal(''***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;
