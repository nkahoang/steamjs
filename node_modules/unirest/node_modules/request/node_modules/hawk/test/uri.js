// Load modules

var Http = require('http'***REMOVED***;
var Lab = require('lab'***REMOVED***;
var Hawk = require('../lib'***REMOVED***;


// Declare internals

var internals = {};


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('Hawk', function (***REMOVED*** {

    describe('Uri', function (***REMOVED*** {

        var credentialsFunc = function (id, callback***REMOVED*** {

            var credentials = {
                id: id,
                key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
                algorithm: 'sha256',
                user: 'steve'
          ***REMOVED***;

            return callback(null, credentials***REMOVED***;
      ***REMOVED***;

        it('should generate a bewit then successfully authenticate it', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?a=1&b=2',
                host: 'example.com',
                port: 80
          ***REMOVED***;

            credentialsFunc('123456', function (err, credentials***REMOVED*** {

                var bewit = Hawk.uri.getBewit('http://example.com/resource/4?a=1&b=2', { credentials: credentials, ttlSec: 60 * 60 * 24 * 365 * 100, ext: 'some-app-data' }***REMOVED***;
                req.url += '&bewit=' + bewit;

                Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                    expect(attributes.ext***REMOVED***.to.equal('some-app-data'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should generate a bewit then successfully authenticate it (no ext***REMOVED***', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?a=1&b=2',
                host: 'example.com',
                port: 80
          ***REMOVED***;

            credentialsFunc('123456', function (err, credentials***REMOVED*** {

                var bewit = Hawk.uri.getBewit('http://example.com/resource/4?a=1&b=2', { credentials: credentials, ttlSec: 60 * 60 * 24 * 365 * 100 }***REMOVED***;
                req.url += '&bewit=' + bewit;

                Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                    expect(err***REMOVED***.to.not.exist;
                    expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should successfully authenticate a request (last param***REMOVED***', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?a=1&b=2&bewit=MTIzNDU2XDQ1MTE0ODQ2MjFcMzFjMmNkbUJFd1NJRVZDOVkva1NFb2c3d3YrdEVNWjZ3RXNmOGNHU2FXQT1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                expect(attributes.ext***REMOVED***.to.equal('some-app-data'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should successfully authenticate a request (first param***REMOVED***', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MTE0ODQ2MjFcMzFjMmNkbUJFd1NJRVZDOVkva1NFb2c3d3YrdEVNWjZ3RXNmOGNHU2FXQT1cc29tZS1hcHAtZGF0YQ&a=1&b=2',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                expect(attributes.ext***REMOVED***.to.equal('some-app-data'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should successfully authenticate a request (only param***REMOVED***', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MTE0ODQ2NDFcZm1CdkNWT3MvcElOTUUxSTIwbWhrejQ3UnBwTmo4Y1VrSHpQd3Q5OXJ1cz1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.not.exist;
                expect(credentials.user***REMOVED***.to.equal('steve'***REMOVED***;
                expect(attributes.ext***REMOVED***.to.equal('some-app-data'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on multiple authentication', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MTE0ODQ2NDFcZm1CdkNWT3MvcElOTUUxSTIwbWhrejQ3UnBwTmo4Y1VrSHpQd3Q5OXJ1cz1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080,
                authorization: 'Basic asdasdasdasd'
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Multiple authentications'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on method other than GET', function (done***REMOVED*** {

            credentialsFunc('123456', function (err, credentials***REMOVED*** {

                var req = {
                    method: 'POST',
                    url: '/resource/4?filter=a',
                    host: 'example.com',
                    port: 8080
              ***REMOVED***;

                var exp = Math.floor(Hawk.utils.now(***REMOVED*** / 1000***REMOVED*** + 60;
                var ext = 'some-app-data';
                var mac = Hawk.crypto.calculateMac('bewit', credentials, {
                    timestamp: exp,
                    nonce: '',
                    method: req.method,
                    resource: req.url,
                    host: req.host,
                    port: req.port,
                    ext: ext
              ***REMOVED******REMOVED***;

                var bewit = credentials.id + '\\' + exp + '\\' + mac + '\\' + ext;

                req.url += '&bewit=' + Hawk.utils.base64urlEncode(bewit***REMOVED***;

                Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                    expect(err***REMOVED***.to.exist;
                    expect(err.response.payload.message***REMOVED***.to.equal('Invalid method'***REMOVED***;
                    done(***REMOVED***;
              ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on invalid host header', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ',
                headers: {
                    host: 'example.com:something'
              ***REMOVED***
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Invalid Host header'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on empty bewit', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Empty bewit'***REMOVED***;
                expect(err.isMissing***REMOVED***.to.not.exist;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on invalid bewit', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=*',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Invalid bewit encoding'***REMOVED***;
                expect(err.isMissing***REMOVED***.to.not.exist;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on missing bewit', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.not.exist;
                expect(err.isMissing***REMOVED***.to.equal(true***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on invalid bewit structure', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=abc',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Invalid bewit structure'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on empty bewit attribute', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=YVxcY1xk',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Missing bewit attributes'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on expired access', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?a=1&b=2&bewit=MTIzNDU2XDEzNTY0MTg1ODNcWk1wZlMwWU5KNHV0WHpOMmRucTRydEk3NXNXTjFjeWVITTcrL0tNZFdVQT1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, credentialsFunc, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Access expired'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on credentials function error', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, function (id, callback***REMOVED*** { callback(Hawk.error.badRequest('Boom'***REMOVED******REMOVED***; }, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Boom'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on null credentials function response', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, function (id, callback***REMOVED*** { callback(null, null***REMOVED***; }, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Unknown credentials'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on invalid credentials function response', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, function (id, callback***REMOVED*** { callback(null, {}***REMOVED***; }, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Invalid credentials'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on invalid credentials function response (unknown algorithm***REMOVED***', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, function (id, callback***REMOVED*** { callback(null, { key: 'xxx', algorithm: 'xxx' }***REMOVED***; }, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.message***REMOVED***.to.equal('Unknown algorithm'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should fail on expired access', function (done***REMOVED*** {

            var req = {
                method: 'GET',
                url: '/resource/4?bewit=MTIzNDU2XDQ1MDk5OTE3MTlcTUE2eWkwRWRwR0pEcWRwb0JkYVdvVDJrL0hDSzA1T0Y3MkhuZlVmVy96Zz1cc29tZS1hcHAtZGF0YQ',
                host: 'example.com',
                port: 8080
          ***REMOVED***;

            Hawk.uri.authenticate(req, function (id, callback***REMOVED*** { callback(null, { key: 'xxx', algorithm: 'sha256' }***REMOVED***; }, {}, function (err, credentials, attributes***REMOVED*** {

                expect(err***REMOVED***.to.exist;
                expect(err.response.payload.message***REMOVED***.to.equal('Bad mac'***REMOVED***;
                done(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;

    describe('#getBewit', function (***REMOVED*** {

        it('should return a valid bewit value', function (done***REMOVED*** {

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'sha256'
          ***REMOVED***;

            var bewit = Hawk.uri.getBewit('https://example.com/somewhere/over/the/rainbow', { credentials: credentials, ttlSec: 300, localtimeOffsetMsec: 1356420407232 - Hawk.utils.now(***REMOVED***, ext: 'xandyandz' }***REMOVED***;
            expect(bewit***REMOVED***.to.equal('MTIzNDU2XDEzNTY0MjA3MDdca3NjeHdOUjJ0SnBQMVQxekRMTlBiQjVVaUtJVTl0T1NKWFRVZEc3WDloOD1ceGFuZHlhbmR6'***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return an empty bewit on invalid credentials', function (done***REMOVED*** {

            var credentials = {
                key: '2983d45yun89q',
                algorithm: 'sha256'
          ***REMOVED***;

            var bewit = Hawk.uri.getBewit('https://example.com/somewhere/over/the/rainbow', { credentials: credentials, ttlSec: 3000, ext: 'xandyandz' }***REMOVED***;
            expect(bewit***REMOVED***.to.equal(''***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return an empty bewit on invalid algorithm', function (done***REMOVED*** {

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'hmac-sha-0'
          ***REMOVED***;

            var bewit = Hawk.uri.getBewit('https://example.com/somewhere/over/the/rainbow', { credentials: credentials, ttlSec: 300, ext: 'xandyandz' }***REMOVED***;
            expect(bewit***REMOVED***.to.equal(''***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;

        it('should return an empty bewit on missing options', function (done***REMOVED*** {

            var credentials = {
                id: '123456',
                key: '2983d45yun89q',
                algorithm: 'hmac-sha-0'
          ***REMOVED***;

            var bewit = Hawk.uri.getBewit('https://example.com/somewhere/over/the/rainbow'***REMOVED***;
            expect(bewit***REMOVED***.to.equal(''***REMOVED***;
            done(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
}***REMOVED***;

