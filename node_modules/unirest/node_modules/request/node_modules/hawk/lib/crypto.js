// Load modules

var Crypto = require('crypto'***REMOVED***;
var Url = require('url'***REMOVED***;
var Utils = require('./utils'***REMOVED***;


// Declare internals

var internals = {};


// MAC normalization format version

exports.headerVersion = '1';                        // Prevent comparison of mac values generated with different normalized string formats


// Supported HMAC algorithms

exports.algorithms = ['sha1', 'sha256'];


// Calculate the request MAC

/*
    type: 'header',                                 // 'header', 'bewit', 'response'
    credentials: {
        key: 'aoijedoaijsdlaksjdl',
        algorithm: 'sha256'                         // 'sha1', 'sha256'
  ***REMOVED***,
    options: {
        method: 'GET',
        resource: '/resource?a=1&b=2',
        host: 'example.com',
        port: 8080,
        ts: 1357718381034,
        nonce: 'd3d345f',
        hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',
        ext: 'app-specific-data',
        app: 'hf48hd83qwkj',                        // Application id (Oz***REMOVED***
        dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz***REMOVED***, requires options.app
  ***REMOVED***
*/

exports.calculateMac = function (type, credentials, options***REMOVED*** {

    var normalized = exports.generateNormalizedString(type, options***REMOVED***;

    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key***REMOVED***.update(normalized***REMOVED***;
    var digest = hmac.digest('base64'***REMOVED***;
    return digest;
};


exports.generateNormalizedString = function (type, options***REMOVED*** {

    var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\n' +
                     options.ts + '\n' +
                     options.nonce + '\n' +
                     (options.method || ''***REMOVED***.toUpperCase(***REMOVED*** + '\n' +
                     (options.resource || ''***REMOVED*** + '\n' +
                     options.host.toLowerCase(***REMOVED*** + '\n' +
                     options.port + '\n' +
                     (options.hash || ''***REMOVED*** + '\n';

    if (options.ext***REMOVED*** {
        normalized += options.ext.replace('\\', '\\\\'***REMOVED***.replace('\n', '\\n'***REMOVED***;
  ***REMOVED***

    normalized += '\n';

    if (options.app***REMOVED*** {
        normalized += options.app + '\n' +
                      (options.dlg || ''***REMOVED*** + '\n';
  ***REMOVED***

    return normalized;
};


exports.calculatePayloadHash = function (payload, algorithm, contentType***REMOVED*** {

    var hash = exports.initializePayloadHash(algorithm, contentType***REMOVED***;
    hash.update(payload || ''***REMOVED***;
    return exports.finalizePayloadHash(hash***REMOVED***;
};


exports.initializePayloadHash = function (algorithm, contentType***REMOVED*** {

    var hash = Crypto.createHash(algorithm***REMOVED***;
    hash.update('hawk.' + exports.headerVersion + '.payload\n'***REMOVED***;
    hash.update(Utils.parseContentType(contentType***REMOVED*** + '\n'***REMOVED***;
    return hash;
};


exports.finalizePayloadHash = function (hash***REMOVED*** {

    hash.update('\n'***REMOVED***;
    return hash.digest('base64'***REMOVED***;
};


exports.calculateTsMac = function (ts, credentials***REMOVED*** {

    var hmac = Crypto.createHmac(credentials.algorithm, credentials.key***REMOVED***;
    hmac.update('hawk.' + exports.headerVersion + '.ts\n' + ts + '\n'***REMOVED***;
    return hmac.digest('base64'***REMOVED***;
};

