// Load modules

var Hoek = require('hoek'***REMOVED***;
var Sntp = require('sntp'***REMOVED***;
var Boom = require('boom'***REMOVED***;


// Declare internals

var internals = {};


// Import Hoek Utilities

internals.import = function (***REMOVED*** {

    for (var i in Hoek***REMOVED*** {
        if (Hoek.hasOwnProperty(i***REMOVED******REMOVED*** {
            exports[i] = Hoek[i];
      ***REMOVED***
  ***REMOVED***
};

internals.import(***REMOVED***;


// Hawk version

exports.version = function (***REMOVED*** {

    return exports.loadPackage(__dirname + '/..'***REMOVED***.version;
};


// Extract host and port from request

exports.parseHost = function (req, hostHeaderName***REMOVED*** {

    hostHeaderName = (hostHeaderName ? hostHeaderName.toLowerCase(***REMOVED*** : 'host'***REMOVED***;
    var hostHeader = req.headers[hostHeaderName];
    if (!hostHeader***REMOVED*** {
        return null;
  ***REMOVED***

    var hostHeaderRegex;
    if (hostHeader[0] === '['***REMOVED*** {
        hostHeaderRegex = /^(?:(?:\r\n***REMOVED***?\s***REMOVED****(\[[^\]]+\]***REMOVED***(?::(\d+***REMOVED******REMOVED***?(?:(?:\r\n***REMOVED***?\s***REMOVED****$/;      // IPv6
  ***REMOVED***
    else {
        hostHeaderRegex = /^(?:(?:\r\n***REMOVED***?\s***REMOVED****([^:]+***REMOVED***(?::(\d+***REMOVED******REMOVED***?(?:(?:\r\n***REMOVED***?\s***REMOVED****$/;           // IPv4, hostname
  ***REMOVED***
    
    var hostParts = hostHeader.match(hostHeaderRegex***REMOVED***;

    if (!hostParts ||
        hostParts.length !== 3 ||
        !hostParts[1]***REMOVED*** {

        return null;
  ***REMOVED***

    return {
        name: hostParts[1],
        port: (hostParts[2] ? hostParts[2] : (req.connection && req.connection.encrypted ? 443 : 80***REMOVED******REMOVED***
  ***REMOVED***;
};


// Parse Content-Type header content

exports.parseContentType = function (header***REMOVED*** {

    if (!header***REMOVED*** {
        return '';
  ***REMOVED***

    return header.split(';'***REMOVED***[0].trim(***REMOVED***.toLowerCase(***REMOVED***;
};


// Convert node's  to request configuration object

exports.parseRequest = function (req, options***REMOVED*** {

    if (!req.headers***REMOVED*** {
        return req;
  ***REMOVED***
    
    // Obtain host and port information

    if (!options.host || !options.port***REMOVED*** {
        var host = exports.parseHost(req, options.hostHeaderName***REMOVED***;
        if (!host***REMOVED*** {
            return new Error('Invalid Host header'***REMOVED***;
      ***REMOVED***
  ***REMOVED***

    var request = {
        method: req.method,
        url: req.url,
        host: options.host || host.name,
        port: options.port || host.port,
        authorization: req.headers.authorization,
        contentType: req.headers['content-type'] || ''
  ***REMOVED***;

    return request;
};


exports.now = function (***REMOVED*** {

    return Sntp.now(***REMOVED***;
};


// Parse Hawk HTTP Authorization header

exports.parseAuthorizationHeader = function (header, keys***REMOVED*** {

    keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];

    if (!header***REMOVED*** {
        return Boom.unauthorized(null, 'Hawk'***REMOVED***;
  ***REMOVED***

    var headerParts = header.match(/^(\w+***REMOVED***(?:\s+(.****REMOVED******REMOVED***?$/***REMOVED***;       // Header: scheme[ something]
    if (!headerParts***REMOVED*** {
        return Boom.badRequest('Invalid header syntax'***REMOVED***;
  ***REMOVED***

    var scheme = headerParts[1];
    if (scheme.toLowerCase(***REMOVED*** !== 'hawk'***REMOVED*** {
        return Boom.unauthorized(null, 'Hawk'***REMOVED***;
  ***REMOVED***

    var attributesString = headerParts[2];
    if (!attributesString***REMOVED*** {
        return Boom.badRequest('Invalid header syntax'***REMOVED***;
  ***REMOVED***

    var attributes = {};
    var errorMessage = '';
    var verify = attributesString.replace(/(\w+***REMOVED***="([^"\\]****REMOVED***"\s*(?:,\s*|$***REMOVED***/g, function ($0, $1, $2***REMOVED*** {

        // Check valid attribute names

        if (keys.indexOf($1***REMOVED*** === -1***REMOVED*** {
            errorMessage = 'Unknown attribute: ' + $1;
            return;
      ***REMOVED***

        // Allowed attribute value characters: !#$%&'(***REMOVED****+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9

        if ($2.match(/^[ \w\!#\$%&'\(\***REMOVED***\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~]+$/***REMOVED*** === null***REMOVED*** {
            errorMessage = 'Bad attribute value: ' + $1;
            return;
      ***REMOVED***

        // Check for duplicates

        if (attributes.hasOwnProperty($1***REMOVED******REMOVED*** {
            errorMessage = 'Duplicate attribute: ' + $1;
            return;
      ***REMOVED***

        attributes[$1] = $2;
        return '';
  ***REMOVED******REMOVED***;

    if (verify !== ''***REMOVED*** {
        return Boom.badRequest(errorMessage || 'Bad header format'***REMOVED***;
  ***REMOVED***

    return attributes;
};


exports.unauthorized = function (message***REMOVED*** {

    return Boom.unauthorized(message, 'Hawk'***REMOVED***;
};

