/*
    HTTP Hawk Authentication Scheme
    Copyright (c***REMOVED*** 2012-2013, Eran Hammer <eran@hueniverse.com>
    MIT Licensed
*/


// Declare namespace

var hawk = {};


// Export if used as a module

if (typeof module !== "undefined" && module.exports***REMOVED*** {
    module.exports = hawk;
}

hawk.client = {

    // Generate an Authorization header for a given request

    /*
        uri: 'http://example.com/resource?a=b'
        method: HTTP verb (e.g. 'GET', 'POST'***REMOVED***
        options: {
    
            // Required
    
            credentials: {
                id: 'dh37fgj492je',
                key: 'aoijedoaijsdlaksjdl',
                algorithm: 'sha256'                                 // 'sha1', 'sha256'
          ***REMOVED***,
    
            // Optional
    
            ext: 'application-specific',                        // Application specific data sent via the ext attribute
            timestamp: Date.now(***REMOVED*** / 1000,                       // A pre-calculated timestamp in seconds
            nonce: '2334f34f',                                  // A pre-generated nonce
            localtimeOffsetMsec: 400,                           // Time offset to sync with server time (ignored if timestamp provided***REMOVED***
            payload: '{"some":"payload"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided***REMOVED***
            contentType: 'application/json',                    // Payload content-type (ignored if hash provided***REMOVED***
            hash: 'U4MKKSmiVxk37JCCrAVIjV=',                    // Pre-calculated payload hash
            app: '24s23423f34dx',                               // Oz application id
            dlg: '234sz34tww3sd'                                // Oz delegated-by application id
      ***REMOVED***
    */

    header: function (uri, method, options***REMOVED*** {

        var result = {
            field: '',
            artifacts: {}
      ***REMOVED***;

        // Validate inputs

        if (!uri || (typeof uri !== 'string' && typeof uri !== 'object'***REMOVED*** ||
            !method || typeof method !== 'string' ||
            !options || typeof options !== 'object'***REMOVED*** {

            return result;
      ***REMOVED***

        // Application time

        var timestamp = options.timestamp || Math.floor((hawk.utils.now(***REMOVED*** + (options.localtimeOffsetMsec || 0***REMOVED******REMOVED*** / 1000***REMOVED***

        // Validate credentials

        var credentials = options.credentials;
        if (!credentials ||
            !credentials.id ||
            !credentials.key ||
            !credentials.algorithm***REMOVED*** {

            // Invalid credential object
            return result;
      ***REMOVED***

        if (hawk.crypto.algorithms.indexOf(credentials.algorithm***REMOVED*** === -1***REMOVED*** {
            return result;
      ***REMOVED***

        // Parse URI

        if (typeof uri === 'string'***REMOVED*** {
            uri = hawk.utils.parseUri(uri***REMOVED***;
      ***REMOVED***

        // Calculate signature

        var artifacts = {
            ts: timestamp,
            nonce: options.nonce || hawk.utils.randomString(6***REMOVED***,
            method: method,
            resource: uri.relative,
            host: uri.hostname,
            port: uri.port,
            hash: options.hash,
            ext: options.ext,
            app: options.app,
            dlg: options.dlg
      ***REMOVED***;

        result.artifacts = artifacts;

        // Calculate payload hash

        if (!artifacts.hash &&
            options.hasOwnProperty('payload'***REMOVED******REMOVED*** {

            artifacts.hash = hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType***REMOVED***;
      ***REMOVED***

        var mac = hawk.crypto.calculateMac('header', credentials, artifacts***REMOVED***;

        // Construct header

        var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== '';       // Other falsey values allowed
        var header = 'Hawk id="' + credentials.id +
                     '", ts="' + artifacts.ts +
                     '", nonce="' + artifacts.nonce +
                     (artifacts.hash ? '", hash="' + artifacts.hash : ''***REMOVED*** +
                     (hasExt ? '", ext="' + hawk.utils.escapeHeaderAttribute(artifacts.ext***REMOVED*** : ''***REMOVED*** +
                     '", mac="' + mac + '"';

        if (artifacts.app***REMOVED*** {
            header += ', app="' + artifacts.app +
                      (artifacts.dlg ? '", dlg="' + artifacts.dlg : ''***REMOVED*** + '"';
      ***REMOVED***

        result.field = header;

        return result;
  ***REMOVED***,


    // Validate server response

    /*
        request:    object created via 'new XMLHttpRequest(***REMOVED***' after response received
        artifacts:  object recieved from header(***REMOVED***.artifacts
        options: {
            payload:    optional payload received
            required:   specifies if a Server-Authorization header is required. Defaults to 'false'
      ***REMOVED***
    */

    authenticate: function (request, credentials, artifacts, options***REMOVED*** {

        options = options || {};

        if (request.getResponseHeader('www-authenticate'***REMOVED******REMOVED*** {

            // Parse HTTP WWW-Authenticate header

            var attributes = hawk.utils.parseAuthorizationHeader(request.getResponseHeader('www-authenticate'***REMOVED***, ['ts', 'tsm', 'error']***REMOVED***;
            if (!attributes***REMOVED*** {
                return false;
          ***REMOVED***

            if (attributes.ts***REMOVED*** {
                var tsm = hawk.crypto.calculateTsMac(attributes.ts, credentials***REMOVED***;
                if (tsm !== attributes.tsm***REMOVED*** {
                    return false;
              ***REMOVED***

                hawk.utils.setNtpOffset(attributes.ts - Math.floor(Date.now(***REMOVED*** / 1000***REMOVED******REMOVED***;     // Keep offset at 1 second precision
          ***REMOVED***
      ***REMOVED***

        // Parse HTTP Server-Authorization header

        if (!request.getResponseHeader('server-authorization'***REMOVED*** &&
            !options.required***REMOVED*** {

            return true;
      ***REMOVED***

        var attributes = hawk.utils.parseAuthorizationHeader(request.getResponseHeader('server-authorization'***REMOVED***, ['mac', 'ext', 'hash']***REMOVED***;
        if (!attributes***REMOVED*** {
            return false;
      ***REMOVED***

        var modArtifacts = {
            ts: artifacts.ts,
            nonce: artifacts.nonce,
            method: artifacts.method,
            resource: artifacts.resource,
            host: artifacts.host,
            port: artifacts.port,
            hash: attributes.hash,
            ext: attributes.ext,
            app: artifacts.app,
            dlg: artifacts.dlg
      ***REMOVED***;

        var mac = hawk.crypto.calculateMac('response', credentials, modArtifacts***REMOVED***;
        if (mac !== attributes.mac***REMOVED*** {
            return false;
      ***REMOVED***

        if (!options.hasOwnProperty('payload'***REMOVED******REMOVED*** {
            return true;
      ***REMOVED***

        if (!attributes.hash***REMOVED*** {
            return false;
      ***REMOVED***

        var calculatedHash = hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, request.getResponseHeader('content-type'***REMOVED******REMOVED***;
        return (calculatedHash === attributes.hash***REMOVED***;
  ***REMOVED***,

    message: function (host, port, message, options***REMOVED*** {

        // Validate inputs

        if (!host || typeof host !== 'string' ||
            !port || typeof port !== 'number' ||
            message === null || message === undefined || typeof message !== 'string' ||
            !options || typeof options !== 'object'***REMOVED*** {

            return null;
      ***REMOVED***

        // Application time

        var timestamp = options.timestamp || Math.floor((hawk.utils.now(***REMOVED*** + (options.localtimeOffsetMsec || 0***REMOVED******REMOVED*** / 1000***REMOVED***

        // Validate credentials

        var credentials = options.credentials;
        if (!credentials ||
            !credentials.id ||
            !credentials.key ||
            !credentials.algorithm***REMOVED*** {

            // Invalid credential object
            return null;
      ***REMOVED***

        if (hawk.crypto.algorithms.indexOf(credentials.algorithm***REMOVED*** === -1***REMOVED*** {
            return null;
      ***REMOVED***

        // Calculate signature

        var artifacts = {
            ts: timestamp,
            nonce: options.nonce || hawk.utils.randomString(6***REMOVED***,
            host: host,
            port: port,
            hash: hawk.crypto.calculatePayloadHash(message, credentials.algorithm***REMOVED***
      ***REMOVED***;

        // Construct authorization

        var result = {
            id: credentials.id,
            ts: artifacts.ts,
            nonce: artifacts.nonce,
            hash: artifacts.hash,
            mac: hawk.crypto.calculateMac('message', credentials, artifacts***REMOVED***
      ***REMOVED***;

        return result;
  ***REMOVED***
};


hawk.crypto = {

    headerVersion: '1',

    algorithms: ['sha1', 'sha256'],

    calculateMac: function (type, credentials, options***REMOVED*** {

        var normalized = hawk.crypto.generateNormalizedString(type, options***REMOVED***;

        var hmac = CryptoJS['Hmac' + credentials.algorithm.toUpperCase(***REMOVED***](normalized, credentials.key***REMOVED***;
        return hmac.toString(CryptoJS.enc.Base64***REMOVED***;
  ***REMOVED***,

    generateNormalizedString: function (type, options***REMOVED*** {

        var normalized = 'hawk.' + hawk.crypto.headerVersion + '.' + type + '\n' +
                         options.ts + '\n' +
                         options.nonce + '\n' +
                         (options.method || ''***REMOVED***.toUpperCase(***REMOVED*** + '\n' +
                         (options.resource || ''***REMOVED*** + '\n' +
                         options.host.toLowerCase(***REMOVED*** + '\n' +
                         options.port + '\n' +
                         (options.hash || ''***REMOVED*** + '\n';

        if (options.ext***REMOVED*** {
            normalized += options.ext.replace('\\', '\\\\'***REMOVED***.replace('\n', '\\n'***REMOVED***;
      ***REMOVED***

        normalized += '\n';

        if (options.app***REMOVED*** {
            normalized += options.app + '\n' +
                          (options.dlg || ''***REMOVED*** + '\n';
      ***REMOVED***

        return normalized;
  ***REMOVED***,

    calculatePayloadHash: function (payload, algorithm, contentType***REMOVED*** {

        var hash = CryptoJS.algo[algorithm.toUpperCase(***REMOVED***].create(***REMOVED***;
        hash.update('hawk.' + hawk.crypto.headerVersion + '.payload\n'***REMOVED***;
        hash.update(hawk.utils.parseContentType(contentType***REMOVED*** + '\n'***REMOVED***;
        hash.update(payload || ''***REMOVED***;
        hash.update('\n'***REMOVED***;
        return hash.finalize(***REMOVED***.toString(CryptoJS.enc.Base64***REMOVED***;
  ***REMOVED***,

    calculateTsMac: function (ts, credentials***REMOVED*** {

        var hash = CryptoJS['Hmac' + credentials.algorithm.toUpperCase(***REMOVED***]('hawk.' + hawk.crypto.headerVersion + '.ts\n' + ts + '\n', credentials.key***REMOVED***;
        return hash.toString(CryptoJS.enc.Base64***REMOVED***;
  ***REMOVED***
};


hawk.utils = {

    storage: {                                      // localStorage compatible interface
        _cache: {},
        setItem: function (key, value***REMOVED*** {

            hawk.utils.storage._cache[key] = value;
      ***REMOVED***,
        getItem: function (key***REMOVED*** {

            return hawk.utils.storage._cache[key];
      ***REMOVED***
  ***REMOVED***,

    setStorage: function (storage***REMOVED*** {

        var ntpOffset = hawk.utils.getNtpOffset(***REMOVED*** || 0;
        hawk.utils.storage = storage;
        hawk.utils.setNtpOffset(ntpOffset***REMOVED***;
  ***REMOVED***,

    setNtpOffset: function (offset***REMOVED*** {

        hawk.utils.storage.setItem('hawk_ntp_offset', offset***REMOVED***;
  ***REMOVED***,

    getNtpOffset: function (***REMOVED*** {

        return parseInt(hawk.utils.storage.getItem('hawk_ntp_offset'***REMOVED*** || '0', 10***REMOVED***;
  ***REMOVED***,

    now: function (***REMOVED*** {

        return Date.now(***REMOVED*** + hawk.utils.getNtpOffset(***REMOVED***;
  ***REMOVED***,

    escapeHeaderAttribute: function (attribute***REMOVED*** {

        return attribute.replace(/\\/g, '\\\\'***REMOVED***.replace(/\"/g, '\\"'***REMOVED***;
  ***REMOVED***,

    parseContentType: function (header***REMOVED*** {

        if (!header***REMOVED*** {
            return '';
      ***REMOVED***

        return header.split(';'***REMOVED***[0].trim(***REMOVED***.toLowerCase(***REMOVED***;
  ***REMOVED***,

    parseAuthorizationHeader: function (header, keys***REMOVED*** {

        if (!header***REMOVED*** {
            return null;
      ***REMOVED***

        var headerParts = header.match(/^(\w+***REMOVED***(?:\s+(.****REMOVED******REMOVED***?$/***REMOVED***;       // Header: scheme[ something]
        if (!headerParts***REMOVED*** {
            return null;
      ***REMOVED***

        var scheme = headerParts[1];
        if (scheme.toLowerCase(***REMOVED*** !== 'hawk'***REMOVED*** {
            return null;
      ***REMOVED***

        var attributesString = headerParts[2];
        if (!attributesString***REMOVED*** {
            return null;
      ***REMOVED***

        var attributes = {};
        var verify = attributesString.replace(/(\w+***REMOVED***="([^"\\]****REMOVED***"\s*(?:,\s*|$***REMOVED***/g, function ($0, $1, $2***REMOVED*** {

            // Check valid attribute names

            if (keys.indexOf($1***REMOVED*** === -1***REMOVED*** {
                return;
          ***REMOVED***

            // Allowed attribute value characters: !#$%&'(***REMOVED****+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9

            if ($2.match(/^[ \w\!#\$%&'\(\***REMOVED***\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~]+$/***REMOVED*** === null***REMOVED*** {
                return;
          ***REMOVED***

            // Check for duplicates

            if (attributes.hasOwnProperty($1***REMOVED******REMOVED*** {
                return;
          ***REMOVED***

            attributes[$1] = $2;
            return '';
      ***REMOVED******REMOVED***;

        if (verify !== ''***REMOVED*** {
            return null;
      ***REMOVED***

        return attributes;
  ***REMOVED***,

    randomString: function (size***REMOVED*** {

        var randomSource = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        var len = randomSource.length;

        var result = [];
        for (var i = 0; i < size; ++i***REMOVED*** {
            result[i] = randomSource[Math.floor(Math.random(***REMOVED*** * len***REMOVED***];
      ***REMOVED***

        return result.join(''***REMOVED***;
  ***REMOVED***,

    parseUri: function (input***REMOVED*** {

        // Based on: parseURI 1.2.2
        // http://blog.stevenlevithan.com/archives/parseuri
        // (c***REMOVED*** Steven Levithan <stevenlevithan.com>
        // MIT License

        var keys = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'hostname', 'port', 'resource', 'relative', 'pathname', 'directory', 'file', 'query', 'fragment'];

        var uriRegex = /^(?:([^:\/?#]+***REMOVED***:***REMOVED***?(?:\/\/((?:(([^:@]****REMOVED***(?::([^:@]****REMOVED******REMOVED***?***REMOVED***?@***REMOVED***?([^:\/?#]****REMOVED***(?::(\d****REMOVED******REMOVED***?***REMOVED******REMOVED***?(((((?:[^?#\/]*\/***REMOVED*******REMOVED***([^?#]****REMOVED******REMOVED***(?:\?([^#]****REMOVED******REMOVED***?***REMOVED***(?:#(.****REMOVED******REMOVED***?***REMOVED***/;
        var uriByNumber = uriRegex.exec(input***REMOVED***;
        var uri = {};

        var i = 15;
        while (i--***REMOVED*** {
            uri[keys[i]] = uriByNumber[i] || '';
      ***REMOVED***

        if (uri.port === null ||
            uri.port === ''***REMOVED*** {

            uri.port = (uri.protocol.toLowerCase(***REMOVED*** === 'http' ? '80' : (uri.protocol.toLowerCase(***REMOVED*** === 'https' ? '443' : ''***REMOVED******REMOVED***;
      ***REMOVED***

        return uri;
  ***REMOVED***
};


// Based on: Crypto-JS v3.1.2
// Copyright (c***REMOVED*** 2009-2013, Jeff Mott. All rights reserved.
// http://code.google.com/p/crypto-js/
// http://code.google.com/p/crypto-js/wiki/License

var CryptoJS=CryptoJS||function(h,r***REMOVED***{var k={},l=k.lib={},n=function(***REMOVED***{},f=l.Base={extend:function(a***REMOVED***{n.prototype=this;var b=new n;a&&b.mixIn(a***REMOVED***;b.hasOwnProperty("init"***REMOVED***||(b.init=function(***REMOVED***{b.$super.init.apply(this,arguments***REMOVED***}***REMOVED***;b.init.prototype=b;b.$super=this;return b},create:function(***REMOVED***{var a=this.extend(***REMOVED***;a.init.apply(a,arguments***REMOVED***;return a},init:function(***REMOVED***{},mixIn:function(a***REMOVED***{for(var b in a***REMOVED***a.hasOwnProperty(b***REMOVED***&&(this[b]=a[b]***REMOVED***;a.hasOwnProperty("toString"***REMOVED***&&(this.toString=a.toString***REMOVED***},clone:function(***REMOVED***{return this.init.prototype.extend(this***REMOVED***}},j=l.WordArray=f.extend({init:function(a,b***REMOVED***{a=this.words=a||[];this.sigBytes=b!=r?b:4*a.length},toString:function(a***REMOVED***{return(a||s***REMOVED***.stringify(this***REMOVED***},concat:function(a***REMOVED***{var b=this.words,d=a.words,c=this.sigBytes;a=a.sigBytes;this.clamp(***REMOVED***;if(c%4***REMOVED***for(var e=0;e<a;e++***REMOVED***b[c+e>>>2]|=(d[e>>>2]>>>24-8*(e%4***REMOVED***&255***REMOVED***<<24-8*((c+e***REMOVED***%4***REMOVED***;else if(65535<d.length***REMOVED***for(e=0;e<a;e+=4***REMOVED***b[c+e>>>2]=d[e>>>2];else b.push.apply(b,d***REMOVED***;this.sigBytes+=a;return this},clamp:function(***REMOVED***{var a=this.words,b=this.sigBytes;a[b>>>2]&=4294967295<<32-8*(b%4***REMOVED***;a.length=h.ceil(b/4***REMOVED***},clone:function(***REMOVED***{var a=f.clone.call(this***REMOVED***;a.words=this.words.slice(0***REMOVED***;return a},random:function(a***REMOVED***{for(var b=[],d=0;d<a;d+=4***REMOVED***b.push(4294967296*h.random(***REMOVED***|0***REMOVED***;return new j.init(b,a***REMOVED***}}***REMOVED***,m=k.enc={},s=m.Hex={stringify:function(a***REMOVED***{var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++***REMOVED***{var e=b[c>>>2]>>>24-8*(c%4***REMOVED***&255;d.push((e>>>4***REMOVED***.toString(16***REMOVED******REMOVED***;d.push((e&15***REMOVED***.toString(16***REMOVED******REMOVED***}return d.join(""***REMOVED***},parse:function(a***REMOVED***{for(var b=a.length,d=[],c=0;c<b;c+=2***REMOVED***d[c>>>3]|=parseInt(a.substr(c,2***REMOVED***,16***REMOVED***<<24-4*(c%8***REMOVED***;return new j.init(d,b/2***REMOVED***}},p=m.Latin1={stringify:function(a***REMOVED***{var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++***REMOVED***d.push(String.fromCharCode(b[c>>>2]>>>24-8*(c%4***REMOVED***&255***REMOVED******REMOVED***;return d.join(""***REMOVED***},parse:function(a***REMOVED***{for(var b=a.length,d=[],c=0;c<b;c++***REMOVED***d[c>>>2]|=(a.charCodeAt(c***REMOVED***&255***REMOVED***<<24-8*(c%4***REMOVED***;return new j.init(d,b***REMOVED***}},t=m.Utf8={stringify:function(a***REMOVED***{try{return decodeURIComponent(escape(p.stringify(a***REMOVED******REMOVED******REMOVED***}catch(b***REMOVED***{throw Error("Malformed UTF-8 data"***REMOVED***;}},parse:function(a***REMOVED***{return p.parse(unescape(encodeURIComponent(a***REMOVED******REMOVED******REMOVED***}},q=l.BufferedBlockAlgorithm=f.extend({reset:function(***REMOVED***{this._data=new j.init;this._nDataBytes=0},_append:function(a***REMOVED***{"string"==typeof a&&(a=t.parse(a***REMOVED******REMOVED***;this._data.concat(a***REMOVED***;this._nDataBytes+=a.sigBytes},_process:function(a***REMOVED***{var b=this._data,d=b.words,c=b.sigBytes,e=this.blockSize,f=c/(4*e***REMOVED***,f=a?h.ceil(f***REMOVED***:h.max((f|0***REMOVED***-this._minBufferSize,0***REMOVED***;a=f*e;c=h.min(4*a,c***REMOVED***;if(a***REMOVED***{for(var g=0;g<a;g+=e***REMOVED***this._doProcessBlock(d,g***REMOVED***;g=d.splice(0,a***REMOVED***;b.sigBytes-=c}return new j.init(g,c***REMOVED***},clone:function(***REMOVED***{var a=f.clone.call(this***REMOVED***;a._data=this._data.clone(***REMOVED***;return a},_minBufferSize:0}***REMOVED***;l.Hasher=q.extend({cfg:f.extend(***REMOVED***,init:function(a***REMOVED***{this.cfg=this.cfg.extend(a***REMOVED***;this.reset(***REMOVED***},reset:function(***REMOVED***{q.reset.call(this***REMOVED***;this._doReset(***REMOVED***},update:function(a***REMOVED***{this._append(a***REMOVED***;this._process(***REMOVED***;return this},finalize:function(a***REMOVED***{a&&this._append(a***REMOVED***;return this._doFinalize(***REMOVED***},blockSize:16,_createHelper:function(a***REMOVED***{return function(b,d***REMOVED***{return(new a.init(d***REMOVED******REMOVED***.finalize(b***REMOVED***}},_createHmacHelper:function(a***REMOVED***{return function(b,d***REMOVED***{return(new u.HMAC.init(a,d***REMOVED******REMOVED***.finalize(b***REMOVED***}}}***REMOVED***;var u=k.algo={};return k}(Math***REMOVED***;
(function (***REMOVED*** { var k = CryptoJS, b = k.lib, m = b.WordArray, l = b.Hasher, d = [], b = k.algo.SHA1 = l.extend({ _doReset: function (***REMOVED*** { this._hash = new m.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]***REMOVED*** }, _doProcessBlock: function (n, p***REMOVED*** { for (var a = this._hash.words, e = a[0], f = a[1], h = a[2], j = a[3], b = a[4], c = 0; 80 > c; c++***REMOVED*** { if (16 > c***REMOVED*** d[c] = n[p + c] | 0; else { var g = d[c - 3] ^ d[c - 8] ^ d[c - 14] ^ d[c - 16]; d[c] = g << 1 | g >>> 31 } g = (e << 5 | e >>> 27***REMOVED*** + b + d[c]; g = 20 > c ? g + ((f & h | ~f & j***REMOVED*** + 1518500249***REMOVED*** : 40 > c ? g + ((f ^ h ^ j***REMOVED*** + 1859775393***REMOVED*** : 60 > c ? g + ((f & h | f & j | h & j***REMOVED*** - 1894007588***REMOVED*** : g + ((f ^ h ^ j***REMOVED*** - 899497514***REMOVED***; b = j; j = h; h = f << 30 | f >>> 2; f = e; e = g } a[0] = a[0] + e | 0; a[1] = a[1] + f | 0; a[2] = a[2] + h | 0; a[3] = a[3] + j | 0; a[4] = a[4] + b | 0 }, _doFinalize: function (***REMOVED*** { var b = this._data, d = b.words, a = 8 * this._nDataBytes, e = 8 * b.sigBytes; d[e >>> 5] |= 128 << 24 - e % 32; d[(e + 64 >>> 9 << 4***REMOVED*** + 14] = Math.floor(a / 4294967296***REMOVED***; d[(e + 64 >>> 9 << 4***REMOVED*** + 15] = a; b.sigBytes = 4 * d.length; this._process(***REMOVED***; return this._hash }, clone: function (***REMOVED*** { var b = l.clone.call(this***REMOVED***; b._hash = this._hash.clone(***REMOVED***; return b } }***REMOVED***; k.SHA1 = l._createHelper(b***REMOVED***; k.HmacSHA1 = l._createHmacHelper(b***REMOVED*** }***REMOVED***(***REMOVED***;
(function (k***REMOVED*** { for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function (q***REMOVED*** { return 4294967296 * (q - (q | 0***REMOVED******REMOVED*** | 0 }, l = 2, b = 0; 64 > b;***REMOVED*** { var d; a: { d = l; for (var w = k.sqrt(d***REMOVED***, r = 2; r <= w; r++***REMOVED*** if (!(d % r***REMOVED******REMOVED*** { d = !1; break a } d = !0 } d && (8 > b && (s[b] = u(k.pow(l, 0.5***REMOVED******REMOVED******REMOVED***, t[b] = u(k.pow(l, 1 / 3***REMOVED******REMOVED***, b++***REMOVED***; l++ } var n = [], h = h.SHA256 = j.extend({ _doReset: function (***REMOVED*** { this._hash = new v.init(s.slice(0***REMOVED******REMOVED*** }, _doProcessBlock: function (q, h***REMOVED*** { for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++***REMOVED*** { if (16 > e***REMOVED*** n[e] = q[h + e] | 0; else { var m = n[e - 15], p = n[e - 2]; n[e] = ((m << 25 | m >>> 7***REMOVED*** ^ (m << 14 | m >>> 18***REMOVED*** ^ m >>> 3***REMOVED*** + n[e - 7] + ((p << 15 | p >>> 17***REMOVED*** ^ (p << 13 | p >>> 19***REMOVED*** ^ p >>> 10***REMOVED*** + n[e - 16] } m = l + ((f << 26 | f >>> 6***REMOVED*** ^ (f << 21 | f >>> 11***REMOVED*** ^ (f << 7 | f >>> 25***REMOVED******REMOVED*** + (f & g ^ ~f & j***REMOVED*** + t[e] + n[e]; p = ((c << 30 | c >>> 2***REMOVED*** ^ (c << 19 | c >>> 13***REMOVED*** ^ (c << 10 | c >>> 22***REMOVED******REMOVED*** + (c & d ^ c & b ^ d & b***REMOVED***; l = j; j = g; g = f; f = k + m | 0; k = b; b = d; d = c; c = m + p | 0 } a[0] = a[0] + c | 0; a[1] = a[1] + d | 0; a[2] = a[2] + b | 0; a[3] = a[3] + k | 0; a[4] = a[4] + f | 0; a[5] = a[5] + g | 0; a[6] = a[6] + j | 0; a[7] = a[7] + l | 0 }, _doFinalize: function (***REMOVED*** { var d = this._data, b = d.words, a = 8 * this._nDataBytes, c = 8 * d.sigBytes; b[c >>> 5] |= 128 << 24 - c % 32; b[(c + 64 >>> 9 << 4***REMOVED*** + 14] = k.floor(a / 4294967296***REMOVED***; b[(c + 64 >>> 9 << 4***REMOVED*** + 15] = a; d.sigBytes = 4 * b.length; this._process(***REMOVED***; return this._hash }, clone: function (***REMOVED*** { var b = j.clone.call(this***REMOVED***; b._hash = this._hash.clone(***REMOVED***; return b } }***REMOVED***; g.SHA256 = j._createHelper(h***REMOVED***; g.HmacSHA256 = j._createHmacHelper(h***REMOVED*** }***REMOVED***(Math***REMOVED***;
(function(***REMOVED***{var c=CryptoJS,k=c.enc.Utf8;c.algo.HMAC=c.lib.Base.extend({init:function(a,b***REMOVED***{a=this._hasher=new a.init;"string"==typeof b&&(b=k.parse(b***REMOVED******REMOVED***;var c=a.blockSize,e=4*c;b.sigBytes>e&&(b=a.finalize(b***REMOVED******REMOVED***;b.clamp(***REMOVED***;for(var f=this._oKey=b.clone(***REMOVED***,g=this._iKey=b.clone(***REMOVED***,h=f.words,j=g.words,d=0;d<c;d++***REMOVED***h[d]^=1549556828,j[d]^=909522486;f.sigBytes=g.sigBytes=e;this.reset(***REMOVED***},reset:function(***REMOVED***{var a=this._hasher;a.reset(***REMOVED***;a.update(this._iKey***REMOVED***},update:function(a***REMOVED***{this._hasher.update(a***REMOVED***;return this},finalize:function(a***REMOVED***{var b=this._hasher;a=b.finalize(a***REMOVED***;b.reset(***REMOVED***;return b.finalize(this._oKey.clone(***REMOVED***.concat(a***REMOVED******REMOVED***}}***REMOVED***}***REMOVED***(***REMOVED***;
(function(***REMOVED***{var h=CryptoJS,j=h.lib.WordArray;h.enc.Base64={stringify:function(b***REMOVED***{var e=b.words,f=b.sigBytes,c=this._map;b.clamp(***REMOVED***;b=[];for(var a=0;a<f;a+=3***REMOVED***for(var d=(e[a>>>2]>>>24-8*(a%4***REMOVED***&255***REMOVED***<<16|(e[a+1>>>2]>>>24-8*((a+1***REMOVED***%4***REMOVED***&255***REMOVED***<<8|e[a+2>>>2]>>>24-8*((a+2***REMOVED***%4***REMOVED***&255,g=0;4>g&&a+0.75*g<f;g++***REMOVED***b.push(c.charAt(d>>>6*(3-g***REMOVED***&63***REMOVED******REMOVED***;if(e=c.charAt(64***REMOVED******REMOVED***for(;b.length%4;***REMOVED***b.push(e***REMOVED***;return b.join(""***REMOVED***},parse:function(b***REMOVED***{var e=b.length,f=this._map,c=f.charAt(64***REMOVED***;c&&(c=b.indexOf(c***REMOVED***,-1!=c&&(e=c***REMOVED******REMOVED***;for(var c=[],a=0,d=0;d<e;d++***REMOVED***if(d%4***REMOVED***{var g=f.indexOf(b.charAt(d-1***REMOVED******REMOVED***<<2*(d%4***REMOVED***,h=f.indexOf(b.charAt(d***REMOVED******REMOVED***>>>6-2*(d%4***REMOVED***;c[a>>>2]|=(g|h***REMOVED***<<24-8*(a%4***REMOVED***;a++}return j.create(c,a***REMOVED***},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}***REMOVED***(***REMOVED***;
