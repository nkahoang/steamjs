/**
 * Check if given obj just a primitive type wrapper
 * @param {Object} obj
 * @returns {boolean}
 * @api private
 */
exports.isWrapperType = function(obj***REMOVED*** {
    return isNumber(obj***REMOVED*** || isString(obj***REMOVED*** || isBoolean(obj***REMOVED***;
}

/**
 * Merge object b with object a.
 *
 *     var a = { foo: 'bar' }
 *       , b = { bar: 'baz' };
 *
 *     utils.merge(a, b***REMOVED***;
 *     // => { foo: 'bar', bar: 'baz' }
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object}
 * @api private
 */

exports.merge = function(a, b***REMOVED***{
  if (a && b***REMOVED*** {
    for (var key in b***REMOVED*** {
      a[key] = b[key];
  ***REMOVED***
***REMOVED***
  return a;
};

function isNumber(arg***REMOVED*** {
  return typeof arg === 'number' || arg instanceof Number;
}

exports.isNumber = isNumber;

function isString(arg***REMOVED*** {
  return typeof arg === 'string' || arg instanceof String;
}

function isBoolean(arg***REMOVED*** {
  return typeof arg === 'boolean' || arg instanceof Boolean;
}
exports.isBoolean = isBoolean;

exports.isString = isString;

function isBuffer(arg***REMOVED*** {
  return typeof Buffer !== 'undefined' && arg instanceof Buffer;
}

exports.isBuffer = isBuffer;

function isDate(d***REMOVED*** {
  return isObject(d***REMOVED*** && objectToString(d***REMOVED*** === '[object Date]';
}

exports.isDate = isDate;

function objectToString(o***REMOVED*** {
  return Object.prototype.toString.call(o***REMOVED***;
}

function isObject(arg***REMOVED*** {
  return typeof arg === 'object' && arg !== null;
}

exports.isObject = isObject;

function isRegExp(re***REMOVED*** {
  return isObject(re***REMOVED*** && objectToString(re***REMOVED*** === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isNullOrUndefined(arg***REMOVED*** {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isArguments(object***REMOVED*** {
  return objectToString(object***REMOVED*** === '[object Arguments]';
}

exports.isArguments = isArguments;

exports.isFunction = function(arg***REMOVED*** {
  return typeof arg === 'function' || arg instanceof Function;
};

function isError(e***REMOVED*** {
  return isObject(e***REMOVED*** && objectToString(e***REMOVED*** === '[object Error]';
}
exports.isError = isError;