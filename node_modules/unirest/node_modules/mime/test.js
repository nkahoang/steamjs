/**
 * Usage: node test.js
 */

var mime = require('./mime'***REMOVED***;
var assert = require('assert'***REMOVED***;
var ***REMOVED***;

function eq(a, b***REMOVED*** {
  console.log('Test: ' + a + ' === ' + b***REMOVED***;
  assert.strictEqual.apply(null, arguments***REMOVED***;
}

console.log(Object.keys(mime.extensions***REMOVED***.length + ' types'***REMOVED***;
console.log(Object.keys(mime.types***REMOVED***.length + ' extensions\n'***REMOVED***;

//
// Test mime lookups
//

eq('text/plain', mime.lookup('text.txt'***REMOVED******REMOVED***;     // normal file
eq('text/plain', mime.lookup('TEXT.TXT'***REMOVED******REMOVED***;     // uppercase
eq('text/plain', mime.lookup('dir/text.txt'***REMOVED******REMOVED***; // dir + file
eq('text/plain', mime.lookup('.text.txt'***REMOVED******REMOVED***;    // hidden file
eq('text/plain', mime.lookup('.txt'***REMOVED******REMOVED***;         // nameless
eq('text/plain', mime.lookup('txt'***REMOVED******REMOVED***;          // extension-only
eq('text/plain', mime.lookup('/txt'***REMOVED******REMOVED***;         // extension-less (***REMOVED***
eq('text/plain', mime.lookup('\\txt'***REMOVED******REMOVED***;        // Windows, extension-less
eq('application/octet-stream', mime.lookup('text.nope'***REMOVED******REMOVED***; // unrecognized
eq('fallback', mime.lookup('text.fallback', 'fallback'***REMOVED******REMOVED***; // alternate default

//
// Test extensions
//

eq('txt', mime.extension(mime.types.text***REMOVED******REMOVED***;
eq('html', mime.extension(mime.types.htm***REMOVED******REMOVED***;
eq('bin', mime.extension('application/octet-stream'***REMOVED******REMOVED***;
eq('bin', mime.extension('application/octet-stream '***REMOVED******REMOVED***;
eq('html', mime.extension(' text/html; charset=UTF-8'***REMOVED******REMOVED***;
eq('html', mime.extension('text/html; charset=UTF-8 '***REMOVED******REMOVED***;
eq('html', mime.extension('text/html; charset=UTF-8'***REMOVED******REMOVED***;
eq('html', mime.extension('text/html ; charset=UTF-8'***REMOVED******REMOVED***;
eq('html', mime.extension('text/html;charset=UTF-8'***REMOVED******REMOVED***;
eq('html', mime.extension('text/Html;charset=UTF-8'***REMOVED******REMOVED***;
eq(undefined, mime.extension('unrecognized'***REMOVED******REMOVED***;

//
// Test node.types lookups
//

eq('application/font-woff', mime.lookup('file.woff'***REMOVED******REMOVED***;
eq('application/octet-stream', mime.lookup('file.buffer'***REMOVED******REMOVED***;
eq('audio/mp4', mime.lookup('file.m4a'***REMOVED******REMOVED***;
eq('font/opentype', mime.lookup('file.otf'***REMOVED******REMOVED***;

//
// Test charsets
//

eq('UTF-8', mime.charsets.lookup('text/plain'***REMOVED******REMOVED***;
eq(undefined, mime.charsets.lookup(mime.types.js***REMOVED******REMOVED***;
eq('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'***REMOVED******REMOVED***;

//
// Test for overlaps between mime.types and node.types
//

var apacheTypes = new mime.Mime(***REMOVED***, nodeTypes = new mime.Mime(***REMOVED***;
apacheTypes.load(path.join(__dirname, 'types/mime.types'***REMOVED******REMOVED***;
nodeTypes.load(path.join(__dirname, 'types/node.types'***REMOVED******REMOVED***;

var keys = [].concat(Object.keys(apacheTypes.types***REMOVED******REMOVED***
             .concat(Object.keys(nodeTypes.types***REMOVED******REMOVED***;
keys.sort(***REMOVED***;
for (var i = 1; i < keys.length; i++***REMOVED*** {
  if (keys[i] == keys[i-1]***REMOVED*** {
    console.warn('Warning: ' +
      'node.types defines ' + keys[i] + '->' + nodeTypes.types[keys[i]] +
      ', mime.types defines ' + keys[i] + '->' + apacheTypes.types[keys[i]]***REMOVED***;
***REMOVED***
}

console.log('\nOK'***REMOVED***;
