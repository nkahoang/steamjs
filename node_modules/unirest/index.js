/**
 * Unirest for Node
 *
 * @author Nijko Yonskai
 * @copyright 2013
 * @license MIT
 */

/**
 * Module Dependencies
 */

var StringDecoder = require('string_decoder'***REMOVED***.StringDecoder;
var Stream = require('stream'***REMOVED***;
var mime = require('mime'***REMOVED***;
var zlib = require('zlib'***REMOVED***;
var ***REMOVED***;
var fs = require('fs'***REMOVED***;

/**
 * Define form mime type
 */

mime.define({
  'application/x-www-form-urlencoded': ['form', 'urlencoded', 'form-data']
}***REMOVED***;

/**
 * Initialize our Rest Container
 *
 * @type {Object}
 */
Unirest = function (method, uri, headers, body, callback***REMOVED*** {
  var unirest = function (uri, headers, body, callback***REMOVED*** {
    var $this = {
      /**
       * Container to hold headers with lowercased field-names.
       *
       * @type {Object}
       * @private
       */
      _headers: {},

      /**
       * Container to hold multipart form data for processing upon request.
       *
       * @type {Array}
       * @private
       */
      _multipart: [],

      /**
       * Container to hold form data for processing upon request.
       *
       * @type {Array}
       * @private
       */
      _form: [],

      /**
       * Request option container for details about the request.
       *
       * @type {Object}
       */
      options: {
        /**
         * Url obtained from request method arguments.
         *
         * @type {String}
         */
        url: uri,

        /**
         * Method obtained from request method arguments.
         *
         * @type {String}
         */
        method: method,

        /**
         * List of headers with case-sensitive fields.
         *
         * @type {Object}
         */
        headers: {}
    ***REMOVED***,

      /**
       * Attaches a field to the multipart-form request.
       *
       * Behaves much like form fields in HTML.
       *
       * @param  {String} name
       * @param  {String} value
       * @return {Object}
       */
      field: function (name, value***REMOVED*** {
        if (is(name***REMOVED***.a(Object***REMOVED******REMOVED*** {
          for (var key in name***REMOVED***
            $this.attach(key, name[key]***REMOVED***;
      ***REMOVED*** else {
          $this._multipart.push({
            name: name,
            value: value,
            attachment: false
        ***REMOVED******REMOVED***;
      ***REMOVED***

        return $this;
    ***REMOVED***,

      /**
       * Attaches a file to the multipart-form request.
       *
       * @param  {String} name
       * @param  {String|Object} path
       * @return {Object}
       */
      attach: function (name, path***REMOVED*** {
        if (is(name***REMOVED***.a(Object***REMOVED******REMOVED*** {
          for (var key in name***REMOVED***
            $this.attach(key, name[key]***REMOVED***;
      ***REMOVED*** else {
          $this._multipart.push({
            name: name,
            value: path,
            attachment: true
        ***REMOVED******REMOVED***;
      ***REMOVED***

        return $this;
    ***REMOVED***,

      /**
       * Basic Header Authentication Method
       *
       * Supports user being an Object to reflect Request
       * Supports user, password to reflect SuperAgent
       *
       * @param  {String|Object} user
       * @param  {String} password
       * @param  {Boolean} sendImmediately
       * @return {Object}
       */
      auth: function (user, password, sendImmediately***REMOVED*** {
        $this.options.auth = (is(user***REMOVED***.a(Object***REMOVED******REMOVED*** ? user : {
          user: user,
          password: password,
          sendImmediately: sendImmediately
      ***REMOVED***;

        return $this;
    ***REMOVED***,

      /**
       * Sets header field to value
       *
       * @param  {String} field Header field
       * @param  {String} value Header field value
       * @return {Object}
       */
      header: function (field, value***REMOVED*** {
        if (is(field***REMOVED***.a(Object***REMOVED******REMOVED*** {
          for (var key in field***REMOVED***
            $this.header(key, field[key]***REMOVED***;

          return $this;
      ***REMOVED***

        $this.options.headers[field] = value;
        $this._headers[field.toLowerCase(***REMOVED***] = value;
        return $this;
    ***REMOVED***,

      /**
       * Append query string to request uri.
       *
       * @param  {String|Object} value
       * @return {Object}
       */
      query: function (value***REMOVED*** {
        if (is(value***REMOVED***.a(Object***REMOVED******REMOVED*** value = Unirest.serializers.form(value***REMOVED***;
        if (!value.length***REMOVED*** return $this;

        $this.options.url += (does($this.options.url***REMOVED***.contain('?'***REMOVED*** ? '&' : '?'***REMOVED*** + value;
        return $this;
    ***REMOVED***,

      /**
       * Set _content-type_ header with type passed through `mime.lookup(***REMOVED***` when necessary.
       *
       * @param  {String} type
       * @return {Object}
       */
      type: function (type***REMOVED*** {
        $this.header('Content-Type', does(type***REMOVED***.contain('/'***REMOVED***
          ? type
          : mime.lookup(type***REMOVED******REMOVED***;
        return $this;
    ***REMOVED***,

      /**
       * Set body and do some pre-sending transformations...
       *
       * Determines type whether `form` or `json`.
       * For other types use `.type(***REMOVED***` to set the _content-type_.
       *
       * If type is _application/x-www-form-urlencoded_ data will be appended to the
       * previously set body data.
       *
       * @param  {Mixed} data
       * @return {Object}
       */
      send: function (data***REMOVED*** {
        var type = $this._headers['content-type'];

        if (is(data***REMOVED***.a(Object***REMOVED******REMOVED*** {
          if (!type || type != 'application/json'***REMOVED*** {
            $this.type('form'***REMOVED***;

            type = $this._headers['content-type'];

            $this.options.body = Unirest.serializers.form(data***REMOVED***;
        ***REMOVED*** else if (type == 'application/json'***REMOVED*** {
            $this.options.json = true;

            if ($this.options.body && is($this.options.body***REMOVED***.a(Object***REMOVED******REMOVED*** {
              for (var key in data***REMOVED*** $this.options.body[key] = data[key];
          ***REMOVED*** else {
              $this.options.body = data;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else if (is(data***REMOVED***.a(String***REMOVED******REMOVED*** {
          if (!type***REMOVED*** {
            $this.type('form'***REMOVED***;

            type = $this._headers['content-type'];
        ***REMOVED***

          if ('application/x-www-form-urlencoded' == type***REMOVED*** {
            $this.options.body = $this.options.body
              ? $this.options.body + '&' + data
              : data;
        ***REMOVED*** else {
            $this.options.body = ($this.options.body || ''***REMOVED*** + data;
        ***REMOVED***
      ***REMOVED*** else {
          $this.options.body = data;
      ***REMOVED***

        return $this;
    ***REMOVED***,

      /**
       * Takes multipart options and places them on `options.multipart` array.
       * Transforms body when an `Object` or _content-type_ is present.
       *
       * Example:
       *
       *      Unirest.get('http://google.com'***REMOVED***.part({
       *        'content-type': 'application/json',
       *        body: {
       *          phrase: 'Hello'
       *      ***REMOVED***
       *    ***REMOVED******REMOVED***.part({
       *        'content-type': 'application/json',
       *        body: {
       *          phrase: 'World'
       *      ***REMOVED***
       *    ***REMOVED******REMOVED***.end(function (response***REMOVED*** {}***REMOVED***;
       *
       * @param  {Object|String} options When an Object, headers should be placed directly on the object,
       *                                 not under a child property.
       * @return {Object}
       */
      part: function (options***REMOVED*** {
        if (!$this.options.multipart***REMOVED***
          $this.options.multipart = [];

        if (is(options***REMOVED***.a(Object***REMOVED******REMOVED*** {
          if (options['content-type']***REMOVED*** {
            var type = Unirest.type(options['content-type'], true***REMOVED***;
            if (type***REMOVED*** options.body = Unirest.Response.parse(options.body***REMOVED***;
        ***REMOVED*** else {
            if (is(options.body***REMOVED***.a(Object***REMOVED******REMOVED***
              options.body = Request.serializers.json(options.body***REMOVED***;
        ***REMOVED***

          $this.options.multipart.push(options***REMOVED***;
      ***REMOVED*** else {
          $this.options.multipart.push({
            body: options
        ***REMOVED******REMOVED***;
      ***REMOVED***

        return $this;
    ***REMOVED***,

      /**
       * Finalize and send the request, after a response has been recieved do some additional post-processing
       * that request fails to do (this section mimics superagent style response***REMOVED***.
       *
       * @param  {Function} callback
       * @return {Object}
       */
      end: function (callback***REMOVED*** {
        var Request = Unirest.request($this.options, function (error, response, body***REMOVED*** {
          var data, type, result = {};

          // Handle pure error
          if (error && !response***REMOVED*** {
            result.error = error;

            (callback***REMOVED*** && callback(result***REMOVED***;
            return;
        ***REMOVED***

          // Handle No Response...
          // This is weird.
          if (!response***REMOVED*** {
            console.log('This is odd, report this action / request to: http://github.com/mashape/unirest-nodejs'***REMOVED***;
            result.error = {
              message: 'No response found.'
          ***REMOVED***;

            (callback***REMOVED*** && callback(result***REMOVED***;
            return;
        ***REMOVED***

          // Handle References
          result = response;

          // Handle Status
          var status = response.statusCode;
          var type = status / 100 | 0;

          result.code = status;
          result.status = status;
          result.statusType = type;
          result.info = 1 == type;
          result.ok = 2 == type;
          result.clientError = 4 == type;
          result.serverError = 5 == type;
          result.accepted = 202 == status;
          result.noContent = 204 == status || 1223 == status;
          result.badRequest = 400 == status;
          result.unauthorized = 401 == status;
          result.notAcceptable = 406 == status;
          result.notFound = 404 == status;
          result.forbidden = 403 == status;
          result.error = (4 == type || 5 == type***REMOVED***
            ? function (***REMOVED*** {
                var msg = 'got ' + result.status + ' response';
                var err = new Error(msg***REMOVED***;
                    err.status = result.status;
                return err;
            ***REMOVED***(***REMOVED***
            : false;

          // Cookie Holder
          result.cookies = {};

          // Cookie Sugar Method
          result.cookie = function (name***REMOVED*** {
            return result.cookies[name];
        ***REMOVED***;

          if (response.cookies && is(response.cookies***REMOVED***.a(Object***REMOVED*** && Object.keys(response.cookies***REMOVED***.length > 0***REMOVED*** {
            result.cookies = response.cookies;
        ***REMOVED*** else {
            // Set-Cookie Parsing
            var cookies = response.headers['set-cookie'];

            if (cookies && is(cookies***REMOVED***.a(Array***REMOVED******REMOVED*** {
              for (var index in cookies***REMOVED*** {
                var entry = cookies[index];

                if (is(entry***REMOVED***.a(String***REMOVED*** && does(entry***REMOVED***.contain(';'***REMOVED******REMOVED*** {
                  entry.split(';'***REMOVED***.forEach(function (cookie***REMOVED*** {
                    var crumbs = cookie.split('='***REMOVED***;
                    result.cookies[Unirest.trim(crumbs[0]***REMOVED***] = Unirest.trim(crumbs[1] || ''***REMOVED***;
                ***REMOVED******REMOVED***;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***

            // Cookie header parser... for some reason there are two...?
            cookies = response.headers['cookie'];

            if (cookies && is(cookies***REMOVED***.a(String***REMOVED******REMOVED*** {
              cookies.split(';'***REMOVED***.forEach(function (cookie***REMOVED*** {
                var crumbs = cookie.split('='***REMOVED***;
                result.cookies[Unirest.trim(crumbs[0]***REMOVED***] = Unirest.trim(crumbs[1] || ''***REMOVED***;
            ***REMOVED******REMOVED***;
          ***REMOVED***
        ***REMOVED***

          // Response

          result.raw_body = body;
          result.headers = response.headers;

          // Handle Response Body

          if (body***REMOVED*** {
            type = Unirest.type(result.headers['content-type'], true***REMOVED***;
            if (type***REMOVED*** data = Unirest.Response.parse(body, type***REMOVED***;
            else data = body;
        ***REMOVED***

          result.body = data;

          (callback***REMOVED*** && callback(result***REMOVED***;
      ***REMOVED******REMOVED***;

        if ($this._multipart.length***REMOVED*** {
          var form = Request.form(***REMOVED***;

          for (var i = 0; i < $this._multipart.length; i++***REMOVED*** {
            var item = $this._multipart[i];

            if (item.attachment && is(item.value***REMOVED***.a(String***REMOVED******REMOVED*** {
              if (does(item.value***REMOVED***.contain('http://'***REMOVED*** || does(item.value***REMOVED***.contain('https://'***REMOVED******REMOVED*** {
                item.value = Unirest.require(item.value***REMOVED***;
            ***REMOVED*** else if (does(item.value***REMOVED***.contain('://'***REMOVED******REMOVED*** {
                item.value = fs.createReadStream(item.value***REMOVED***;
            ***REMOVED*** else {
                item.value = fs.createReadStream(path.join(__dirname, item.value***REMOVED******REMOVED***;
            ***REMOVED***
          ***REMOVED***

            form.append(item.name, item.value***REMOVED***;
        ***REMOVED***
      ***REMOVED***

        Request.on('response', function (response***REMOVED*** {
          if (/^(deflate|gzip***REMOVED***$/.test(response.headers['content-encoding']***REMOVED******REMOVED*** {
            var unzip = zlib.createUnzip(***REMOVED***;
            var stream = new Stream;
            var decoder, _on = response.on;

            // Keeping node happy
            stream.req = Request.req;

            // Make sure we emit prior to processing
            unzip.on('error', function (error***REMOVED*** {
              stream.emit('error', error***REMOVED***;
          ***REMOVED******REMOVED***;

            // Start the processing
            response.pipe(unzip***REMOVED***;

            // Ensure encoding is captured
            response.setEncoding = function (type***REMOVED*** {
              decoder = new StringDecoder(type***REMOVED***;
          ***REMOVED***;

            // Capture decompression and decode with captured encoding
            unzip.on('data', function (buffer***REMOVED*** {
              if (!decoder***REMOVED*** return stream.emit('data', buffer***REMOVED***;
              var string = decoder.write(buffer***REMOVED***;
              if (string.length***REMOVED*** stream.emit('data', string***REMOVED***;
          ***REMOVED******REMOVED***;

            // Emit yoself
            unzip.on('end', function (***REMOVED*** {
              stream.emit('end'***REMOVED***;
          ***REMOVED******REMOVED***;

            response.on = function (type, next***REMOVED*** {
              if ('data' == type || 'end' == type***REMOVED*** {
                stream.on(type, next***REMOVED***;
            ***REMOVED*** else if ('error' == type***REMOVED*** {
                _on.call(response, type, next***REMOVED***;
            ***REMOVED*** else {
                _on.call(response, type, next***REMOVED***;
            ***REMOVED***
          ***REMOVED***;
        ***REMOVED***
      ***REMOVED******REMOVED***;

        return Request;
    ***REMOVED***
  ***REMOVED***;

    /**
     * Alias for _.header_
     * @type {Function}
     */
    $this.headers = $this.header;

    /**
     * Alias for _.header_
     *
     * @type {Function}
     */
    $this.set = $this.header;

    /**
     * Alias for _.end_
     *
     * @type {Function}
     */
    $this.complete = $this.end;


    /**
     * Aliases for _.end_
     *
     * @type {Object}
     */

    $this.as = {
      json: $this.end,
      binary: $this.end,
      string: $this.end
  ***REMOVED***;

    // Iterates over a list of option methods to generate the chaining
    // style of use you see in Superagent and jQuery.
    for (var x in Unirest.enum.options***REMOVED*** {
      var option = Unirest.enum.options[x];
      var reference = null;

      if (option.indexOf(':'***REMOVED*** != -1***REMOVED*** {
        option = option.split(':'***REMOVED***;
        reference = option[1];
        option = option[0];
    ***REMOVED***

      (function (name, ref***REMOVED*** {
        $this[name] = function (arg***REMOVED*** {
          $this.options[ref || name] = arg;
          return $this;
      ***REMOVED***
    ***REMOVED******REMOVED***(option, reference***REMOVED***;
  ***REMOVED***

    if (headers && typeof headers === 'function'***REMOVED***
      callback = headers, headers = null;
    else if (body && typeof body === 'function'***REMOVED***
      callback = body, body = null;

    if (headers***REMOVED*** $this.set(headers***REMOVED***;
    if (body***REMOVED*** $this.send(body***REMOVED***;

    return callback ? $this.end(callback***REMOVED*** : $this;
***REMOVED***;

  return uri ? unirest(uri, headers, body, callback***REMOVED*** : unirest;
};

/**
 * Mime-type lookup / parser.
 *
 * @param  {String} type
 * @param  {Boolean} parse Should we parse?
 * @return {String}
 */
Unirest.type = function (type, parse***REMOVED*** {
  if (typeof type !== "string"***REMOVED*** return false;
  return parse ? type.split(/ *; */***REMOVED***.shift(***REMOVED*** : (Unirest.types[type] || type***REMOVED***;
};

/**
 * Parse header parameters.
 *
 * @param  {String} str
 * @return {Object}
 */
Unirest.params = function (str***REMOVED*** {
  return reduce(str.split(/ *; */***REMOVED***, function (obj, str***REMOVED*** {
    var parts = str.split(/ *= */***REMOVED***
      , key = parts.shift(***REMOVED***
      , val = parts.shift(***REMOVED***;

    if (key && val***REMOVED*** obj[key] = val;
    return obj;
***REMOVED***, {}***REMOVED***;
};

/**
 * Utility method to trim strings.
 *
 * @type {String}
 */
Unirest.trim = ''.trim
  ? function(s***REMOVED*** { return s.trim(***REMOVED***; }
  : function(s***REMOVED*** { return s.replace(/(^\s*|\s*$***REMOVED***/g, ''***REMOVED***; };

/**
 * Parser methods for different data types.
 *
 * @type {Object}
 */
Unirest.parsers = {
  string: function (data***REMOVED*** {
    var obj = {};
    var pairs = data.split('&'***REMOVED***;
    var parts;
    var pair;

    for (var i = 0, len = pairs.length; i < len; ++i***REMOVED*** {
      pair = pairs[i];
      parts = pair.split('='***REMOVED***;
      obj[decodeURIComponent(parts[0]***REMOVED***] = decodeURIComponent(parts[1]***REMOVED***;
  ***REMOVED***

    return obj;
***REMOVED***,

  json: function (data***REMOVED*** {
    try {
      data = JSON.parse(data***REMOVED***;
  ***REMOVED*** catch (e***REMOVED*** {}

    return data;
***REMOVED***
};

/**
 * Serialization methods for different data types.
 *
 * @type {Object}
 */
Unirest.serializers = {
  form: function (obj, parent***REMOVED*** {
    if (!is(obj***REMOVED***.a(Object***REMOVED*** && !is(obj***REMOVED***.a(Array***REMOVED******REMOVED***
      return obj;

    var str = [];
    for (var index in obj***REMOVED*** {
      var key = parent ? parent : index
        , value = obj[index];

      str.push(typeof value == "object" ? Unirest.serializers.form(value, key***REMOVED*** : encodeURIComponent(key***REMOVED*** + "=" + encodeURIComponent(value***REMOVED******REMOVED***;
  ***REMOVED***

    return str.join("&"***REMOVED***;
***REMOVED***,

  json: function (obj***REMOVED*** {
    return JSON.stringify(obj***REMOVED***;
***REMOVED***
};

/**
 * Unirest Request Utility Methods
 *
 * @type {Object}
 */
Unirest.Request = {
  serialize: function (string, type***REMOVED*** {
    var serializer = Unirest.enum.serialize[type];
    return seralizer ? serializer(string***REMOVED*** : string;
***REMOVED***,

  uid: function (len***REMOVED*** {
    var output = '';
    var chars = 'abcdefghijklmnopqrstuvwxyz123456789';
    var nchars = chars.length;
    while (len--***REMOVED*** output += chars[Math.random(***REMOVED*** * nchars | 0];
    return output;
***REMOVED***
};

/**
 * Unirest Response Utility Methods
 *
 * @type {Object}
 */
Unirest.Response = {
  parse: function (string, type***REMOVED*** {
    var parser = Unirest.enum.parse[type];
    return parser ? parser(string***REMOVED*** : string;
***REMOVED***,

  parseHeader: function (str***REMOVED*** {
    var lines = str.split(/\r?\n/***REMOVED***
      , fields = {}
      , index
      , line
      , field
      , val;

    // Trailing CLRF
    lines.pop(***REMOVED***;

    for (var i = 0, len = lines.length; i < len; ++i***REMOVED*** {
      line = lines[i];
      index = line.indexOf(':'***REMOVED***;
      field = line.slice(0, index***REMOVED***.toLowerCase(***REMOVED***;
      val = trim(line.slice(index + 1***REMOVED******REMOVED***;
      fields[field] = val;
  ***REMOVED***

    return fields;
***REMOVED***
};

/**
 * Expose the underlying layer.
 */

Unirest.request = require('request'***REMOVED***;
Unirest.cookie = Unirest.request.cookie;
Unirest.pipe = Unirest.request.pipe;

/**
 * Expose cookie store (tough-cookie***REMOVED***
 *
 * @return {Function} Cookie Store
 */
Unirest.jar = function (options***REMOVED*** {
  options = options || {};

  var jar = Unirest.request.jar(***REMOVED***;

  // Because Requests aliases toughcookie rather than returning.
  if (options.store***REMOVED*** {
    jar._jar.store = options.store;
***REMOVED***

  if (options.rejectPublicSuffixes***REMOVED*** {
    jar._jar.rejectPublicSuffixes = options.rejectPublicSuffixes
***REMOVED***;

  jar.add = jar.setCookie;
  jar.toString = jar.getCookieString;

  return jar;
};

/**
 * Enum Structures
 *
 * @type {Object}
 */
Unirest.enum = {
  serialize: {
    'application/x-www-form-urlencoded': Unirest.serializers.form,
    'application/json': Unirest.serializers.json
***REMOVED***,

  parse: {
    'application/x-www-form-urlencoded': Unirest.parsers.string,
    'application/json': Unirest.parsers.json
***REMOVED***,

  methods: [
    'GET',
    'HEAD',
    'PUT',
    'POST',
    'PATCH',
    'DELETE',
    'OPTIONS'
  ],

  options: [
    'uri:url', 'redirects:maxRedirects', 'redirect:followRedirect', 'url', 'method', 'qs', 'form', 'json', 'multipart',
    'followRedirect', 'followAllRedirects', 'maxRedirects', 'encoding', 'pool', 'timeout', 'proxy', 'oauth', 'hawk',
    'ssl:strictSSL', 'strictSSL', 'jar', 'cookies:jar', 'aws', 'httpSignature', 'localAddress', 'ip:localAddress', 'secureProtocol'
  ]
};

/**
 * Generate sugar for request library.
 *
 * This allows us to mock super-agent chaining style while using request library under the hood.
 */

for (var i in Unirest.enum.methods***REMOVED*** {
  var method = Unirest.enum.methods[i].toLowerCase(***REMOVED***;
  (function (type***REMOVED*** { Unirest[type] = Unirest(type***REMOVED***; }***REMOVED***(method***REMOVED***;
}

/**
 * Simple Utility Methods for checking information about a value.
 *
 * @param  {Mixed}  value  Could be anything.
 * @return {Object}
 */
function is (value***REMOVED*** {
  return {
    a: function (check***REMOVED*** {
      if (check.prototype***REMOVED*** check = check.prototype.constructor.name;
      var type = Object.prototype.toString.call(value***REMOVED***.slice(8, -1***REMOVED***.toLowerCase(***REMOVED***;
      return value !== undefined && value !== null && type === check.toLowerCase(***REMOVED***;
  ***REMOVED***,
***REMOVED***;
}

/**
 * Simple Utility Methods for checking information about a value.
 *
 * @param  {Mixed}  value  Could be anything.
 * @return {Object}
 */
function does (value***REMOVED*** {
  var arrayIndexOf = (Array.indexOf ? function (arr, obj, from***REMOVED*** {
    return arr.indexOf(obj, from***REMOVED***;
***REMOVED*** : function (arr, obj, from***REMOVED*** {
    var l = arr.length, i = from ? parseInt((1*from***REMOVED*** + (from<0 ? l:0***REMOVED***, 10***REMOVED*** : 0; i = i<0 ? 0 : i;
    for (; i<l; i++***REMOVED*** if (i in arr  &&  arr[i] === obj***REMOVED*** return i;
    return -1;
***REMOVED******REMOVED***;

  return {
    startWith: function (string***REMOVED*** {
      if (is(value***REMOVED***.a(String***REMOVED******REMOVED*** return value.slice(0, string.length***REMOVED*** == string;
      if (is(value***REMOVED***.a(Array***REMOVED******REMOVED*** return value[0] == string;
      return false;
  ***REMOVED***,

    endWith: function (string***REMOVED*** {
      if (is(value***REMOVED***.a(String***REMOVED******REMOVED*** return value.slice(-string.length***REMOVED*** == string;
      if (is(value***REMOVED***.a(Array***REMOVED******REMOVED*** return value[value.length - 1] == string;
      return false;
  ***REMOVED***,

    contain: function (field***REMOVED*** {
      if (is(value***REMOVED***.a(String***REMOVED******REMOVED*** return value.indexOf(field***REMOVED*** != -1;
      if (is(value***REMOVED***.a(Object***REMOVED******REMOVED*** return value.hasOwnProperty(field***REMOVED***;
      if (is(value***REMOVED***.a(Array***REMOVED******REMOVED*** return !!~arrayIndexOf(value, field***REMOVED***;
      return false;
  ***REMOVED***
***REMOVED***
};

/**
 * Expose the Unirest Container
 */

module.exports = exports = Unirest;
