***REMOVED***
(function(***REMOVED*** {
  var bom, builder, events, isEmpty, processName, processors, sax,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent***REMOVED*** { for (var key in parent***REMOVED*** { if (__hasProp.call(parent, key***REMOVED******REMOVED*** child[key] = parent[key]; } function ctor(***REMOVED*** { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(***REMOVED***; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me***REMOVED***{ return function(***REMOVED***{ return fn.apply(me, arguments***REMOVED***; }; };

  sax = require('sax'***REMOVED***;

  events = require('events'***REMOVED***;

  builder = require('xmlbuilder'***REMOVED***;

  bom = require('./bom'***REMOVED***;

  processors = require('./processors'***REMOVED***;

  isEmpty = function(thing***REMOVED*** {
    return typeof thing === "object" && (thing != null***REMOVED*** && Object.keys(thing***REMOVED***.length === 0;
***REMOVED***;

  processName = function(processors, processedName***REMOVED*** {
    var process, _i, _len;
    for (_i = 0, _len = processors.length; _i < _len; _i++***REMOVED*** {
      process = processors[_i];
      processedName = process(processedName***REMOVED***;
  ***REMOVED***
    return processedName;
***REMOVED***;

  exports.processors = processors;

  exports.defaults = {
    "0.1": {
      explicitCharkey: false,
      trim: true,
      normalize: true,
      normalizeTags: false,
      attrkey: "@",
      charkey: "#",
      explicitArray: false,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: false,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      childkey: '@@',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      tagNameProcessors: null
  ***REMOVED***,
    "0.2": {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      normalizeTags: false,
      attrkey: "$",
      charkey: "_",
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: true,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      childkey: '$$',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      tagNameProcessors: null,
      rootName: 'root',
      xmldec: {
        'version': '1.0',
        'encoding': 'UTF-8',
        'standalone': true
    ***REMOVED***,
      doctype: null,
      renderOpts: {
        'pretty': true,
        'indent': '  ',
        'newline': '\n'
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

  exports.ValidationError = (function(_super***REMOVED*** {
    __extends(ValidationError, _super***REMOVED***;

    function ValidationError(message***REMOVED*** {
      this.message = message;
  ***REMOVED***

    return ValidationError;

***REMOVED******REMOVED***(Error***REMOVED***;

  exports.Builder = (function(***REMOVED*** {
    function Builder(opts***REMOVED*** {
      var key, value, _ref;
      this.options = {};
      _ref = exports.defaults["0.2"];
      for (key in _ref***REMOVED*** {
        if (!__hasProp.call(_ref, key***REMOVED******REMOVED*** continue;
        value = _ref[key];
        this.options[key] = value;
    ***REMOVED***
      for (key in opts***REMOVED*** {
        if (!__hasProp.call(opts, key***REMOVED******REMOVED*** continue;
        value = opts[key];
        this.options[key] = value;
    ***REMOVED***
  ***REMOVED***

    Builder.prototype.buildObject = function(rootObj***REMOVED*** {
      var attrkey, charkey, render, rootElement, rootName;
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      if ((Object.keys(rootObj***REMOVED***.length === 1***REMOVED*** && (this.options.rootName === exports.defaults['0.2'].rootName***REMOVED******REMOVED*** {
        rootName = Object.keys(rootObj***REMOVED***[0];
        rootObj = rootObj[rootName];
    ***REMOVED*** else {
        rootName = this.options.rootName;
    ***REMOVED***
      render = function(element, obj***REMOVED*** {
        var attr, child, entry, index, key, value, _ref, _ref1;
        if (typeof obj !== 'object'***REMOVED*** {
          element.txt(obj***REMOVED***;
      ***REMOVED*** else {
          for (key in obj***REMOVED*** {
            if (!__hasProp.call(obj, key***REMOVED******REMOVED*** continue;
            child = obj[key];
            if (key === attrkey***REMOVED*** {
              if (typeof child === "object"***REMOVED*** {
                for (attr in child***REMOVED*** {
                  value = child[attr];
                  element = element.att(attr, value***REMOVED***;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else if (key === charkey***REMOVED*** {
              element = element.txt(child***REMOVED***;
          ***REMOVED*** else if (typeof child === 'object' && ((child != null ? child.constructor : void 0***REMOVED*** != null***REMOVED*** && ((child != null ? (_ref = child.constructor***REMOVED*** != null ? _ref.name : void 0 : void 0***REMOVED*** != null***REMOVED*** && (child != null ? (_ref1 = child.constructor***REMOVED*** != null ? _ref1.name : void 0 : void 0***REMOVED*** === 'Array'***REMOVED*** {
              for (index in child***REMOVED*** {
                if (!__hasProp.call(child, index***REMOVED******REMOVED*** continue;
                entry = child[index];
                if (typeof entry === 'string'***REMOVED*** {
                  element = element.ele(key, entry***REMOVED***.up(***REMOVED***;
              ***REMOVED*** else {
                  element = arguments.callee(element.ele(key***REMOVED***, entry***REMOVED***.up(***REMOVED***;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else if (typeof child === "object"***REMOVED*** {
              element = arguments.callee(element.ele(key***REMOVED***, child***REMOVED***.up(***REMOVED***;
          ***REMOVED*** else {
              element = element.ele(key, child.toString(***REMOVED******REMOVED***.up(***REMOVED***;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
        return element;
    ***REMOVED***;
      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype***REMOVED***;
      return render(rootElement, rootObj***REMOVED***.end(this.options.renderOpts***REMOVED***;
  ***REMOVED***;

    return Builder;

***REMOVED******REMOVED***(***REMOVED***;

  exports.Parser = (function(_super***REMOVED*** {
    __extends(Parser, _super***REMOVED***;

    function Parser(opts***REMOVED*** {
      this.parseString = __bind(this.parseString, this***REMOVED***;
      this.reset = __bind(this.reset, this***REMOVED***;
      this.assignOrPush = __bind(this.assignOrPush, this***REMOVED***;
      var key, value, _ref;
      if (!(this instanceof exports.Parser***REMOVED******REMOVED*** {
        return new exports.Parser(opts***REMOVED***;
    ***REMOVED***
      this.options = {};
      _ref = exports.defaults["0.2"];
      for (key in _ref***REMOVED*** {
        if (!__hasProp.call(_ref, key***REMOVED******REMOVED*** continue;
        value = _ref[key];
        this.options[key] = value;
    ***REMOVED***
      for (key in opts***REMOVED*** {
        if (!__hasProp.call(opts, key***REMOVED******REMOVED*** continue;
        value = opts[key];
        this.options[key] = value;
    ***REMOVED***
      if (this.options.xmlns***REMOVED*** {
        this.options.xmlnskey = this.options.attrkey + "ns";
    ***REMOVED***
      if (this.options.normalizeTags***REMOVED*** {
        if (!this.options.tagNameProcessors***REMOVED*** {
          this.options.tagNameProcessors = [];
      ***REMOVED***
        this.options.tagNameProcessors.unshift(processors.normalize***REMOVED***;
    ***REMOVED***
      this.reset(***REMOVED***;
  ***REMOVED***

    Parser.prototype.assignOrPush = function(obj, key, newValue***REMOVED*** {
      if (!(key in obj***REMOVED******REMOVED*** {
        if (!this.options.explicitArray***REMOVED*** {
          return obj[key] = newValue;
      ***REMOVED*** else {
          return obj[key] = [newValue];
      ***REMOVED***
    ***REMOVED*** else {
        if (!(obj[key] instanceof Array***REMOVED******REMOVED*** {
          obj[key] = [obj[key]];
      ***REMOVED***
        return obj[key].push(newValue***REMOVED***;
    ***REMOVED***
  ***REMOVED***;

    Parser.prototype.reset = function(***REMOVED*** {
      var attrkey, charkey, ontext, stack;
      this.removeAllListeners(***REMOVED***;
      this.saxParser = sax.parser(this.options.strict, {
        trim: false,
        normalize: false,
        xmlns: this.options.xmlns
    ***REMOVED******REMOVED***;
      this.saxParser.errThrown = false;
      this.saxParser.onerror = (function(_this***REMOVED*** {
        return function(error***REMOVED*** {
          _this.saxParser.resume(***REMOVED***;
          if (!_this.saxParser.errThrown***REMOVED*** {
            _this.saxParser.errThrown = true;
            return _this.emit("error", error***REMOVED***;
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED******REMOVED***(this***REMOVED***;
      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
      this.resultObject = null;
      stack = [];
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      this.saxParser.onopentag = (function(_this***REMOVED*** {
        return function(node***REMOVED*** {
          var key, newValue, obj, processedKey, _ref;
          obj = {};
          obj[charkey] = "";
          if (!_this.options.ignoreAttrs***REMOVED*** {
            _ref = node.attributes;
            for (key in _ref***REMOVED*** {
              if (!__hasProp.call(_ref, key***REMOVED******REMOVED*** continue;
              if (!(attrkey in obj***REMOVED*** && !_this.options.mergeAttrs***REMOVED*** {
                obj[attrkey] = {};
            ***REMOVED***
              newValue = node.attributes[key];
              processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key***REMOVED*** : key;
              if (_this.options.mergeAttrs***REMOVED*** {
                _this.assignOrPush(obj, processedKey, newValue***REMOVED***;
            ***REMOVED*** else {
                obj[attrkey][processedKey] = newValue;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
          obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name***REMOVED*** : node.name;
          if (_this.options.xmlns***REMOVED*** {
            obj[_this.options.xmlnskey] = {
              uri: node.uri,
              local: node.local
          ***REMOVED***;
        ***REMOVED***
          return stack.push(obj***REMOVED***;
      ***REMOVED***;
    ***REMOVED******REMOVED***(this***REMOVED***;
      this.saxParser.onclosetag = (function(_this***REMOVED*** {
        return function(***REMOVED*** {
          var cdata, emptyStr, err, node, nodeName, obj, old, s, xpath;
          obj = stack.pop(***REMOVED***;
          nodeName = obj["#name"];
          delete obj["#name"];
          cdata = obj.cdata;
          delete obj.cdata;
          s = stack[stack.length - 1];
          if (obj[charkey].match(/^\s*$/***REMOVED*** && !cdata***REMOVED*** {
            emptyStr = obj[charkey];
            delete obj[charkey];
        ***REMOVED*** else {
            if (_this.options.trim***REMOVED*** {
              obj[charkey] = obj[charkey].trim(***REMOVED***;
          ***REMOVED***
            if (_this.options.normalize***REMOVED*** {
              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " "***REMOVED***.trim(***REMOVED***;
          ***REMOVED***
            if (Object.keys(obj***REMOVED***.length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY***REMOVED*** {
              obj = obj[charkey];
          ***REMOVED***
        ***REMOVED***
          if (isEmpty(obj***REMOVED******REMOVED*** {
            obj = _this.options.emptyTag !== void 0 ? _this.options.emptyTag : emptyStr;
        ***REMOVED***
          if (_this.options.validator != null***REMOVED*** {
            xpath = "/" + ((function(***REMOVED*** {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = stack.length; _i < _len; _i++***REMOVED*** {
                node = stack[_i];
                _results.push(node["#name"]***REMOVED***;
            ***REMOVED***
              return _results;
          ***REMOVED******REMOVED***(***REMOVED******REMOVED***.concat(nodeName***REMOVED***.join("/"***REMOVED***;
            try {
              obj = _this.options.validator(xpath, s && s[nodeName], obj***REMOVED***;
          ***REMOVED*** catch (_error***REMOVED*** {
              err = _error;
              _this.emit("error", err***REMOVED***;
          ***REMOVED***
        ***REMOVED***
          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object'***REMOVED*** {
            node = {};
            if (_this.options.attrkey in obj***REMOVED*** {
              node[_this.options.attrkey] = obj[_this.options.attrkey];
              delete obj[_this.options.attrkey];
          ***REMOVED***
            if (!_this.options.charsAsChildren && _this.options.charkey in obj***REMOVED*** {
              node[_this.options.charkey] = obj[_this.options.charkey];
              delete obj[_this.options.charkey];
          ***REMOVED***
            if (Object.getOwnPropertyNames(obj***REMOVED***.length > 0***REMOVED*** {
              node[_this.options.childkey] = obj;
          ***REMOVED***
            obj = node;
        ***REMOVED***
          if (stack.length > 0***REMOVED*** {
            return _this.assignOrPush(s, nodeName, obj***REMOVED***;
        ***REMOVED*** else {
            if (_this.options.explicitRoot***REMOVED*** {
              old = obj;
              obj = {};
              obj[nodeName] = old;
          ***REMOVED***
            _this.resultObject = obj;
            return _this.emit("end", _this.resultObject***REMOVED***;
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED******REMOVED***(this***REMOVED***;
      ontext = (function(_this***REMOVED*** {
        return function(text***REMOVED*** {
          var s;
          s = stack[stack.length - 1];
          if (s***REMOVED*** {
            s[charkey] += text;
            return s;
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED******REMOVED***(this***REMOVED***;
      this.saxParser.ontext = ontext;
      return this.saxParser.oncdata = (function(_this***REMOVED*** {
        return function(text***REMOVED*** {
          var s;
          s = ontext(text***REMOVED***;
          if (s***REMOVED*** {
            return s.cdata = true;
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED******REMOVED***(this***REMOVED***;
  ***REMOVED***;

    Parser.prototype.parseString = function(str, cb***REMOVED*** {
      var err;
      if ((cb != null***REMOVED*** && typeof cb === "function"***REMOVED*** {
        this.on("end", function(result***REMOVED*** {
          this.reset(***REMOVED***;
          if (this.options.async***REMOVED*** {
            return process.nextTick(function(***REMOVED*** {
              return cb(null, result***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED*** else {
            return cb(null, result***REMOVED***;
        ***REMOVED***
      ***REMOVED******REMOVED***;
        this.on("error", function(err***REMOVED*** {
          this.reset(***REMOVED***;
          if (this.options.async***REMOVED*** {
            return process.nextTick(function(***REMOVED*** {
              return cb(err***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED*** else {
            return cb(err***REMOVED***;
        ***REMOVED***
      ***REMOVED******REMOVED***;
    ***REMOVED***
      if (str.toString(***REMOVED***.trim(***REMOVED*** === ''***REMOVED*** {
        this.emit("end", null***REMOVED***;
        return true;
    ***REMOVED***
      try {
        return this.saxParser.write(bom.stripBOM(str.toString(***REMOVED******REMOVED******REMOVED***.close(***REMOVED***;
    ***REMOVED*** catch (_error***REMOVED*** {
        err = _error;
        if (!this.saxParser.errThrown***REMOVED*** {
          this.emit('error', err***REMOVED***;
          return this.saxParser.errThrown = true;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

    return Parser;

***REMOVED******REMOVED***(events.EventEmitter***REMOVED***;

  exports.parseString = function(str, a, b***REMOVED*** {
    var cb, options, parser;
    if (b != null***REMOVED*** {
      if (typeof b === 'function'***REMOVED*** {
        cb = b;
    ***REMOVED***
      if (typeof a === 'object'***REMOVED*** {
        options = a;
    ***REMOVED***
  ***REMOVED*** else {
      if (typeof a === 'function'***REMOVED*** {
        cb = a;
    ***REMOVED***
      options = {};
  ***REMOVED***
    parser = new exports.Parser(options***REMOVED***;
    return parser.parseString(str, cb***REMOVED***;
***REMOVED***;

}***REMOVED***.call(this***REMOVED***;
