var globalsBefore = JSON.stringify(Object.keys(global***REMOVED******REMOVED***
  , util = require("util"***REMOVED***
  , assert = require("assert"***REMOVED***
  , fs = require("fs"***REMOVED***
  , path = require("path"***REMOVED***
  , sax = require("../lib/sax"***REMOVED***

exports.sax = sax

// handy way to do simple unit tests
// if the options contains an xml string, it'll be written and the parser closed.
// otherwise, it's assumed that the test will write and close.
exports.test = function test (options***REMOVED*** {
  var xml = options.xml
    , parser = sax.parser(options.strict, options.opt***REMOVED***
    , expect = options.expect
    , e = 0
  sax.EVENTS.forEach(function (ev***REMOVED*** {
    parser["on" + ev] = function (n***REMOVED*** {
      if (process.env.DEBUG***REMOVED*** {
        console.error({ expect: expect[e]
                      , actual: [ev, n] }***REMOVED***
    ***REMOVED***
      if (e >= expect.length && (ev === "end" || ev === "ready"***REMOVED******REMOVED*** return
      assert.ok( e < expect.length,
        "expectation #"+e+" "+util.inspect(expect[e]***REMOVED***+"\n"+
        "Unexpected event: "+ev+" "+(n ? util.inspect(n***REMOVED*** : ""***REMOVED******REMOVED***
      var inspected = n instanceof Error ? "\n"+ n.message : util.inspect(n***REMOVED***
      assert.equal(ev, expect[e][0],
        "expectation #"+e+"\n"+
        "Didn't get expected event\n"+
        "expect: "+expect[e][0] + " " +util.inspect(expect[e][1]***REMOVED***+"\n"+
        "actual: "+ev+" "+inspected+"\n"***REMOVED***
      if (ev === "error"***REMOVED*** assert.equal(n.message, expect[e][1]***REMOVED***
      else assert.deepEqual(n, expect[e][1],
        "expectation #"+e+"\n"+
        "Didn't get expected argument\n"+
        "expect: "+expect[e][0] + " " +util.inspect(expect[e][1]***REMOVED***+"\n"+
        "actual: "+ev+" "+inspected+"\n"***REMOVED***
      e++
      if (ev === "error"***REMOVED*** parser.resume(***REMOVED***
  ***REMOVED***
***REMOVED******REMOVED***
  if (xml***REMOVED*** parser.write(xml***REMOVED***.close(***REMOVED***
  return parser
}

if (module === require.main***REMOVED*** {
  var running = true
    , failures = 0

  function fail (file, er***REMOVED*** {
    util.error("Failed: "+file***REMOVED***
    util.error(er.stack || er.message***REMOVED***
    failures ++
***REMOVED***

  fs.readdir(__dirname, function (error, files***REMOVED*** {
    files = files.filter(function (file***REMOVED*** {
      return (/\.js$/.exec(file***REMOVED*** && file !== 'index.js'***REMOVED***
  ***REMOVED******REMOVED***
    var n = files.length
      , i = 0
    console.log("0.." + n***REMOVED***
    files.forEach(function (file***REMOVED*** {
      // run this test.
      try {
        require(path.resolve(__dirname, file***REMOVED******REMOVED***
        var globalsAfter = JSON.stringify(Object.keys(global***REMOVED******REMOVED***
        if (globalsAfter !== globalsBefore***REMOVED*** {
          var er = new Error("new globals introduced\n"+
                             "expected: "+globalsBefore+"\n"+
                             "actual:   "+globalsAfter***REMOVED***
          globalsBefore = globalsAfter
          throw er
      ***REMOVED***
        console.log("ok " + (++i***REMOVED*** + " - " + file***REMOVED***
    ***REMOVED*** catch (er***REMOVED*** {
        console.log("not ok "+ (++i***REMOVED*** + " - " + file***REMOVED***
        fail(file, er***REMOVED***
    ***REMOVED***
  ***REMOVED******REMOVED***
    if (!failures***REMOVED*** return console.log("#all pass"***REMOVED***
    else return console.error(failures + " failure" + (failures > 1 ? "s" : ""***REMOVED******REMOVED***
***REMOVED******REMOVED***
}
