/**
 * Lo-Dash 2.4.1 (Custom Build***REMOVED*** <http://lodash.com/>
 * Build: `lodash modularize exports="node" -o ./compat/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isFunction = require('../objects/isFunction'***REMOVED***;

/**
 * Creates a function that is the composition of the provided functions,
 * where each function consumes the return value of the function that follows.
 * For example, composing the functions `f(***REMOVED***`, `g(***REMOVED***`, and `h(***REMOVED***` produces `f(g(h(***REMOVED******REMOVED******REMOVED***`.
 * Each function is executed with the `this` binding of the composed function.
 *
 * @static
 * @memberOf _
 * @category Functions
 * @param {...Function} [func] Functions to compose.
 * @returns {Function} Returns the new composed function.
 * @example
 *
 * var realNameMap = {
 *   'pebbles': 'penelope'
 * };
 *
 * var format = function(name***REMOVED*** {
 *   name = realNameMap[name.toLowerCase(***REMOVED***] || name;
 *   return name.charAt(0***REMOVED***.toUpperCase(***REMOVED*** + name.slice(1***REMOVED***.toLowerCase(***REMOVED***;
 * };
 *
 * var greet = function(formatted***REMOVED*** {
 *   return 'Hiya ' + formatted + '!';
 * };
 *
 * var welcome = _.compose(greet, format***REMOVED***;
 * welcome('pebbles'***REMOVED***;
 * // => 'Hiya Penelope!'
 */
function compose(***REMOVED*** {
  var funcs = arguments,
      length = funcs.length;

  while (length--***REMOVED*** {
    if (!isFunction(funcs[length]***REMOVED******REMOVED*** {
      throw new TypeError;
  ***REMOVED***
***REMOVED***
  return function(***REMOVED*** {
    var args = arguments,
        length = funcs.length;

    while (length--***REMOVED*** {
      args = [funcs[length].apply(this, args***REMOVED***];
  ***REMOVED***
    return args[0];
***REMOVED***;
}

module.exports = compose;
