/**
 * Lo-Dash 2.4.1 (Custom Build***REMOVED*** <http://lodash.com/>
 * Build: `lodash modularize exports="node" -o ./compat/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var baseCreateCallback = require('../internals/baseCreateCallback'***REMOVED***;

/**
 * Executes the callback `n` times, returning an array of the results
 * of each callback execution. The callback is bound to `thisArg` and invoked
 * with one argument; (index***REMOVED***.
 *
 * @static
 * @memberOf _
 * @category Utilities
 * @param {number} n The number of times to execute the callback.
 * @param {Function} callback The function called per iteration.
 * @param {*} [thisArg] The `this` binding of `callback`.
 * @returns {Array} Returns an array of the results of each `callback` execution.
 * @example
 *
 * var diceRolls = _.times(3, _.partial(_.random, 1, 6***REMOVED******REMOVED***;
 * // => [3, 6, 4]
 *
 * _.times(3, function(n***REMOVED*** { mage.castSpell(n***REMOVED***; }***REMOVED***;
 * // => calls `mage.castSpell(n***REMOVED***` three times, passing `n` of `0`, `1`, and `2` respectively
 *
 * _.times(3, function(n***REMOVED*** { this.cast(n***REMOVED***; }, mage***REMOVED***;
 * // => also calls `mage.castSpell(n***REMOVED***` three times
 */
function times(n, callback, thisArg***REMOVED*** {
  n = (n = +n***REMOVED*** > -1 ? n : 0;
  var index = -1,
      result = Array(n***REMOVED***;

  callback = baseCreateCallback(callback, thisArg, 1***REMOVED***;
  while (++index < n***REMOVED*** {
    result[index] = callback(index***REMOVED***;
***REMOVED***
  return result;
}

module.exports = times;
