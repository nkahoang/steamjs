/**
 * Lo-Dash 2.4.1 (Custom Build***REMOVED*** <http://lodash.com/>
 * Build: `lodash modularize exports="node" -o ./compat/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var baseEach = require('./baseEach'***REMOVED***,
    createCallback = require('../functions/createCallback'***REMOVED***,
    isArray = require('../objects/isArray'***REMOVED***;

/**
 * Creates a function that aggregates a collection, creating an object composed
 * of keys generated from the results of running each element of the collection
 * through a callback. The given `setter` function sets the keys and values
 * of the composed object.
 *
 * @private
 * @param {Function} setter The setter function.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter***REMOVED*** {
  return function(collection, callback, thisArg***REMOVED*** {
    var result = {};
    callback = createCallback(callback, thisArg, 3***REMOVED***;

    if (isArray(collection***REMOVED******REMOVED*** {
      var index = -1,
          length = collection.length;

      while (++index < length***REMOVED*** {
        var value = collection[index];
        setter(result, value, callback(value, index, collection***REMOVED***, collection***REMOVED***;
    ***REMOVED***
  ***REMOVED*** else {
      baseEach(collection, function(value, key, collection***REMOVED*** {
        setter(result, value, callback(value, key, collection***REMOVED***, collection***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***
    return result;
***REMOVED***;
}

module.exports = createAggregator;
