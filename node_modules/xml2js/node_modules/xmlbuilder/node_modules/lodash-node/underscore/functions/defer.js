/**
 * Lo-Dash 2.4.1 (Custom Build***REMOVED*** <http://lodash.com/>
 * Build: `lodash modularize underscore exports="node" -o ./underscore/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isFunction = require('../objects/isFunction'***REMOVED***,
    slice = require('../internals/slice'***REMOVED***;

/**
 * Defers executing the `func` function until the current call stack has cleared.
 * Additional arguments will be provided to `func` when it is invoked.
 *
 * @static
 * @memberOf _
 * @category Functions
 * @param {Function} func The function to defer.
 * @param {...*} [arg] Arguments to invoke the function with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.defer(function(text***REMOVED*** { console.log(text***REMOVED***; }, 'deferred'***REMOVED***;
 * // logs 'deferred' after one or more milliseconds
 */
function defer(func***REMOVED*** {
  if (!isFunction(func***REMOVED******REMOVED*** {
    throw new TypeError;
***REMOVED***
  var args = slice(arguments, 1***REMOVED***;
  return setTimeout(function(***REMOVED*** { func.apply(undefined, args***REMOVED***; }, 1***REMOVED***;
}

module.exports = defer;
