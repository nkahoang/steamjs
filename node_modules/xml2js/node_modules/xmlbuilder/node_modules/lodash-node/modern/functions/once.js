/**
 * Lo-Dash 2.4.1 (Custom Build***REMOVED*** <http://lodash.com/>
 * Build: `lodash modularize modern exports="node" -o ./modern/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isFunction = require('../objects/isFunction'***REMOVED***;

/**
 * Creates a function that is restricted to execute `func` once. Repeat calls to
 * the function will return the value of the first call. The `func` is executed
 * with the `this` binding of the created function.
 *
 * @static
 * @memberOf _
 * @category Functions
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication***REMOVED***;
 * initialize(***REMOVED***;
 * initialize(***REMOVED***;
 * // `initialize` executes `createApplication` once
 */
function once(func***REMOVED*** {
  var ran,
      result;

  if (!isFunction(func***REMOVED******REMOVED*** {
    throw new TypeError;
***REMOVED***
  return function(***REMOVED*** {
    if (ran***REMOVED*** {
      return result;
  ***REMOVED***
    ran = true;
    result = func.apply(this, arguments***REMOVED***;

    // clear the `func` variable so the function may be garbage collected
    func = null;
    return result;
***REMOVED***;
}

module.exports = once;
