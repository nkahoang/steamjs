// Generated by CoffeeScript 1.6.3
(function(***REMOVED*** {
  var XMLDocType, _;

  _ = require('lodash-node'***REMOVED***;

  module.exports = XMLDocType = (function(***REMOVED*** {
    function XMLDocType(parent, pubID, sysID***REMOVED*** {
      var _ref, _ref1;
      this.documentObject = parent;
      this.stringify = this.documentObject.stringify;
      this.children = [];
      if (_.isObject(pubID***REMOVED******REMOVED*** {
        _ref = pubID, pubID = _ref.pubID, sysID = _ref.sysID;
    ***REMOVED***
      if (sysID == null***REMOVED*** {
        _ref1 = [pubID, sysID], sysID = _ref1[0], pubID = _ref1[1];
    ***REMOVED***
      if (pubID != null***REMOVED*** {
        this.pubID = this.stringify.dtdPubID(pubID***REMOVED***;
    ***REMOVED***
      if (sysID != null***REMOVED*** {
        this.sysID = this.stringify.dtdSysID(sysID***REMOVED***;
    ***REMOVED***
  ***REMOVED***

    XMLDocType.prototype.clone = function(***REMOVED*** {
      return _.create(XMLDocType.prototype, this***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.element = function(name, value***REMOVED*** {
      var XMLDTDElement, child;
      XMLDTDElement = require('./XMLDTDElement'***REMOVED***;
      child = new XMLDTDElement(this, name, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue***REMOVED*** {
      var XMLDTDAttList, child;
      XMLDTDAttList = require('./XMLDTDAttList'***REMOVED***;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.entity = function(name, value***REMOVED*** {
      var XMLDTDEntity, child;
      XMLDTDEntity = require('./XMLDTDEntity'***REMOVED***;
      child = new XMLDTDEntity(this, false, name, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.pEntity = function(name, value***REMOVED*** {
      var XMLDTDEntity, child;
      XMLDTDEntity = require('./XMLDTDEntity'***REMOVED***;
      child = new XMLDTDEntity(this, true, name, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.notation = function(name, value***REMOVED*** {
      var XMLDTDNotation, child;
      XMLDTDNotation = require('./XMLDTDNotation'***REMOVED***;
      child = new XMLDTDNotation(this, name, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.cdata = function(value***REMOVED*** {
      var XMLCData, child;
      XMLCData = require('./XMLCData'***REMOVED***;
      child = new XMLCData(this, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.comment = function(value***REMOVED*** {
      var XMLComment, child;
      XMLComment = require('./XMLComment'***REMOVED***;
      child = new XMLComment(this, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.instruction = function(target, value***REMOVED*** {
      var XMLProcessingInstruction, child;
      XMLProcessingInstruction = require('./XMLProcessingInstruction'***REMOVED***;
      child = new XMLProcessingInstruction(this, target, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLDocType.prototype.root = function(***REMOVED*** {
      return this.documentObject.root(***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.document = function(***REMOVED*** {
      return this.documentObject;
  ***REMOVED***;

    XMLDocType.prototype.toString = function(options, level***REMOVED*** {
      var child, indent, newline, pretty, r, space, _i, _len, _ref;
      pretty = (options != null ? options.pretty : void 0***REMOVED*** || false;
      indent = (options != null ? options.indent : void 0***REMOVED*** || '  ';
      newline = (options != null ? options.newline : void 0***REMOVED*** || '\n';
      level || (level = 0***REMOVED***;
      space = new Array(level + 1***REMOVED***.join(indent***REMOVED***;
      r = '';
      if (pretty***REMOVED*** {
        r += space;
    ***REMOVED***
      r += '<!DOCTYPE ' + this.root(***REMOVED***.name;
      if (this.pubID && this.sysID***REMOVED*** {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
    ***REMOVED*** else if (this.sysID***REMOVED*** {
        r += ' SYSTEM "' + this.sysID + '"';
    ***REMOVED***
      if (this.children.length > 0***REMOVED*** {
        r += ' [';
        if (pretty***REMOVED*** {
          r += newline;
      ***REMOVED***
        _ref = this.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++***REMOVED*** {
          child = _ref[_i];
          r += child.toString(options, level + 1***REMOVED***;
      ***REMOVED***
        r += ']';
    ***REMOVED***
      r += '>';
      if (pretty***REMOVED*** {
        r += newline;
    ***REMOVED***
      return r;
  ***REMOVED***;

    XMLDocType.prototype.ele = function(name, value***REMOVED*** {
      return this.element(name, value***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue***REMOVED*** {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.ent = function(name, value***REMOVED*** {
      return this.entity(name, value***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.pent = function(name, value***REMOVED*** {
      return this.pEntity(name, value***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.not = function(name, value***REMOVED*** {
      return this.notation(name, value***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.dat = function(value***REMOVED*** {
      return this.cdata(value***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.com = function(value***REMOVED*** {
      return this.comment(value***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.ins = function(target, value***REMOVED*** {
      return this.instruction(target, value***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.up = function(***REMOVED*** {
      return this.root(***REMOVED***;
  ***REMOVED***;

    XMLDocType.prototype.doc = function(***REMOVED*** {
      return this.document(***REMOVED***;
  ***REMOVED***;

    return XMLDocType;

***REMOVED******REMOVED***(***REMOVED***;

}***REMOVED***.call(this***REMOVED***;
