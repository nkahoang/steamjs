// Generated by CoffeeScript 1.6.3
(function(***REMOVED*** {
  var XMLStringifier,
    __bind = function(fn, me***REMOVED***{ return function(***REMOVED***{ return fn.apply(me, arguments***REMOVED***; }; },
    __hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function(***REMOVED*** {
    function XMLStringifier(options***REMOVED*** {
      this.assertLegalChar = __bind(this.assertLegalChar, this***REMOVED***;
      var key, value, _ref;
      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
      _ref = (options != null ? options.stringify : void 0***REMOVED*** || {};
      for (key in _ref***REMOVED*** {
        if (!__hasProp.call(_ref, key***REMOVED******REMOVED*** continue;
        value = _ref[key];
        this[key] = value;
    ***REMOVED***
  ***REMOVED***

    XMLStringifier.prototype.eleName = function(val***REMOVED*** {
      val = '' + val || '';
      return this.assertLegalChar(val***REMOVED***;
  ***REMOVED***;

    XMLStringifier.prototype.eleText = function(val***REMOVED*** {
      val = '' + val || '';
      return this.assertLegalChar(this.escape(val***REMOVED******REMOVED***;
  ***REMOVED***;

    XMLStringifier.prototype.cdata = function(val***REMOVED*** {
      val = '' + val || '';
      if (val.match(/]]>/***REMOVED******REMOVED*** {
        throw new Error("Invalid CDATA text: " + val***REMOVED***;
    ***REMOVED***
      return this.assertLegalChar(val***REMOVED***;
  ***REMOVED***;

    XMLStringifier.prototype.comment = function(val***REMOVED*** {
      val = '' + val || '';
      if (val.match(/--/***REMOVED******REMOVED*** {
        throw new Error("Comment text cannot contain double-hypen: " + val***REMOVED***;
    ***REMOVED***
      return this.assertLegalChar(this.escape(val***REMOVED******REMOVED***;
  ***REMOVED***;

    XMLStringifier.prototype.raw = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.attName = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.attValue = function(val***REMOVED*** {
      val = '' + val || '';
      return this.escape(val***REMOVED***;
  ***REMOVED***;

    XMLStringifier.prototype.insTarget = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.insValue = function(val***REMOVED*** {
      val = '' + val || '';
      if (val.match(/\?>/***REMOVED******REMOVED*** {
        throw new Error("Invalid processing instruction value: " + val***REMOVED***;
    ***REMOVED***
      return val;
  ***REMOVED***;

    XMLStringifier.prototype.xmlVersion = function(val***REMOVED*** {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/***REMOVED******REMOVED*** {
        throw new Error("Invalid version number: " + val***REMOVED***;
    ***REMOVED***
      return val;
  ***REMOVED***;

    XMLStringifier.prototype.xmlEncoding = function(val***REMOVED*** {
      val = '' + val || '';
      if (!val.match(/[A-Za-z](?:[A-Za-z0-9._-]|-***REMOVED****/***REMOVED******REMOVED*** {
        throw new Error("Invalid encoding: " + options.val***REMOVED***;
    ***REMOVED***
      return val;
  ***REMOVED***;

    XMLStringifier.prototype.xmlStandalone = function(val***REMOVED*** {
      if (val***REMOVED*** {
        return "yes";
    ***REMOVED*** else {
        return "no";
    ***REMOVED***
  ***REMOVED***;

    XMLStringifier.prototype.dtdPubID = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.dtdSysID = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.dtdElementValue = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.dtdAttType = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.dtdAttDefault = function(val***REMOVED*** {
      if (val != null***REMOVED*** {
        return '' + val || '';
    ***REMOVED*** else {
        return val;
    ***REMOVED***
  ***REMOVED***;

    XMLStringifier.prototype.dtdEntityValue = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.dtdNData = function(val***REMOVED*** {
      return '' + val || '';
  ***REMOVED***;

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.convertListKey = '#list';

    XMLStringifier.prototype.assertLegalChar = function(str***REMOVED*** {
      var chars, chr;
      if (this.allowSurrogateChars***REMOVED*** {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
    ***REMOVED*** else {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
    ***REMOVED***
      chr = str.match(chars***REMOVED***;
      if (chr***REMOVED*** {
        throw new Error("Invalid character (" + chr + "***REMOVED*** in string: " + str + " at index " + chr.index***REMOVED***;
    ***REMOVED***
      return str;
  ***REMOVED***;

    XMLStringifier.prototype.escape = function(str***REMOVED*** {
      return str.replace(/&/g, '&amp;'***REMOVED***.replace(/</g, '&lt;'***REMOVED***.replace(/>/g, '&gt;'***REMOVED***.replace(/'/g, '&apos;'***REMOVED***.replace(/"/g, '&quot;'***REMOVED***;
  ***REMOVED***;

    return XMLStringifier;

***REMOVED******REMOVED***(***REMOVED***;

}***REMOVED***.call(this***REMOVED***;
