// Generated by CoffeeScript 1.6.3
(function(***REMOVED*** {
  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier, _;

  _ = require('lodash-node'***REMOVED***;

  XMLStringifier = require('./XMLStringifier'***REMOVED***;

  XMLDeclaration = require('./XMLDeclaration'***REMOVED***;

  XMLDocType = require('./XMLDocType'***REMOVED***;

  XMLElement = require('./XMLElement'***REMOVED***;

  module.exports = XMLBuilder = (function(***REMOVED*** {
    function XMLBuilder(name, options***REMOVED*** {
      var root, temp;
      if (name == null***REMOVED*** {
        throw new Error("Root element needs a name"***REMOVED***;
    ***REMOVED***
      if (options == null***REMOVED*** {
        options = {};
    ***REMOVED***
      this.options = options;
      this.stringify = new XMLStringifier(options***REMOVED***;
      temp = new XMLElement(this, 'doc'***REMOVED***;
      root = temp.element(name***REMOVED***;
      root.isRoot = true;
      root.documentObject = this;
      this.rootObject = root;
      if (!options.headless***REMOVED*** {
        root.declaration(options***REMOVED***;
        if ((options.pubID != null***REMOVED*** || (options.sysID != null***REMOVED******REMOVED*** {
          root.doctype(options***REMOVED***;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

    XMLBuilder.prototype.root = function(***REMOVED*** {
      return this.rootObject;
  ***REMOVED***;

    XMLBuilder.prototype.end = function(options***REMOVED*** {
      return toString(options***REMOVED***;
  ***REMOVED***;

    XMLBuilder.prototype.toString = function(options***REMOVED*** {
      var indent, newline, pretty, r;
      pretty = (options != null ? options.pretty : void 0***REMOVED*** || false;
      indent = (options != null ? options.indent : void 0***REMOVED*** || '  ';
      newline = (options != null ? options.newline : void 0***REMOVED*** || '\n';
      r = '';
      if (this.xmldec != null***REMOVED*** {
        r += this.xmldec.toString(options***REMOVED***;
    ***REMOVED***
      if (this.doctype != null***REMOVED*** {
        r += this.doctype.toString(options***REMOVED***;
    ***REMOVED***
      r += this.rootObject.toString(options***REMOVED***;
      if (pretty && r.slice(-newline.length***REMOVED*** === newline***REMOVED*** {
        r = r.slice(0, -newline.length***REMOVED***;
    ***REMOVED***
      return r;
  ***REMOVED***;

    return XMLBuilder;

***REMOVED******REMOVED***(***REMOVED***;

}***REMOVED***.call(this***REMOVED***;
