// Generated by CoffeeScript 1.6.3
(function(***REMOVED*** {
  var XMLNode, _,
    __hasProp = {}.hasOwnProperty;

  _ = require('lodash-node'***REMOVED***;

  module.exports = XMLNode = (function(***REMOVED*** {
    function XMLNode(parent***REMOVED*** {
      this.parent = parent;
      this.options = this.parent.options;
      this.stringify = this.parent.stringify;
  ***REMOVED***

    XMLNode.prototype.clone = function(***REMOVED*** {
      throw new Error("Cannot clone generic XMLNode"***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.element = function(name, attributes, text***REMOVED*** {
      var item, key, lastChild, val, _i, _len, _ref;
      lastChild = null;
      if (attributes == null***REMOVED*** {
        attributes = {};
    ***REMOVED***
      if (!_.isObject(attributes***REMOVED******REMOVED*** {
        _ref = [attributes, text], text = _ref[0], attributes = _ref[1];
    ***REMOVED***
      if (_.isArray(name***REMOVED******REMOVED*** {
        for (_i = 0, _len = name.length; _i < _len; _i++***REMOVED*** {
          item = name[_i];
          lastChild = this.element(item***REMOVED***;
      ***REMOVED***
    ***REMOVED*** else if (_.isFunction(name***REMOVED******REMOVED*** {
        lastChild = this.element(name.apply(***REMOVED******REMOVED***;
    ***REMOVED*** else if (_.isObject(name***REMOVED******REMOVED*** {
        for (key in name***REMOVED*** {
          if (!__hasProp.call(name, key***REMOVED******REMOVED*** continue;
          val = name[key];
          if (!(val != null***REMOVED******REMOVED*** {
            continue;
        ***REMOVED***
          if (_.isFunction(val***REMOVED******REMOVED*** {
            val = val.apply(***REMOVED***;
        ***REMOVED***
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey***REMOVED*** === 0***REMOVED*** {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length***REMOVED***, val***REMOVED***;
        ***REMOVED*** else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey***REMOVED*** === 0***REMOVED*** {
            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length***REMOVED***, val***REMOVED***;
        ***REMOVED*** else if (_.isObject(val***REMOVED******REMOVED*** {
            if (!this.options.ignoreDecorators && this.stringify.convertListKey && key.indexOf(this.stringify.convertListKey***REMOVED*** === 0 && _.isArray(val***REMOVED******REMOVED*** {
              lastChild = this.element(val***REMOVED***;
          ***REMOVED*** else {
              lastChild = this.element(key***REMOVED***;
              lastChild.element(val***REMOVED***;
          ***REMOVED***
        ***REMOVED*** else {
            lastChild = this.element(key, val***REMOVED***;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED*** else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey***REMOVED*** === 0***REMOVED*** {
          lastChild = this.text(text***REMOVED***;
      ***REMOVED*** else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey***REMOVED*** === 0***REMOVED*** {
          lastChild = this.cdata(text***REMOVED***;
      ***REMOVED*** else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey***REMOVED*** === 0***REMOVED*** {
          lastChild = this.comment(text***REMOVED***;
      ***REMOVED*** else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey***REMOVED*** === 0***REMOVED*** {
          lastChild = this.raw(text***REMOVED***;
      ***REMOVED*** else {
          lastChild = this.node(name, attributes, text***REMOVED***;
      ***REMOVED***
    ***REMOVED***
      if (lastChild == null***REMOVED*** {
        throw new Error("Could not create any elements with: " + name***REMOVED***;
    ***REMOVED***
      return lastChild;
  ***REMOVED***;

    XMLNode.prototype.insertBefore = function(name, attributes, text***REMOVED*** {
      var child, i, removed;
      if (this.isRoot***REMOVED*** {
        throw new Error("Cannot insert elements at root level"***REMOVED***;
    ***REMOVED***
      i = this.parent.children.indexOf(this***REMOVED***;
      removed = this.parent.children.splice(i***REMOVED***;
      child = this.parent.element(name, attributes, text***REMOVED***;
      Array.prototype.push.apply(this.parent.children, removed***REMOVED***;
      return child;
  ***REMOVED***;

    XMLNode.prototype.insertAfter = function(name, attributes, text***REMOVED*** {
      var child, i, removed;
      if (this.isRoot***REMOVED*** {
        throw new Error("Cannot insert elements at root level"***REMOVED***;
    ***REMOVED***
      i = this.parent.children.indexOf(this***REMOVED***;
      removed = this.parent.children.splice(i + 1***REMOVED***;
      child = this.parent.element(name, attributes, text***REMOVED***;
      Array.prototype.push.apply(this.parent.children, removed***REMOVED***;
      return child;
  ***REMOVED***;

    XMLNode.prototype.remove = function(***REMOVED*** {
      var i, _ref;
      if (this.isRoot***REMOVED*** {
        throw new Error("Cannot remove the root element"***REMOVED***;
    ***REMOVED***
      i = this.parent.children.indexOf(this***REMOVED***;
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(_ref = []***REMOVED******REMOVED***, _ref;
      return this.parent;
  ***REMOVED***;

    XMLNode.prototype.node = function(name, attributes, text***REMOVED*** {
      var XMLElement, child, _ref;
      if (attributes == null***REMOVED*** {
        attributes = {};
    ***REMOVED***
      if (!_.isObject(attributes***REMOVED******REMOVED*** {
        _ref = [attributes, text], text = _ref[0], attributes = _ref[1];
    ***REMOVED***
      XMLElement = require('./XMLElement'***REMOVED***;
      child = new XMLElement(this, name, attributes***REMOVED***;
      if (text != null***REMOVED*** {
        child.text(text***REMOVED***;
    ***REMOVED***
      this.children.push(child***REMOVED***;
      return child;
  ***REMOVED***;

    XMLNode.prototype.text = function(value***REMOVED*** {
      var XMLText, child;
      XMLText = require('./XMLText'***REMOVED***;
      child = new XMLText(this, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLNode.prototype.cdata = function(value***REMOVED*** {
      var XMLCData, child;
      XMLCData = require('./XMLCData'***REMOVED***;
      child = new XMLCData(this, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLNode.prototype.comment = function(value***REMOVED*** {
      var XMLComment, child;
      XMLComment = require('./XMLComment'***REMOVED***;
      child = new XMLComment(this, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLNode.prototype.raw = function(value***REMOVED*** {
      var XMLRaw, child;
      XMLRaw = require('./XMLRaw'***REMOVED***;
      child = new XMLRaw(this, value***REMOVED***;
      this.children.push(child***REMOVED***;
      return this;
  ***REMOVED***;

    XMLNode.prototype.declaration = function(version, encoding, standalone***REMOVED*** {
      var XMLDeclaration, doc, xmldec;
      doc = this.document(***REMOVED***;
      XMLDeclaration = require('./XMLDeclaration'***REMOVED***;
      xmldec = new XMLDeclaration(doc, version, encoding, standalone***REMOVED***;
      doc.xmldec = xmldec;
      return doc.root(***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.doctype = function(pubID, sysID***REMOVED*** {
      var XMLDocType, doc, doctype;
      doc = this.document(***REMOVED***;
      XMLDocType = require('./XMLDocType'***REMOVED***;
      doctype = new XMLDocType(doc, pubID, sysID***REMOVED***;
      doc.doctype = doctype;
      return doctype;
  ***REMOVED***;

    XMLNode.prototype.up = function(***REMOVED*** {
      if (this.isRoot***REMOVED*** {
        throw new Error("The root node has no parent. Use doc(***REMOVED*** if you need to get the document object."***REMOVED***;
    ***REMOVED***
      return this.parent;
  ***REMOVED***;

    XMLNode.prototype.root = function(***REMOVED*** {
      var child;
      if (this.isRoot***REMOVED*** {
        return this;
    ***REMOVED***
      child = this.parent;
      while (!child.isRoot***REMOVED*** {
        child = child.parent;
    ***REMOVED***
      return child;
  ***REMOVED***;

    XMLNode.prototype.document = function(***REMOVED*** {
      return this.root(***REMOVED***.documentObject;
  ***REMOVED***;

    XMLNode.prototype.end = function(options***REMOVED*** {
      return this.document(***REMOVED***.toString(options***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.prev = function(***REMOVED*** {
      var i;
      if (this.isRoot***REMOVED*** {
        throw new Error("Root node has no siblings"***REMOVED***;
    ***REMOVED***
      i = this.parent.children.indexOf(this***REMOVED***;
      if (i < 1***REMOVED*** {
        throw new Error("Already at the first node"***REMOVED***;
    ***REMOVED***
      return this.parent.children[i - 1];
  ***REMOVED***;

    XMLNode.prototype.next = function(***REMOVED*** {
      var i;
      if (this.isRoot***REMOVED*** {
        throw new Error("Root node has no siblings"***REMOVED***;
    ***REMOVED***
      i = this.parent.children.indexOf(this***REMOVED***;
      if (i === -1 || i === this.parent.children.length - 1***REMOVED*** {
        throw new Error("Already at the last node"***REMOVED***;
    ***REMOVED***
      return this.parent.children[i + 1];
  ***REMOVED***;

    XMLNode.prototype.importXMLBuilder = function(xmlbuilder***REMOVED*** {
      var clonedRoot;
      clonedRoot = xmlbuilder.root(***REMOVED***.clone(***REMOVED***;
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot***REMOVED***;
      return this;
  ***REMOVED***;

    XMLNode.prototype.ele = function(name, attributes, text***REMOVED*** {
      return this.element(name, attributes, text***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.nod = function(name, attributes, text***REMOVED*** {
      return this.node(name, attributes, text***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.txt = function(value***REMOVED*** {
      return this.text(value***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.dat = function(value***REMOVED*** {
      return this.cdata(value***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.com = function(value***REMOVED*** {
      return this.comment(value***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.doc = function(***REMOVED*** {
      return this.document(***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.dec = function(version, encoding, standalone***REMOVED*** {
      return this.declaration(version, encoding, standalone***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.dtd = function(pubID, sysID***REMOVED*** {
      return this.doctype(pubID, sysID***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.e = function(name, attributes, text***REMOVED*** {
      return this.element(name, attributes, text***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.n = function(name, attributes, text***REMOVED*** {
      return this.node(name, attributes, text***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.t = function(value***REMOVED*** {
      return this.text(value***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.d = function(value***REMOVED*** {
      return this.cdata(value***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.c = function(value***REMOVED*** {
      return this.comment(value***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.r = function(value***REMOVED*** {
      return this.raw(value***REMOVED***;
  ***REMOVED***;

    XMLNode.prototype.u = function(***REMOVED*** {
      return this.up(***REMOVED***;
  ***REMOVED***;

    return XMLNode;

***REMOVED******REMOVED***(***REMOVED***;

}***REMOVED***.call(this***REMOVED***;
