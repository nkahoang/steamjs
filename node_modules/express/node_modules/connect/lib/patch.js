
/*!
 * Connect
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var ***REMOVED***
  , res = http.ServerResponse.prototype
  , setHeader = res.setHeader
  , _renderHeaders = res._renderHeaders
  , writeHead = res.writeHead;

// apply only once

if (!res._hasConnectPatch***REMOVED*** {

  /**
   * Provide a public "header sent" flag
   * until node does.
   *
   * @return {Boolean}
   * @api public
   */

  res.__defineGetter__('headerSent', function(***REMOVED***{
    return this._header;
***REMOVED******REMOVED***;

  /**
   * Set header `field` to `val`, special-casing
   * the `Set-Cookie` field for multiple support.
   *
   * @param {String} field
   * @param {String} val
   * @api public
   */

  res.setHeader = function(field, val***REMOVED***{
    var key = field.toLowerCase(***REMOVED***
      , prev;

    // special-case Set-Cookie
    if (this._headers && 'set-cookie' == key***REMOVED*** {
      if (prev = this.getHeader(field***REMOVED******REMOVED*** {
          if (Array.isArray(prev***REMOVED******REMOVED*** {
              val = prev.concat(val***REMOVED***;
        ***REMOVED*** else if (Array.isArray(val***REMOVED******REMOVED*** {
              val = val.concat(prev***REMOVED***;
        ***REMOVED*** else {
              val = [prev, val];
        ***REMOVED***
    ***REMOVED***
    // charset
  ***REMOVED*** else if ('content-type' == key && this.charset***REMOVED*** {
      val += '; charset=' + this.charset;
  ***REMOVED***

    return setHeader.call(this, field, val***REMOVED***;
***REMOVED***;

  /**
   * Proxy to emit "header" event.
   */

  res._renderHeaders = function(***REMOVED***{
    if (!this._emittedHeader***REMOVED*** this.emit('header'***REMOVED***;
    this._emittedHeader = true;
    return _renderHeaders.call(this***REMOVED***;
***REMOVED***;

  res.writeHead = function(statusCode, reasonPhrase, headers***REMOVED***{
    if (typeof reasonPhrase === 'object'***REMOVED*** headers = reasonPhrase;
    if (typeof headers === 'object'***REMOVED*** {
      Object.keys(headers***REMOVED***.forEach(function(key***REMOVED***{
        this.setHeader(key, headers[key]***REMOVED***;
    ***REMOVED***, this***REMOVED***;
  ***REMOVED***
    if (!this._emittedHeader***REMOVED*** this.emit('header'***REMOVED***;
    this._emittedHeader = true;
    return writeHead.call(this, statusCode, reasonPhrase***REMOVED***;
***REMOVED***;

  res._hasConnectPatch = true;
}
