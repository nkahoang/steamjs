/*!
 * Connect
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var EventEmitter = require('events'***REMOVED***.EventEmitter
  , proto = require('./proto'***REMOVED***
  , utils = require('./utils'***REMOVED***
  , ***REMOVED***
  , basename = path.basename
  , fs = require('fs'***REMOVED***;

// node patches

require('./patch'***REMOVED***;

// expose createServer(***REMOVED*** as the module

exports = module.exports = createServer;

/**
 * Framework version.
 */

exports.version = '2.7.11';

/**
 * Expose mime module.
 */

exports.mime = require('./middleware/static'***REMOVED***.mime;

/**
 * Expose the prototype.
 */

exports.proto = proto;

/**
 * Auto-load middleware getters.
 */

exports.middleware = {};

/**
 * Expose utilities.
 */

exports.utils = utils;

/**
 * Create a new connect server.
 *
 * @return {Function}
 * @api public
 */

function createServer(***REMOVED*** {
  function app(req, res, next***REMOVED***{ app.handle(req, res, next***REMOVED***; }
  utils.merge(app, proto***REMOVED***;
  utils.merge(app, EventEmitter.prototype***REMOVED***;
  app.route = '/';
  app.stack = [];
  for (var i = 0; i < arguments.length; ++i***REMOVED*** {
    app.use(arguments[i]***REMOVED***;
***REMOVED***
  return app;
};

/**
 * Support old `.createServer(***REMOVED***` method.
 */

createServer.createServer = createServer;

/**
 * Auto-load bundled middleware with getters.
 */

fs.readdirSync(__dirname + '/middleware'***REMOVED***.forEach(function(filename***REMOVED***{
  if (!/\.js$/.test(filename***REMOVED******REMOVED*** return;
  var name = basename(filename, '.js'***REMOVED***;
  function load(***REMOVED***{ return require('./middleware/' + name***REMOVED***; }
  exports.middleware.__defineGetter__(name, load***REMOVED***;
  exports.__defineGetter__(name, load***REMOVED***;
}***REMOVED***;
