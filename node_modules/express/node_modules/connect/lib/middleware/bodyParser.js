
/*!
 * Connect - bodyParser
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var multipart = require('./multipart'***REMOVED***
  , urlencoded = require('./urlencoded'***REMOVED***
  , json = require('./json'***REMOVED***;

/**
 * Body parser:
 *
 *   Status: the multipart body parser will be removed in Connect 3.
 *
 *   Parse request bodies, supports _application/json_,
 *   _application/x-www-form-urlencoded_, and _multipart/form-data_.
 *
 *   This is equivalent to:
 *
 *     app.use(connect.json(***REMOVED******REMOVED***;
 *     app.use(connect.urlencoded(***REMOVED******REMOVED***;
 *     app.use(connect.multipart(***REMOVED******REMOVED***;
 *
 * Examples:
 *
 *      connect(***REMOVED***
 *        .use(connect.bodyParser(***REMOVED******REMOVED***
 *        .use(function(req, res***REMOVED*** {
 *          res.end('viewing user ' + req.body.user.name***REMOVED***;
 *      ***REMOVED******REMOVED***;
 *
 *      $ curl -d 'user[name]=tj' http://local/
 *      $ curl -d '{"user":{"name":"tj"}}' -H "Content-Type: application/json" http://local/
 *
 *  View [json](json.html***REMOVED***, [urlencoded](urlencoded.html***REMOVED***, and [multipart](multipart.html***REMOVED*** for more info.
 *
 *  If you wish to create your own body parser, you may be interested in:
 *
 *    - [raw-body](https://github.com/stream-utils/raw-body***REMOVED***
 *    - [body](https://github.com/raynos/body***REMOVED***
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

exports = module.exports = function bodyParser(options***REMOVED***{
  var _urlencoded = urlencoded(options***REMOVED***
    , _multipart = multipart(options***REMOVED***
    , _json = json(options***REMOVED***;

  return function bodyParser(req, res, next***REMOVED*** {
    _json(req, res, function(err***REMOVED***{
      if (err***REMOVED*** return next(err***REMOVED***;
      _urlencoded(req, res, function(err***REMOVED***{
        if (err***REMOVED*** return next(err***REMOVED***;
        _multipart(req, res, next***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***
};