
/*!
 * Connect - json
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var utils = require('../utils'***REMOVED***;
var getBody = require('raw-body'***REMOVED***;

/**
 * JSON:
 *
 * Parse JSON request bodies, providing the
 * parsed object as `req.body`.
 *
 * Options:
 *
 *   - `strict`  when `false` anything `JSON.parse(***REMOVED***` accepts will be parsed
 *   - `reviver`  used as the second "reviver" argument for JSON.parse
 *   - `limit`  byte limit [1mb]
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

exports = module.exports = function(options***REMOVED***{
  options = options || {};
  var strict = options.strict !== false;
  var verify = typeof options.verify === 'function' && options.verify;

  return function json(req, res, next***REMOVED*** {
    if (req._body***REMOVED*** return next(***REMOVED***;
    req.body = req.body || {};

    if (!utils.hasBody(req***REMOVED******REMOVED*** return next(***REMOVED***;

    // check Content-Type
    if (!exports.regexp.test(utils.mime(req***REMOVED******REMOVED******REMOVED*** return next(***REMOVED***;

    // flag as parsed
    req._body = true;

    // parse
    getBody(req, {
      limit: options.limit || '1mb',
      length: req.headers['content-length'],
      encoding: 'utf8'
  ***REMOVED***, function (err, buf***REMOVED*** {
      if (err***REMOVED*** return next(err***REMOVED***;

      if (verify***REMOVED*** {
        try {
          verify(req, res, buf***REMOVED***
      ***REMOVED*** catch (err***REMOVED*** {
          if (!err.status***REMOVED*** err.status = 403;
          return next(err***REMOVED***;
      ***REMOVED***
    ***REMOVED***

      var first = buf.trim(***REMOVED***[0];

      if (0 == buf.length***REMOVED*** {
        return next(utils.error(400, 'invalid json, empty body'***REMOVED******REMOVED***;
    ***REMOVED***

      if (strict && '{' != first && '[' != first***REMOVED*** return next(utils.error(400, 'invalid json'***REMOVED******REMOVED***;
      try {
        req.body = JSON.parse(buf, options.reviver***REMOVED***;
    ***REMOVED*** catch (err***REMOVED***{
        err.body = buf;
        err.status = 400;
        return next(err***REMOVED***;
    ***REMOVED***
      next(***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED***;
};

exports.regexp = /^application\/([\w!#\$%&\*`\-\.\^~]*\+***REMOVED***?json$/i;

