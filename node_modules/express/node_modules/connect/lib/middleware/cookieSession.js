/*!
 * Connect - cookieSession
 * Copyright(c***REMOVED*** 2011 Sencha Inc.
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var utils = require('./../utils'***REMOVED***
  , Cookie = require('express-session'***REMOVED***.Cookie
  , debug = require('debug'***REMOVED***('connect:cookieSession'***REMOVED***
  , signature = require('cookie-signature'***REMOVED***
  , url = require('url'***REMOVED***;

/**
 * Cookie Session:
 *
 *   Cookie session middleware.
 *
 *      var app = connect(***REMOVED***;
 *      app.use(connect.cookieParser(***REMOVED******REMOVED***;
 *      app.use(connect.cookieSession({ secret: 'tobo!', cookie: { maxAge: 60 * 60 * 1000 }}***REMOVED******REMOVED***;
 *
 * Options:
 *
 *   - `key` cookie name defaulting to `connect.sess`
 *   - `secret` prevents cookie tampering
 *   - `cookie` session cookie settings, defaulting to `{ path: '/', httpOnly: true, maxAge: null }`
 *   - `proxy` trust the reverse proxy when setting secure cookies (via "x-forwarded-proto"***REMOVED***
 *
 * Clearing sessions:
 *
 *  To clear the session simply set its value to `null`,
 *  `cookieSession(***REMOVED***` will then respond with a 1970 Set-Cookie.
 *
 *     req.session = null;
 *
 * If you are interested in more sophisticated solutions,
 * you may be interested in:
 *
 *   - [client-sessions](https://github.com/mozilla/node-client-sessions***REMOVED***
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

module.exports = function cookieSession(options***REMOVED***{
  // TODO: utilize Session/Cookie to unify API
  options = options || {};
  var key = options.key || 'connect.sess'
    , trustProxy = options.proxy;

  return function cookieSession(req, res, next***REMOVED*** {

    // req.secret is for backwards compatibility
    var secret = options.secret || req.secret;
    if (!secret***REMOVED*** throw new Error('`secret` option required for cookie sessions'***REMOVED***;

    // default session
    req.session = {};
    var cookie = req.session.cookie = new Cookie(options.cookie***REMOVED***;

    // pathname mismatch
    var originalPath = url.parse(req.originalUrl***REMOVED***.pathname;
    if (0 != originalPath.indexOf(cookie.path***REMOVED******REMOVED*** return next(***REMOVED***;

    // cookieParser secret
    if (!options.secret && req.secret***REMOVED*** {
      req.session = req.signedCookies[key] || {};
      req.session.cookie = cookie;
  ***REMOVED*** else {
      // TODO: refactor
      var rawCookie = req.cookies[key];
      if (rawCookie***REMOVED*** {
        var unsigned = utils.parseSignedCookie(rawCookie, secret***REMOVED***;
        if (unsigned***REMOVED*** {
          var original = unsigned;
          req.session = utils.parseJSONCookie(unsigned***REMOVED*** || {};
          req.session.cookie = cookie;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

    res.on('header', function(***REMOVED***{
      // removed
      if (!req.session***REMOVED*** {
        debug('clear session'***REMOVED***;
        cookie.expires = new Date(0***REMOVED***;
        res.setHeader('Set-Cookie', cookie.serialize(key, ''***REMOVED******REMOVED***;
        return;
    ***REMOVED***

      delete req.session.cookie;

      // check security
      var proto = (req.headers['x-forwarded-proto'] || ''***REMOVED***.toLowerCase(***REMOVED***
        , tls = req.connection.encrypted || (trustProxy && 'https' == proto.split(/\s*,\s*/***REMOVED***[0]***REMOVED***;

      // only send secure cookies via https
      if (cookie.secure && !tls***REMOVED*** return debug('not secured'***REMOVED***;

      // serialize
      debug('serializing %j', req.session***REMOVED***;
      var val = 'j:' + JSON.stringify(req.session***REMOVED***;

      // compare data, no need to set-cookie if unchanged
      if (original == val***REMOVED*** return debug('unmodified session'***REMOVED***;

      // set-cookie
      val = 's:' + signature.sign(val, secret***REMOVED***;
      val = cookie.serialize(key, val***REMOVED***;
      debug('set-cookie %j', cookie***REMOVED***;
      res.setHeader('Set-Cookie', val***REMOVED***;
  ***REMOVED******REMOVED***;

    next(***REMOVED***;
***REMOVED***;
};
