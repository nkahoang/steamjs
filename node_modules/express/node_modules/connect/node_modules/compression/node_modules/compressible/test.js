var assert = require('assert'***REMOVED***

var specifications = require('./specifications.json'***REMOVED***
var compressible = require('./'***REMOVED***

// None of these should be actual types so that the lookup will never include them.
var example_types = [
  { type: 'something/text', should: true },
  { type: 'thingie/dart', should: true },
  { type: 'type/json', should: true },
  { type: 'ecmascript/6', should: true },
  { type: 'data/beans+xml', should: true },
  { type: 'asdf/nope', should: false },
  { type: 'cats', should: false }
]

var invalid_types = [
  undefined,
  null,
  0,
  1,
  false,
  true
]

var object_true = {
  compressible: true,
  sources: ["compressible.regex"],
  notes: "Automatically generated via regex."
}, object_false = {
  compressible: false,
  sources: ["compressible.regex"],
  notes: "Automatically generated via regex."
}

describe('Testing if spec lookups are correct.', function (***REMOVED*** {
  for (var type in specifications***REMOVED*** {
    var value = specifications[type].compressible
    it(type + ' should' + (value ? ' ' : ' not '***REMOVED*** + 'be compressible', function (***REMOVED*** {
      assert.equal(compressible(type***REMOVED***, value***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED***
}***REMOVED***

describe('Testing if the regex works as intended.', function (***REMOVED*** {
  example_types.forEach(function (example***REMOVED*** {
    it(example.type + ' should' + (example.should ? ' ' : ' not '***REMOVED*** + 'be compressible', function (***REMOVED*** {
      assert.equal(compressible(example.type***REMOVED***, example.should***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

describe('Testing if getter returns the correct objects.', function (***REMOVED*** {
  it('All spec objects should be get-able', function (***REMOVED*** {
    for (var type in specifications***REMOVED*** {
      assert.equal(compressible.get(type***REMOVED***, specifications[type]***REMOVED***
  ***REMOVED***
***REMOVED******REMOVED***
  example_types.forEach(function (example***REMOVED*** {
    it(example.type + ' should generate a ' + (example.should ? 'true' : 'false'***REMOVED*** + ' object', function (***REMOVED*** {
      assert.deepEqual(compressible.get(example.type***REMOVED***, example.should ? object_true: object_false***REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

describe('Testing if charsets are handled correctly.', function (***REMOVED*** {
  it('Charsets should be stripped off without issue', function (***REMOVED*** {
    for (var type in specifications***REMOVED*** {
      var value = specifications[type].compressible
      assert.equal(compressible(type + '; charset=utf-8'***REMOVED***, value***REMOVED***
  ***REMOVED***
***REMOVED******REMOVED***
  it('Types with charsets should be get-able', function (***REMOVED*** {
    for (var type in specifications***REMOVED*** {
      assert.equal(compressible.get(type + '; charset=utf-8'***REMOVED***, specifications[type]***REMOVED***
  ***REMOVED***
***REMOVED******REMOVED***
}***REMOVED***

describe('Ensuring invalid types do not cause errors.', function (***REMOVED*** {
  it('No arguments should return false without error', function (***REMOVED*** {
    assert.equal(compressible(***REMOVED***, false***REMOVED***
***REMOVED******REMOVED***

  invalid_types.forEach(function (invalid***REMOVED*** {
    it(invalid + ' should return false without error', function (***REMOVED*** {
      assert.doesNotThrow(function (***REMOVED*** {
        assert.equal(compressible(invalid***REMOVED***, false***REMOVED***
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***
}***REMOVED***