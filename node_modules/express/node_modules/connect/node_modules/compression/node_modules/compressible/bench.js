var assert = require('assert'***REMOVED***
  , Benchmark = require('benchmark'***REMOVED***
  , suite = new Benchmark.Suite
  , mime = require('mime'***REMOVED***
  , keys = Object.keys(mime.types***REMOVED***
  , compressible = require('./index.js'***REMOVED***
  , benchmarks = require('beautify-benchmark'***REMOVED***

function getRandomType (***REMOVED*** {
  var type = mime.types[keys[Math.floor(Math.random(***REMOVED*** * keys.length***REMOVED***]]
  return type + mime.charsets.lookup(type***REMOVED***
}

function legacy (type***REMOVED*** {
  if (!type || typeof type !== "string"***REMOVED*** return false
  var spec = compressible.specs[type.split(';'***REMOVED***]
  return spec ? spec.compressible : compressible.regex.test(type***REMOVED***
}

function previous (type***REMOVED*** {
  if (!type || typeof type !== "string"***REMOVED*** return false
  var i = type.indexOf(';'***REMOVED***
    , spec = compressible.specs[i < 0 ? type : type.slice(0, i***REMOVED***]
  return spec ? spec.compressible : compressible.regex.test(type***REMOVED***
}

describe('Compressible performance benchmarks.', function (***REMOVED*** {
  it('Performance of `current` should be within the top 95%', function (***REMOVED*** {
    suite.add('current', function(***REMOVED*** {
      compressible(getRandomType(***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    .add('previous', function (***REMOVED*** {
      previous(getRandomType(***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    .add('legacy', function (***REMOVED*** {
      legacy(getRandomType(***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
    .on('cycle', function (event***REMOVED*** {
      benchmarks.add(event.target***REMOVED***
  ***REMOVED******REMOVED***
    .on('start', function (event***REMOVED*** {
      console.log('\n  Starting...'***REMOVED***
  ***REMOVED******REMOVED***
    .on('complete', function done (***REMOVED*** {
      console.log('\n  Done!'***REMOVED***
      var result = benchmarks.getPercent('current'***REMOVED***
      benchmarks.log(***REMOVED***
      if (result < 95***REMOVED***
        assert.fail('' + result + '%', '95%`', null, '>=', done***REMOVED***
  ***REMOVED******REMOVED***
    .run({ 'async': false }***REMOVED***
***REMOVED******REMOVED***
}***REMOVED***