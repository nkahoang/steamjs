module.exports = preferredLanguages;
preferredLanguages.preferredLanguages = preferredLanguages;

function parseAcceptLanguage(accept***REMOVED*** {
  return accept.split(','***REMOVED***.map(function(e***REMOVED*** {
    return parseLanguage(e.trim(***REMOVED******REMOVED***;
***REMOVED******REMOVED***.filter(function(e***REMOVED*** {
    return e && e.q > 0;
***REMOVED******REMOVED***;
}

function parseLanguage(s***REMOVED*** {
  var match = s.match(/^\s*(\S+?***REMOVED***(?:-(\S+?***REMOVED******REMOVED***?\s*(?:;(.****REMOVED******REMOVED***?$/***REMOVED***;
  if (!match***REMOVED*** return null;

  var prefix = match[1],
      suffix = match[2],
      full = prefix;

  if (suffix***REMOVED*** full += "-" + suffix;

  var q = 1;
  if (match[3]***REMOVED*** {
    var params = match[3].split(';'***REMOVED***
    for (var i = 0; i < params.length; i ++***REMOVED*** {
      var p = params[i].split('='***REMOVED***;
      if (p[0] === 'q'***REMOVED*** q = parseFloat(p[1]***REMOVED***;
  ***REMOVED***
***REMOVED***

  return {
    prefix: prefix,
    suffix: suffix,
    q: q,
    full: full
***REMOVED***;
}

function getLanguagePriority(language, accepted***REMOVED*** {
  var match = getClosestMatch(language, accepted***REMOVED***;
  return match ? match.q : 0;
}

function getClosestMatch(language, accepted***REMOVED*** {
  var parsed = parseLanguage(language***REMOVED***;

  var matches = accepted.filter(function(a***REMOVED*** {
    return a.full === parsed.full;
***REMOVED******REMOVED***;
  if (matches.length***REMOVED*** return matches[0];

  matches = accepted.filter(function(a***REMOVED*** {
    return a.prefix === parsed.prefix && !a.suffix;
***REMOVED******REMOVED***;
  if (matches.length***REMOVED*** return matches[0];

  matches = accepted.filter(function(a***REMOVED*** {
    return a.prefix === parsed.prefix;
***REMOVED******REMOVED***;
  if (matches.length***REMOVED*** return matches[0];

  matches = accepted.filter(function(a***REMOVED*** {
    return a.prefix === '*';
***REMOVED******REMOVED***;
  return matches[0];
}

function preferredLanguages(accept, provided***REMOVED*** {
  accept = parseAcceptLanguage(accept || ''***REMOVED***;
  if (provided***REMOVED*** {

    var ret = provided.map(function(type***REMOVED*** {
      return [type, getLanguagePriority(type, accept***REMOVED***];
  ***REMOVED******REMOVED***.filter(function(pair***REMOVED*** {
      return pair[1] > 0;
  ***REMOVED******REMOVED***.sort(function(a, b***REMOVED*** {
      // revsort
      return a[1] === b[1] ? 0 : a[1] > b[1] ? -1 : 1;
  ***REMOVED******REMOVED***.map(function(pair***REMOVED*** {
      return pair[0];
  ***REMOVED******REMOVED***;
    return ret;

***REMOVED*** else {
    return accept.sort(function (a, b***REMOVED*** {
      // revsort
      return a.q < b.q ? 1 : -1;
  ***REMOVED******REMOVED***.map(function(type***REMOVED*** {
      return type.full;
  ***REMOVED******REMOVED***;
***REMOVED***
}
