(function(***REMOVED*** {
  var configuration, preferredMediaTypes, testConfigurations, testCorrectType, _i, _len,
    _this = this;

  preferredMediaTypes = require('../lib/mediaType'***REMOVED***.preferredMediaTypes;

  this["Should not return a media type when no media type provided"] = function(test***REMOVED*** {
    test.deepEqual(preferredMediaTypes('*/*', []***REMOVED***, []***REMOVED***;
    return test.done(***REMOVED***;
***REMOVED***;

  this["Should not return a media type when no media type is acceptable"] = function(test***REMOVED*** {
    test.deepEqual(preferredMediaTypes('application/json', ['text/html']***REMOVED***, []***REMOVED***;
    return test.done(***REMOVED***;
***REMOVED***;

  this["Should not return a media type with q = 0"] = function(test***REMOVED*** {
    test.deepEqual(preferredMediaTypes('text/html;q=0', ['text/html']***REMOVED***, []***REMOVED***;
    return test.done(***REMOVED***;
***REMOVED***;

  testCorrectType = function(c***REMOVED*** {
    return _this["Should return " + c.selected + " for access header " + c.accept + " with provided types " + c.provided] = function(test***REMOVED*** {
      test.deepEqual(preferredMediaTypes(c.accept, c.provided***REMOVED***, c.selected***REMOVED***;
      return test.done(***REMOVED***;
  ***REMOVED***;
***REMOVED***;

  testConfigurations = [
    {
      accept: 'text/html',
      provided: ['text/html'],
      selected: ['text/html']
  ***REMOVED***, {
      accept: '*/*',
      provided: ['text/html'],
      selected: ['text/html']
  ***REMOVED***, {
      accept: 'text/*',
      provided: ['text/html'],
      selected: ['text/html']
  ***REMOVED***, {
      accept: 'application/json, text/html',
      provided: ['text/html'],
      selected: ['text/html']
  ***REMOVED***, {
      accept: 'text/html;q=0.1',
      provided: ['text/html'],
      selected: ['text/html']
  ***REMOVED***, {
      accept: 'application/json, text/html',
      provided: ['application/json', 'text/html'],
      selected: ['application/json', 'text/html']
  ***REMOVED***, {
      accept: 'application/json;q=0.2, text/html',
      provided: ['application/json', 'text/html'],
      selected: ['text/html', 'application/json']
  ***REMOVED***, {
      accept: 'application/json;q=0.2, text/html',
      provided: null,
      selected: ['text/html', 'application/json']
  ***REMOVED***
  ];

  for (_i = 0, _len = testConfigurations.length; _i < _len; _i++***REMOVED*** {
    configuration = testConfigurations[_i];
    testCorrectType(configuration***REMOVED***;
***REMOVED***

}***REMOVED***.call(this***REMOVED***;
