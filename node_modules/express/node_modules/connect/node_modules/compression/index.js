/*!
 * Connect - compress
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var zlib = require('zlib'***REMOVED***;
var bytes = require('bytes'***REMOVED***;
var Negotiator = require('negotiator'***REMOVED***;
var compressible = require('compressible'***REMOVED***;

/**
 * Supported content-encoding methods.
 */

exports.methods = {
    gzip: zlib.createGzip
  , deflate: zlib.createDeflate
};

/**
 * Default filter function.
 */

exports.filter = function(req, res***REMOVED***{
  return compressible(res.getHeader('Content-Type'***REMOVED******REMOVED***;
};

/**
 * Compress:
 *
 * Compress response data with gzip/deflate.
 *
 * Filter:
 *
 *  A `filter` callback function may be passed to
 *  replace the default logic of:
 *
 *     exports.filter = function(req, res***REMOVED***{
 *       return /json|text|javascript/.test(res.getHeader('Content-Type'***REMOVED******REMOVED***;
 *   ***REMOVED***;
 *
 * Threshold:
 *
 *  Only compress the response if the byte size is at or above a threshold.
 *  Always compress while streaming.
 *
 *   - `threshold` - string representation of size or bytes as an integer.
 *
 * Options:
 *
 *  All remaining options are passed to the gzip/deflate
 *  creation functions. Consult node's docs for additional details.
 *
 *   - `chunkSize` (default: 16*1024***REMOVED***
 *   - `windowBits`
 *   - `level`: 0-9 where 0 is no compression, and 9 is slow but best compression
 *   - `memLevel`: 1-9 low is slower but uses less memory, high is fast but uses more
 *   - `strategy`: compression strategy
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */

module.exports = function compress(options***REMOVED*** {
  options = options || {};
  var filter = options.filter || exports.filter;
  var threshold;

  if (false === options.threshold || 0 === options.threshold***REMOVED*** {
    threshold = 0
***REMOVED*** else if ('string' === typeof options.threshold***REMOVED*** {
    threshold = bytes(options.threshold***REMOVED***
***REMOVED*** else {
    threshold = options.threshold || 1024
***REMOVED***

  return function compress(req, res, next***REMOVED***{
    var accept = req.headers['accept-encoding']
      , writeHead = res.writeHead
      , write = res.write
      , end = res.end
      , compress = true
      , stream;

    // see #724
    req.on('close', function(***REMOVED***{
      res.write = res.end = function(***REMOVED***{};
  ***REMOVED******REMOVED***;

    // flush is noop by default
    res.flush = noop;

    // proxy

    res.write = function(chunk, encoding***REMOVED***{
      if (!this.headerSent***REMOVED*** {
        // if content-length is set and is lower
        // than the threshold, don't compress
        var length = res.getHeader('content-length'***REMOVED***;
        if (!isNaN(length***REMOVED*** && length < threshold***REMOVED*** compress = false;
        this._implicitHeader(***REMOVED***;
    ***REMOVED***
      return stream
        ? stream.write(new Buffer(chunk, encoding***REMOVED******REMOVED***
        : write.call(res, chunk, encoding***REMOVED***;
  ***REMOVED***;

    res.end = function(chunk, encoding***REMOVED***{
      if (chunk***REMOVED*** {
        if (!this.headerSent && getSize(chunk***REMOVED*** < threshold***REMOVED*** compress = false;
        this.write(chunk, encoding***REMOVED***;
    ***REMOVED*** else if (!this.headerSent***REMOVED*** {
        // response size === 0
        compress = false;
    ***REMOVED***
      return stream
        ? stream.end(***REMOVED***
        : end.call(res***REMOVED***;
  ***REMOVED***;

    res.writeHead = function(***REMOVED***{
      // default request filter
      if (!filter(req, res***REMOVED******REMOVED*** return writeHead.apply(res, arguments***REMOVED***;

      // vary
      var vary = res.getHeader('Vary'***REMOVED***;
      if (!vary***REMOVED*** {
        res.setHeader('Vary', 'Accept-Encoding'***REMOVED***;
    ***REMOVED*** else if (!~vary.indexOf('Accept-Encoding'***REMOVED******REMOVED*** {
        res.setHeader('Vary', vary + ', Accept-Encoding'***REMOVED***;
    ***REMOVED***

      if (!compress***REMOVED*** return writeHead.apply(res, arguments***REMOVED***;

      var encoding = res.getHeader('Content-Encoding'***REMOVED*** || 'identity';

      // already encoded
      if ('identity' != encoding***REMOVED*** return writeHead.apply(res, arguments***REMOVED***;

      // SHOULD use identity
      if (!accept***REMOVED*** return writeHead.apply(res, arguments***REMOVED***;

      // head
      if ('HEAD' == req.method***REMOVED*** return writeHead.apply(res, arguments***REMOVED***;

      // compression method
      var method = new Negotiator(req***REMOVED***.preferredEncoding(['gzip', 'deflate', 'identity']***REMOVED***;
      // negotiation failed
      if (method === 'identity'***REMOVED*** return writeHead.apply(res, arguments***REMOVED***;

      // compression stream
      stream = exports.methods[method](options***REMOVED***;

      // overwrite the flush method
      res.flush = function(***REMOVED***{
        stream.flush(***REMOVED***;
    ***REMOVED***

      // header fields
      res.setHeader('Content-Encoding', method***REMOVED***;
      res.removeHeader('Content-Length'***REMOVED***;

      // compression
      stream.on('data', function(chunk***REMOVED***{
        write.call(res, chunk***REMOVED***;
    ***REMOVED******REMOVED***;

      stream.on('end', function(***REMOVED***{
        end.call(res***REMOVED***;
    ***REMOVED******REMOVED***;

      stream.on('drain', function(***REMOVED*** {
        res.emit('drain'***REMOVED***;
    ***REMOVED******REMOVED***;

      writeHead.apply(res, arguments***REMOVED***;
  ***REMOVED***;

    next(***REMOVED***;
***REMOVED***;
};

function getSize(chunk***REMOVED*** {
  return Buffer.isBuffer(chunk***REMOVED***
    ? chunk.length
    : Buffer.byteLength(chunk***REMOVED***;
}

function noop(***REMOVED***{}
