/**
 * Object#toString(***REMOVED*** ref for stringify(***REMOVED***.
 */

var toString = Object.prototype.toString;

/**
 * Object#hasOwnProperty ref
 */

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Array#indexOf shim.
 */

var indexOf = typeof Array.prototype.indexOf === 'function'
  ? function(arr, el***REMOVED*** { return arr.indexOf(el***REMOVED***; }
  : function(arr, el***REMOVED*** {
      for (var i = 0; i < arr.length; i++***REMOVED*** {
        if (arr[i] === el***REMOVED*** return i;
    ***REMOVED***
      return -1;
  ***REMOVED***;

/**
 * Array.isArray shim.
 */

var isArray = Array.isArray || function(arr***REMOVED*** {
  return toString.call(arr***REMOVED*** == '[object Array]';
};

/**
 * Object.keys shim.
 */

var objectKeys = Object.keys || function(obj***REMOVED*** {
  var ret = [];
  for (var key in obj***REMOVED*** {
    if (obj.hasOwnProperty(key***REMOVED******REMOVED*** {
      ret.push(key***REMOVED***;
  ***REMOVED***
***REMOVED***
  return ret;
};

/**
 * Array#forEach shim.
 */

var forEach = typeof Array.prototype.forEach === 'function'
  ? function(arr, fn***REMOVED*** { return arr.forEach(fn***REMOVED***; }
  : function(arr, fn***REMOVED*** {
      for (var i = 0; i < arr.length; i++***REMOVED*** fn(arr[i]***REMOVED***;
  ***REMOVED***;

/**
 * Array#reduce shim.
 */

var reduce = function(arr, fn, initial***REMOVED*** {
  if (typeof arr.reduce === 'function'***REMOVED*** return arr.reduce(fn, initial***REMOVED***;
  var res = initial;
  for (var i = 0; i < arr.length; i++***REMOVED*** res = fn(res, arr[i]***REMOVED***;
  return res;
};

/**
 * Cache non-integer test regexp.
 */

var isint = /^[0-9]+$/;

function promote(parent, key***REMOVED*** {
  if (parent[key].length == 0***REMOVED*** return parent[key] = {}
  var t = {};
  for (var i in parent[key]***REMOVED*** {
    if (hasOwnProperty.call(parent[key], i***REMOVED******REMOVED*** {
      t[i] = parent[key][i];
  ***REMOVED***
***REMOVED***
  parent[key] = t;
  return t;
}

function parse(parts, parent, key, val***REMOVED*** {
  var part = parts.shift(***REMOVED***;
  
  // illegal
  if (Object.getOwnPropertyDescriptor(Object.prototype, key***REMOVED******REMOVED*** return;
  
  // end
  if (!part***REMOVED*** {
    if (isArray(parent[key]***REMOVED******REMOVED*** {
      parent[key].push(val***REMOVED***;
  ***REMOVED*** else if ('object' == typeof parent[key]***REMOVED*** {
      parent[key] = val;
  ***REMOVED*** else if ('undefined' == typeof parent[key]***REMOVED*** {
      parent[key] = val;
  ***REMOVED*** else {
      parent[key] = [parent[key], val];
  ***REMOVED***
    // array
***REMOVED*** else {
    var obj = parent[key] = parent[key] || [];
    if (']' == part***REMOVED*** {
      if (isArray(obj***REMOVED******REMOVED*** {
        if ('' != val***REMOVED*** obj.push(val***REMOVED***;
    ***REMOVED*** else if ('object' == typeof obj***REMOVED*** {
        obj[objectKeys(obj***REMOVED***.length] = val;
    ***REMOVED*** else {
        obj = parent[key] = [parent[key], val];
    ***REMOVED***
      // prop
  ***REMOVED*** else if (~indexOf(part, ']'***REMOVED******REMOVED*** {
      part = part.substr(0, part.length - 1***REMOVED***;
      if (!isint.test(part***REMOVED*** && isArray(obj***REMOVED******REMOVED*** obj = promote(parent, key***REMOVED***;
      parse(parts, obj, part, val***REMOVED***;
      // key
  ***REMOVED*** else {
      if (!isint.test(part***REMOVED*** && isArray(obj***REMOVED******REMOVED*** obj = promote(parent, key***REMOVED***;
      parse(parts, obj, part, val***REMOVED***;
  ***REMOVED***
***REMOVED***
}

/**
 * Merge parent key/val pair.
 */

function merge(parent, key, val***REMOVED***{
  if (~indexOf(key, ']'***REMOVED******REMOVED*** {
    var parts = key.split('['***REMOVED***
      , len = parts.length
      , last = len - 1;
    parse(parts, parent, 'base', val***REMOVED***;
    // optimize
***REMOVED*** else {
    if (!isint.test(key***REMOVED*** && isArray(parent.base***REMOVED******REMOVED*** {
      var t = {};
      for (var k in parent.base***REMOVED*** t[k] = parent.base[k];
      parent.base = t;
  ***REMOVED***
    set(parent.base, key, val***REMOVED***;
***REMOVED***

  return parent;
}

/**
 * Compact sparse arrays.
 */

function compact(obj***REMOVED*** {
  if ('object' != typeof obj***REMOVED*** return obj;

  if (isArray(obj***REMOVED******REMOVED*** {
    var ret = [];

    for (var i in obj***REMOVED*** {
      if (hasOwnProperty.call(obj, i***REMOVED******REMOVED*** {
        ret.push(obj[i]***REMOVED***;
    ***REMOVED***
  ***REMOVED***

    return ret;
***REMOVED***

  for (var key in obj***REMOVED*** {
    obj[key] = compact(obj[key]***REMOVED***;
***REMOVED***

  return obj;
}

/**
 * Parse the given obj.
 */

function parseObject(obj***REMOVED***{
  var ret = { base: {} };

  forEach(objectKeys(obj***REMOVED***, function(name***REMOVED***{
    merge(ret, name, obj[name]***REMOVED***;
***REMOVED******REMOVED***;

  return compact(ret.base***REMOVED***;
}

/**
 * Parse the given str.
 */

function parseString(str***REMOVED***{
  var ret = reduce(String(str***REMOVED***.split('&'***REMOVED***, function(ret, pair***REMOVED***{
    var eql = indexOf(pair, '='***REMOVED***
      , brace = lastBraceInKey(pair***REMOVED***
      , key = pair.substr(0, brace || eql***REMOVED***
      , val = pair.substr(brace || eql, pair.length***REMOVED***
      , val = val.substr(indexOf(val, '='***REMOVED*** + 1, val.length***REMOVED***;

    // ?foo
    if ('' == key***REMOVED*** key = pair, val = '';
    if ('' == key***REMOVED*** return ret;

    return merge(ret, decode(key***REMOVED***, decode(val***REMOVED******REMOVED***;
***REMOVED***, { base: {} }***REMOVED***.base;

  return compact(ret***REMOVED***;
}

/**
 * Parse the given query `str` or `obj`, returning an object.
 *
 * @param {String} str | {Object} obj
 * @return {Object}
 * @api public
 */

exports.parse = function(str***REMOVED***{
  if (null == str || '' == str***REMOVED*** return {};
  return 'object' == typeof str
    ? parseObject(str***REMOVED***
    : parseString(str***REMOVED***;
};

/**
 * Turn the given `obj` into a query string
 *
 * @param {Object} obj
 * @return {String}
 * @api public
 */

var stringify = exports.stringify = function(obj, prefix***REMOVED*** {
  if (isArray(obj***REMOVED******REMOVED*** {
    return stringifyArray(obj, prefix***REMOVED***;
***REMOVED*** else if ('[object Object]' == toString.call(obj***REMOVED******REMOVED*** {
    return stringifyObject(obj, prefix***REMOVED***;
***REMOVED*** else if ('string' == typeof obj***REMOVED*** {
    return stringifyString(obj, prefix***REMOVED***;
***REMOVED*** else {
    return prefix + '=' + encodeURIComponent(String(obj***REMOVED******REMOVED***;
***REMOVED***
};

/**
 * Stringify the given `str`.
 *
 * @param {String} str
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyString(str, prefix***REMOVED*** {
  if (!prefix***REMOVED*** throw new TypeError('stringify expects an object'***REMOVED***;
  return prefix + '=' + encodeURIComponent(str***REMOVED***;
}

/**
 * Stringify the given `arr`.
 *
 * @param {Array} arr
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyArray(arr, prefix***REMOVED*** {
  var ret = [];
  if (!prefix***REMOVED*** throw new TypeError('stringify expects an object'***REMOVED***;
  for (var i = 0; i < arr.length; i++***REMOVED*** {
    ret.push(stringify(arr[i], prefix + '[' + i + ']'***REMOVED******REMOVED***;
***REMOVED***
  return ret.join('&'***REMOVED***;
}

/**
 * Stringify the given `obj`.
 *
 * @param {Object} obj
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyObject(obj, prefix***REMOVED*** {
  var ret = []
    , keys = objectKeys(obj***REMOVED***
    , key;

  for (var i = 0, len = keys.length; i < len; ++i***REMOVED*** {
    key = keys[i];
    if ('' == key***REMOVED*** continue;
    if (null == obj[key]***REMOVED*** {
      ret.push(encodeURIComponent(key***REMOVED*** + '='***REMOVED***;
  ***REMOVED*** else {
      ret.push(stringify(obj[key], prefix
        ? prefix + '[' + encodeURIComponent(key***REMOVED*** + ']'
        : encodeURIComponent(key***REMOVED******REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED***

  return ret.join('&'***REMOVED***;
}

/**
 * Set `obj`'s `key` to `val` respecting
 * the weird and wonderful syntax of a qs,
 * where "foo=bar&foo=baz" becomes an array.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {String} val
 * @api private
 */

function set(obj, key, val***REMOVED*** {
  var v = obj[key];
  if (Object.getOwnPropertyDescriptor(Object.prototype, key***REMOVED******REMOVED*** return;
  if (undefined === v***REMOVED*** {
    obj[key] = val;
***REMOVED*** else if (isArray(v***REMOVED******REMOVED*** {
    v.push(val***REMOVED***;
***REMOVED*** else {
    obj[key] = [v, val];
***REMOVED***
}

/**
 * Locate last brace in `str` within the key.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function lastBraceInKey(str***REMOVED*** {
  var len = str.length
    , brace
    , c;
  for (var i = 0; i < len; ++i***REMOVED*** {
    c = str[i];
    if (']' == c***REMOVED*** brace = false;
    if ('[' == c***REMOVED*** brace = true;
    if ('=' == c && !brace***REMOVED*** return i;
***REMOVED***
}

/**
 * Decode `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function decode(str***REMOVED*** {
  try {
    return decodeURIComponent(str.replace(/\+/g, ' '***REMOVED******REMOVED***;
***REMOVED*** catch (err***REMOVED*** {
    return str;
***REMOVED***
}
