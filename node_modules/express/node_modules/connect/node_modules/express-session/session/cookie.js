
/*!
 * Connect - session - Cookie
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var merge = require('utils-merge'***REMOVED***
  , cookie = require('cookie'***REMOVED***;

/**
 * Initialize a new `Cookie` with the given `options`.
 *
 * @param {IncomingMessage} req
 * @param {Object} options
 * @api private
 */

var Cookie = module.exports = function Cookie(options***REMOVED*** {
  this.path = '/';
  this.maxAge = null;
  this.httpOnly = true;
  if (options***REMOVED*** merge(this, options***REMOVED***;
  this.originalMaxAge = undefined == this.originalMaxAge
    ? this.maxAge
    : this.originalMaxAge;
};

/*!
 * Prototype.
 */

Cookie.prototype = {

  /**
   * Set expires `date`.
   *
   * @param {Date} date
   * @api public
   */

  set expires(date***REMOVED*** {
    this._expires = date;
    this.originalMaxAge = this.maxAge;
***REMOVED***,

  /**
   * Get expires `date`.
   *
   * @return {Date}
   * @api public
   */

  get expires(***REMOVED*** {
    return this._expires;
***REMOVED***,

  /**
   * Set expires via max-age in `ms`.
   *
   * @param {Number} ms
   * @api public
   */

  set maxAge(ms***REMOVED*** {
    this.expires = 'number' == typeof ms
      ? new Date(Date.now(***REMOVED*** + ms***REMOVED***
      : ms;
***REMOVED***,

  /**
   * Get expires max-age in `ms`.
   *
   * @return {Number}
   * @api public
   */

  get maxAge(***REMOVED*** {
    return this.expires instanceof Date
      ? this.expires.valueOf(***REMOVED*** - Date.now(***REMOVED***
      : this.expires;
***REMOVED***,

  /**
   * Return cookie data object.
   *
   * @return {Object}
   * @api private
   */

  get data(***REMOVED*** {
    return {
        originalMaxAge: this.originalMaxAge
      , expires: this._expires
      , secure: this.secure
      , httpOnly: this.httpOnly
      , domain: this.domain
      , path: this.path
  ***REMOVED***
***REMOVED***,

  /**
   * Return a serialized cookie string.
   *
   * @return {String}
   * @api public
   */

  serialize: function(name, val***REMOVED***{
    return cookie.serialize(name, val, this.data***REMOVED***;
***REMOVED***,

  /**
   * Return JSON representation of this cookie.
   *
   * @return {Object}
   * @api private
   */

  toJSON: function(***REMOVED***{
    return this.data;
***REMOVED***
};
