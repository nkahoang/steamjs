
/*!
 * Connect - session - MemoryStore
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var Store = require('./store'***REMOVED***;

/**
 * Initialize a new `MemoryStore`.
 *
 * @api public
 */

var MemoryStore = module.exports = function MemoryStore(***REMOVED*** {
  this.sessions = {};
};

/**
 * Inherit from `Store.prototype`.
 */

MemoryStore.prototype.__proto__ = Store.prototype;

/**
 * Attempt to fetch session by the given `sid`.
 *
 * @param {String} sid
 * @param {Function} fn
 * @api public
 */

MemoryStore.prototype.get = function(sid, fn***REMOVED***{
  var self = this;
  setImmediate(function(***REMOVED***{
    var expires
      , sess = self.sessions[sid];
    if (sess***REMOVED*** {
      sess = JSON.parse(sess***REMOVED***;
      expires = 'string' == typeof sess.cookie.expires
        ? new Date(sess.cookie.expires***REMOVED***
        : sess.cookie.expires;
      if (!expires || new Date < expires***REMOVED*** {
        fn(null, sess***REMOVED***;
    ***REMOVED*** else {
        self.destroy(sid, fn***REMOVED***;
    ***REMOVED***
  ***REMOVED*** else {
      fn(***REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;
};

/**
 * Commit the given `sess` object associated with the given `sid`.
 *
 * @param {String} sid
 * @param {Session} sess
 * @param {Function} fn
 * @api public
 */

MemoryStore.prototype.set = function(sid, sess, fn***REMOVED***{
  var self = this;
  setImmediate(function(***REMOVED***{
    self.sessions[sid] = JSON.stringify(sess***REMOVED***;
    fn && fn(***REMOVED***;
***REMOVED******REMOVED***;
};

/**
 * Destroy the session associated with the given `sid`.
 *
 * @param {String} sid
 * @api public
 */

MemoryStore.prototype.destroy = function(sid, fn***REMOVED***{
  var self = this;
  setImmediate(function(***REMOVED***{
    delete self.sessions[sid];
    fn && fn(***REMOVED***;
***REMOVED******REMOVED***;
};

/**
 * Invoke the given callback `fn` with all active sessions.
 *
 * @param {Function} fn
 * @api public
 */

MemoryStore.prototype.all = function(fn***REMOVED***{
  var arr = []
    , keys = Object.keys(this.sessions***REMOVED***;
  for (var i = 0, len = keys.length; i < len; ++i***REMOVED*** {
    arr.push(this.sessions[keys[i]]***REMOVED***;
***REMOVED***
  fn(null, arr***REMOVED***;
};

/**
 * Clear all sessions.
 *
 * @param {Function} fn
 * @api public
 */

MemoryStore.prototype.clear = function(fn***REMOVED***{
  this.sessions = {};
  fn && fn(***REMOVED***;
};

/**
 * Fetch number of sessions.
 *
 * @param {Function} fn
 * @api public
 */

MemoryStore.prototype.length = function(fn***REMOVED***{
  fn(null, Object.keys(this.sessions***REMOVED***.length***REMOVED***;
};
