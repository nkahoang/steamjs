
/*!
 * Connect - session - Store
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var EventEmitter = require('events'***REMOVED***.EventEmitter
  , Session = require('./session'***REMOVED***
  , Cookie = require('./cookie'***REMOVED***;

/**
 * Initialize abstract `Store`.
 *
 * @api private
 */

var Store = module.exports = function Store(options***REMOVED***{};

/**
 * Inherit from `EventEmitter.prototype`.
 */

Store.prototype.__proto__ = EventEmitter.prototype;

/**
 * Re-generate the given requests's session.
 *
 * @param {IncomingRequest} req
 * @return {Function} fn
 * @api public
 */

Store.prototype.regenerate = function(req, fn***REMOVED***{
  var self = this;
  this.destroy(req.sessionID, function(err***REMOVED***{
    self.generate(req***REMOVED***;
    fn(err***REMOVED***;
***REMOVED******REMOVED***;
};

/**
 * Load a `Session` instance via the given `sid`
 * and invoke the callback `fn(err, sess***REMOVED***`.
 *
 * @param {String} sid
 * @param {Function} fn
 * @api public
 */

Store.prototype.load = function(sid, fn***REMOVED***{
  var self = this;
  this.get(sid, function(err, sess***REMOVED***{
    if (err***REMOVED*** return fn(err***REMOVED***;
    if (!sess***REMOVED*** return fn(***REMOVED***;
    var req = { sessionID: sid, sessionStore: self };
    sess = self.createSession(req, sess***REMOVED***;
    fn(null, sess***REMOVED***;
***REMOVED******REMOVED***;
};

/**
 * Create session from JSON `sess` data.
 *
 * @param {IncomingRequest} req
 * @param {Object} sess
 * @return {Session}
 * @api private
 */

Store.prototype.createSession = function(req, sess***REMOVED***{
  var expires = sess.cookie.expires
    , orig = sess.cookie.originalMaxAge;
  sess.cookie = new Cookie(sess.cookie***REMOVED***;
  if ('string' == typeof expires***REMOVED*** sess.cookie.expires = new Date(expires***REMOVED***;
  sess.cookie.originalMaxAge = orig;
  req.session = new Session(req, sess***REMOVED***;
  return req.session;
};
