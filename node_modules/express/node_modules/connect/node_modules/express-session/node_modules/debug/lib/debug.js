/**
 * Module dependencies.
 */

var tty = require('tty'***REMOVED***;

/**
 * Expose `debug(***REMOVED***` as the module.
 */

module.exports = debug;

/**
 * Enabled debuggers.
 */

var names = []
  , skips = [];

(process.env.DEBUG || ''***REMOVED***
  .split(/[\s,]+/***REMOVED***
  .forEach(function(name***REMOVED***{
    name = name.replace('*', '.*?'***REMOVED***;
    if (name[0] === '-'***REMOVED*** {
      skips.push(new RegExp('^' + name.substr(1***REMOVED*** + '$'***REMOVED******REMOVED***;
  ***REMOVED*** else {
      names.push(new RegExp('^' + name + '$'***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;

/**
 * Colors.
 */

var colors = [6, 2, 3, 4, 5, 1];

/**
 * Previous debug(***REMOVED*** call.
 */

var prev = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Is stdout a TTY? Colored output is disabled when `true`.
 */

var isatty = tty.isatty(2***REMOVED***;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function color(***REMOVED*** {
  return colors[prevColor++ % colors.length];
}

/**
 * Humanize the given `ms`.
 *
 * @param {Number} m
 * @return {String}
 * @api private
 */

function humanize(ms***REMOVED*** {
  var sec = 1000
    , min = 60 * 1000
    , hour = 60 * min;

  if (ms >= hour***REMOVED*** return (ms / hour***REMOVED***.toFixed(1***REMOVED*** + 'h';
  if (ms >= min***REMOVED*** return (ms / min***REMOVED***.toFixed(1***REMOVED*** + 'm';
  if (ms >= sec***REMOVED*** return (ms / sec | 0***REMOVED*** + 's';
  return ms + 'ms';
}

/**
 * Create a debugger with the given `name`.
 *
 * @param {String} name
 * @return {Type}
 * @api public
 */

function debug(name***REMOVED*** {
  function disabled(***REMOVED***{}
  disabled.enabled = false;

  var match = skips.some(function(re***REMOVED***{
    return re.test(name***REMOVED***;
***REMOVED******REMOVED***;

  if (match***REMOVED*** return disabled;

  match = names.some(function(re***REMOVED***{
    return re.test(name***REMOVED***;
***REMOVED******REMOVED***;

  if (!match***REMOVED*** return disabled;
  var c = color(***REMOVED***;

  function colored(fmt***REMOVED*** {
    fmt = coerce(fmt***REMOVED***;

    var curr = new Date;
    var ms = curr - (prev[name] || curr***REMOVED***;
    prev[name] = curr;

    fmt = '  \u001b[9' + c + 'm' + name + ' '
      + '\u001b[3' + c + 'm\u001b[90m'
      + fmt + '\u001b[3' + c + 'm'
      + ' +' + humanize(ms***REMOVED*** + '\u001b[0m';

    console.error.apply(this, arguments***REMOVED***;
***REMOVED***

  function plain(fmt***REMOVED*** {
    fmt = coerce(fmt***REMOVED***;

    fmt = new Date(***REMOVED***.toUTCString(***REMOVED***
      + ' ' + name + ' ' + fmt;
    console.error.apply(this, arguments***REMOVED***;
***REMOVED***

  colored.enabled = plain.enabled = true;

  return isatty || process.env.DEBUG_COLORS
    ? colored
    : plain;
}

/**
 * Coerce `val`.
 */

function coerce(val***REMOVED*** {
  if (val instanceof Error***REMOVED*** return val.stack || val.message;
  return val;
}
