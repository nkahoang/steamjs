
var connect = require('connect'***REMOVED***
  , assert = require('assert'***REMOVED***
  , request = require('supertest'***REMOVED***
  , should = require('should'***REMOVED***
  , cookieParser = require('cookie-parser'***REMOVED***
  , session = require('../'***REMOVED***

var min = 60 * 1000;

function respond(req, res***REMOVED*** {
  res.end(***REMOVED***;
}

function sid(res***REMOVED*** {
  var val = res.headers['set-cookie'];
  if (!val***REMOVED*** return '';
  return /^connect\.sid=([^;]+***REMOVED***;/.exec(val[0]***REMOVED***[1];
}

function expires(res***REMOVED*** {
  return res.headers['set-cookie'][0].match(/Expires=([^;]+***REMOVED***/***REMOVED***[1];
}

var app = connect(***REMOVED***
  .use(cookieParser(***REMOVED******REMOVED***
  .use(session({ secret: 'keyboard cat', cookie: { maxAge: min }}***REMOVED******REMOVED***
  .use(respond***REMOVED***;

describe('session(***REMOVED***', function(***REMOVED***{
  it('should export constructors', function(***REMOVED***{
    session.Session.should.be.a.Function;
    session.Store.should.be.a.Function;
    session.MemoryStore.should.be.a.Function;
***REMOVED******REMOVED***

  describe('proxy option', function(***REMOVED***{
    describe('when enabled', function(***REMOVED***{
      it('should trust X-Forwarded-Proto when string', function(done***REMOVED***{
        var app = connect(***REMOVED***
          .use(cookieParser(***REMOVED******REMOVED***
          .use(session({ secret: 'keyboard cat', proxy: true, cookie: { secure: true, maxAge: 5 }}***REMOVED******REMOVED***
          .use(respond***REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .set('X-Forwarded-Proto', 'https'***REMOVED***
        .end(function(err, res***REMOVED***{
          res.headers.should.have.property('set-cookie'***REMOVED***;
          done(***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***

      it('should trust X-Forwarded-Proto when comma-separated list', function(done***REMOVED***{
        var app = connect(***REMOVED***
          .use(cookieParser(***REMOVED******REMOVED***
          .use(session({ secret: 'keyboard cat', proxy: true, cookie: { secure: true, maxAge: 5 }}***REMOVED******REMOVED***
          .use(respond***REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .set('X-Forwarded-Proto', 'https,http'***REMOVED***
        .end(function(err, res***REMOVED***{
          res.headers.should.have.property('set-cookie'***REMOVED***;
          done(***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***

    describe('when disabled', function(***REMOVED***{
      it('should not trust X-Forwarded-Proto', function(done***REMOVED***{
        var app = connect(***REMOVED***
          .use(cookieParser(***REMOVED******REMOVED***
          .use(session({ secret: 'keyboard cat', cookie: { secure: true, maxAge: min }}***REMOVED******REMOVED***
          .use(respond***REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .set('X-Forwarded-Proto', 'https'***REMOVED***
        .end(function(err, res***REMOVED***{
          res.headers.should.not.have.property('set-cookie'***REMOVED***;
          done(***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***

  describe('key option', function(***REMOVED***{
    it('should default to "connect.sid"', function(done***REMOVED***{
      request(app***REMOVED***
      .get('/'***REMOVED***
      .end(function(err, res***REMOVED***{
        res.headers['set-cookie'].should.have.length(1***REMOVED***;
        res.headers['set-cookie'][0].should.match(/^connect\.sid/***REMOVED***;
        done(***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***

    it('should allow overriding', function(done***REMOVED***{
      var app = connect(***REMOVED***
        .use(cookieParser(***REMOVED******REMOVED***
        .use(session({ secret: 'keyboard cat', key: 'sid', cookie: { maxAge: min }}***REMOVED******REMOVED***
        .use(respond***REMOVED***;

      request(app***REMOVED***
      .get('/'***REMOVED***
      .end(function(err, res***REMOVED***{
        res.headers['set-cookie'].should.have.length(1***REMOVED***;
        res.headers['set-cookie'][0].should.match(/^sid/***REMOVED***;
        done(***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***

  it('should retain the sid', function(done***REMOVED***{
    var n = 0;

    var app = connect(***REMOVED***
      .use(cookieParser(***REMOVED******REMOVED***
      .use(session({ secret: 'keyboard cat', cookie: { maxAge: min }}***REMOVED******REMOVED***
      .use(function(req, res***REMOVED***{
        req.session.count = ++n;
        res.end(***REMOVED***;
    ***REMOVED******REMOVED***

    request(app***REMOVED***
    .get('/'***REMOVED***
    .end(function(err, res***REMOVED***{

      var id = sid(res***REMOVED***;
      request(app***REMOVED***
      .get('/'***REMOVED***
      .set('Cookie', 'connect.sid=' + id***REMOVED***
      .end(function(err, res***REMOVED***{
        sid(res***REMOVED***.should.equal(id***REMOVED***;
        done(***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***

  describe('when an invalid sid is given', function(***REMOVED***{
    it('should generate a new one', function(done***REMOVED***{
      request(app***REMOVED***
      .get('/'***REMOVED***
      .set('Cookie', 'connect.sid=foobarbaz'***REMOVED***
      .end(function(err, res***REMOVED***{
        sid(res***REMOVED***.should.not.equal('foobarbaz'***REMOVED***;
        done(***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED******REMOVED***

  it('should issue separate sids', function(done***REMOVED***{
    var n = 0;

    var app = connect(***REMOVED***
      .use(cookieParser(***REMOVED******REMOVED***
      .use(session({ secret: 'keyboard cat', cookie: { maxAge: min }}***REMOVED******REMOVED***
      .use(function(req, res***REMOVED***{
        req.session.count = ++n;
        res.end(***REMOVED***;
    ***REMOVED******REMOVED***

    request(app***REMOVED***
    .get('/'***REMOVED***
    .end(function(err, res***REMOVED***{

      var id = sid(res***REMOVED***;
      request(app***REMOVED***
      .get('/'***REMOVED***
      .set('Cookie', 'connect.sid=' + id***REMOVED***
      .end(function(err, res***REMOVED***{
        sid(res***REMOVED***.should.equal(id***REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .end(function(err, res***REMOVED***{
          sid(res***REMOVED***.should.not.equal(id***REMOVED***;
          done(***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***

  describe('req.session', function(***REMOVED***{
    it('should persist', function(done***REMOVED***{
      var app = connect(***REMOVED***
        .use(cookieParser(***REMOVED******REMOVED***
        .use(session({ secret: 'keyboard cat', cookie: { maxAge: min, httpOnly: false }}***REMOVED******REMOVED***
        .use(function(req, res, next***REMOVED***{
          // checks that cookie options persisted
          req.session.cookie.httpOnly.should.equal(false***REMOVED***;

          req.session.count = req.session.count || 0;
          req.session.count++;
          res.end(req.session.count.toString(***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

      request(app***REMOVED***
      .get('/'***REMOVED***
      .end(function(err, res***REMOVED***{
        res.text.should.equal('1'***REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .set('Cookie', 'connect.sid=' + sid(res***REMOVED******REMOVED***
        .end(function(err, res***REMOVED***{
          res.text.should.equal('2'***REMOVED***;
          done(***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***

    it('should only set-cookie when modified', function(done***REMOVED***{
      var modify = true;

      var app = connect(***REMOVED***
        .use(cookieParser(***REMOVED******REMOVED***
        .use(session({ secret: 'keyboard cat', cookie: { maxAge: min }}***REMOVED******REMOVED***
        .use(function(req, res, next***REMOVED***{
          if (modify***REMOVED*** {
            req.session.count = req.session.count || 0;
            req.session.count++;
        ***REMOVED***
          res.end(req.session.count.toString(***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

      request(app***REMOVED***
      .get('/'***REMOVED***
      .end(function(err, res***REMOVED***{
        res.text.should.equal('1'***REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .set('Cookie', 'connect.sid=' + sid(res***REMOVED******REMOVED***
        .end(function(err, res***REMOVED***{
          var id = sid(res***REMOVED***;
          res.text.should.equal('2'***REMOVED***;
          modify = false;

          request(app***REMOVED***
          .get('/'***REMOVED***
          .set('Cookie', 'connect.sid=' + sid(res***REMOVED******REMOVED***
          .end(function(err, res***REMOVED***{
            sid(res***REMOVED***.should.be.empty;
            res.text.should.equal('2'***REMOVED***;
            modify = true;

            request(app***REMOVED***
            .get('/'***REMOVED***
            .set('Cookie', 'connect.sid=' + id***REMOVED***
            .end(function(err, res***REMOVED***{
              sid(res***REMOVED***.should.not.be.empty;
              res.text.should.equal('3'***REMOVED***;
              done(***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***

    describe('.destroy(***REMOVED***', function(***REMOVED***{
      it('should destroy the previous session', function(done***REMOVED***{
        var app = connect(***REMOVED***
          .use(cookieParser(***REMOVED******REMOVED***
          .use(session({ secret: 'keyboard cat' }***REMOVED******REMOVED***
          .use(function(req, res, next***REMOVED***{
            req.session.destroy(function(err***REMOVED***{
              if (err***REMOVED*** throw err;
              assert(!req.session, 'req.session after destroy'***REMOVED***;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED******REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .end(function(err, res***REMOVED***{
          res.headers.should.not.have.property('set-cookie'***REMOVED***;
          done(***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***

    describe('.regenerate(***REMOVED***', function(***REMOVED***{
      it('should destroy/replace the previous session', function(done***REMOVED***{
        var app = connect(***REMOVED***
          .use(cookieParser(***REMOVED******REMOVED***
          .use(session({ secret: 'keyboard cat', cookie: { maxAge: min }}***REMOVED******REMOVED***
          .use(function(req, res, next***REMOVED***{
            var id = req.session.id;
            req.session.regenerate(function(err***REMOVED***{
              if (err***REMOVED*** throw err;
              id.should.not.equal(req.session.id***REMOVED***;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED******REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .end(function(err, res***REMOVED***{
          var id = sid(res***REMOVED***;

          request(app***REMOVED***
          .get('/'***REMOVED***
          .set('Cookie', 'connect.sid=' + id***REMOVED***
          .end(function(err, res***REMOVED***{
            sid(res***REMOVED***.should.not.equal(''***REMOVED***;
            sid(res***REMOVED***.should.not.equal(id***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***

    describe('.cookie', function(***REMOVED***{
      describe('.*', function(***REMOVED***{
        it('should serialize as parameters', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', proxy: true, cookie: { maxAge: min }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              req.session.cookie.httpOnly = false;
              req.session.cookie.secure = true;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/'***REMOVED***
          .set('X-Forwarded-Proto', 'https'***REMOVED***
          .end(function(err, res***REMOVED***{
            res.headers['set-cookie'][0].should.not.include('HttpOnly'***REMOVED***;
            res.headers['set-cookie'][0].should.include('Secure'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***

        it('should default to a browser-session length cookie', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', cookie: { path: '/admin' }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/admin'***REMOVED***
          .end(function(err, res***REMOVED***{
            var cookie = res.headers['set-cookie'][0];
            cookie.should.not.include('Expires'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***

        it('should Set-Cookie only once for browser-session cookies', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', cookie: { path: '/admin' }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/admin/foo'***REMOVED***
          .end(function(err, res***REMOVED***{
            res.headers.should.have.property('set-cookie'***REMOVED***;

            request(app***REMOVED***
            .get('/admin'***REMOVED***
            .set('Cookie', 'connect.sid=' + sid(res***REMOVED******REMOVED***
            .end(function(err, res***REMOVED***{
              res.headers.should.not.have.property('set-cookie'***REMOVED***;
              done(***REMOVED***;
          ***REMOVED******REMOVED***
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***

        it('should override defaults', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', cookie: { path: '/admin', httpOnly: false, secure: true, maxAge: 5000 }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              req.session.cookie.secure = false;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/admin'***REMOVED***
          .end(function(err, res***REMOVED***{
            var cookie = res.headers['set-cookie'][0];
            cookie.should.not.include('HttpOnly'***REMOVED***;
            cookie.should.not.include('Secure'***REMOVED***;
            cookie.should.include('Path=/admin'***REMOVED***;
            cookie.should.include('Expires'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***

      describe('.secure', function(***REMOVED***{
        it('should not set-cookie when insecure', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat' }***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              req.session.cookie.secure = true;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/'***REMOVED***
          .end(function(err, res***REMOVED***{
            res.headers.should.not.have.property('set-cookie'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***

      describe('when the pathname does not match cookie.path', function(***REMOVED***{
        it('should not set-cookie', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', cookie: { path: '/foo/bar' }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              if (!req.session***REMOVED*** {
                return res.end(***REMOVED***;
            ***REMOVED***
              req.session.foo = Math.random(***REMOVED***;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/'***REMOVED***
          .end(function(err, res***REMOVED***{
            res.status.should.equal(200***REMOVED***;
            res.headers.should.not.have.property('set-cookie'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***

        it('should not set-cookie even for FQDN', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', cookie: { path: '/foo/bar' }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              if (!req.session***REMOVED*** {
                return res.end(***REMOVED***;
            ***REMOVED***

              req.session.foo = Math.random(***REMOVED***;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/'***REMOVED***
          .set('host', 'http://foo/bar'***REMOVED***
          .end(function(err, res***REMOVED***{
            res.status.should.equal(200***REMOVED***;
            res.headers.should.not.have.property('set-cookie'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***

      describe('when the pathname does match cookie.path', function(***REMOVED***{
        it('should set-cookie', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', cookie: { path: '/foo/bar' }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              req.session.foo = Math.random(***REMOVED***;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/foo/bar/baz'***REMOVED***
          .end(function(err, res***REMOVED***{
            res.headers.should.have.property('set-cookie'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***

        it('should set-cookie even for FQDN', function(done***REMOVED***{
          var app = connect(***REMOVED***
            .use(cookieParser(***REMOVED******REMOVED***
            .use(session({ secret: 'keyboard cat', cookie: { path: '/foo/bar' }}***REMOVED******REMOVED***
            .use(function(req, res, next***REMOVED***{
              req.session.foo = Math.random(***REMOVED***;
              res.end(***REMOVED***;
          ***REMOVED******REMOVED***;

          request(app***REMOVED***
          .get('/foo/bar/baz'***REMOVED***
          .set('host', 'http://example.com'***REMOVED***
          .end(function(err, res***REMOVED***{
            res.status.should.equal(200***REMOVED***;
            res.headers.should.have.property('set-cookie'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***

      describe('.maxAge', function(***REMOVED***{
        var id;
        var app = connect(***REMOVED***
          .use(cookieParser(***REMOVED******REMOVED***
          .use(session({ secret: 'keyboard cat', cookie: { maxAge: 2000 }}***REMOVED******REMOVED***
          .use(function(req, res, next***REMOVED***{
            req.session.count = req.session.count || 0;
            req.session.count++;
            if (req.session.count == 2***REMOVED*** req.session.cookie.maxAge = 5000;
            if (req.session.count == 3***REMOVED*** req.session.cookie.maxAge = 3000000000;
            res.end(req.session.count.toString(***REMOVED******REMOVED***;
        ***REMOVED******REMOVED***;

        it('should set relative in milliseconds', function(done***REMOVED***{
          request(app***REMOVED***
          .get('/'***REMOVED***
          .end(function(err, res***REMOVED***{
            var a = new Date(expires(res***REMOVED******REMOVED***
              , b = new Date;

            id = sid(res***REMOVED***;

            a.getYear(***REMOVED***.should.equal(b.getYear(***REMOVED******REMOVED***;
            a.getMonth(***REMOVED***.should.equal(b.getMonth(***REMOVED******REMOVED***;
            a.getDate(***REMOVED***.should.equal(b.getDate(***REMOVED******REMOVED***;
            a.getSeconds(***REMOVED***.should.not.equal(b.getSeconds(***REMOVED******REMOVED***;
            var delta = a.valueOf(***REMOVED*** - b.valueOf(***REMOVED***;
            (delta > 1000 && delta < 2000***REMOVED***.should.be.ok;
            res.text.should.equal('1'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should modify cookie when changed', function(done***REMOVED***{
          request(app***REMOVED***
          .get('/'***REMOVED***
          .set('Cookie', 'connect.sid=' + id***REMOVED***
          .end(function(err, res***REMOVED***{
            var a = new Date(expires(res***REMOVED******REMOVED***
              , b = new Date;

            id = sid(res***REMOVED***;

            a.getYear(***REMOVED***.should.equal(b.getYear(***REMOVED******REMOVED***;
            a.getMonth(***REMOVED***.should.equal(b.getMonth(***REMOVED******REMOVED***;
            a.getSeconds(***REMOVED***.should.not.equal(b.getSeconds(***REMOVED******REMOVED***;
            var delta = a.valueOf(***REMOVED*** - b.valueOf(***REMOVED***;
            (delta > 4000 && delta < 5000***REMOVED***.should.be.ok;
            res.text.should.equal('2'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

        it('should modify cookie when changed to large value', function(done***REMOVED***{
          request(app***REMOVED***
          .get('/'***REMOVED***
          .set('Cookie', 'connect.sid=' + id***REMOVED***
          .end(function(err, res***REMOVED***{
            var a = new Date(expires(res***REMOVED******REMOVED***
              , b = new Date;

            id = sid(res***REMOVED***;

            var delta = a.valueOf(***REMOVED*** - b.valueOf(***REMOVED***;
            (delta > 2999999000 && delta < 3000000000***REMOVED***.should.be.ok;
            res.text.should.equal('3'***REMOVED***;
            done(***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***

      describe('.expires', function(***REMOVED***{
        describe('when given a Date', function(***REMOVED***{
          it('should set absolute', function(done***REMOVED***{
            var app = connect(***REMOVED***
              .use(cookieParser(***REMOVED******REMOVED***
              .use(session({ secret: 'keyboard cat' }***REMOVED******REMOVED***
              .use(function(req, res, next***REMOVED***{
                req.session.cookie.expires = new Date(0***REMOVED***;
                res.end(***REMOVED***;
            ***REMOVED******REMOVED***;

            request(app***REMOVED***
            .get('/'***REMOVED***
            .end(function(err, res***REMOVED***{
              expires(res***REMOVED***.should.equal('Thu, 01 Jan 1970 00:00:00 GMT'***REMOVED***;
              done(***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***

        describe('when null', function(***REMOVED***{
          it('should be a browser-session cookie', function(done***REMOVED***{
            var app = connect(***REMOVED***
              .use(cookieParser(***REMOVED******REMOVED***
              .use(session({ secret: 'keyboard cat' }***REMOVED******REMOVED***
              .use(function(req, res, next***REMOVED***{
                req.session.cookie.expires = null;
                res.end(***REMOVED***;
            ***REMOVED******REMOVED***;

            request(app***REMOVED***
            .get('/'***REMOVED***
            .end(function(err, res***REMOVED***{
              res.headers['set-cookie'][0].should.not.include('Expires='***REMOVED***;
              done(***REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED******REMOVED***
      ***REMOVED******REMOVED***
    ***REMOVED******REMOVED***
  ***REMOVED******REMOVED***

    it('should support req.signedCookies', function(done***REMOVED***{
      var app = connect(***REMOVED***
        .use(cookieParser('keyboard cat'***REMOVED******REMOVED***
        .use(session(***REMOVED******REMOVED***
        .use(function(req, res, next***REMOVED***{
          req.session.count = req.session.count || 0;
          req.session.count++;
          res.end(req.session.count.toString(***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;

      request(app***REMOVED***
      .get('/'***REMOVED***
      .end(function(err, res***REMOVED***{
        res.text.should.equal('1'***REMOVED***;

        request(app***REMOVED***
        .get('/'***REMOVED***
        .set('Cookie', 'connect.sid=' + sid(res***REMOVED******REMOVED***
        .end(function(err, res***REMOVED***{
          res.text.should.equal('2'***REMOVED***;
          done(***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***

***REMOVED******REMOVED***
}***REMOVED***
