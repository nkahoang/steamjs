/*!
 * Connect - csrf
 * Copyright(c***REMOVED*** 2011 Sencha Inc.
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var uid = require('uid2'***REMOVED***;
var crypto = require('crypto'***REMOVED***;

/**
 * Anti CSRF:
 *
 * CSRF protection middleware.
 *
 * This middleware adds a `req.csrfToken(***REMOVED***` function to make a token
 * which should be added to requests which mutate
 * state, within a hidden form field, query-string etc. This
 * token is validated against the visitor's session.
 *
 * The default `value` function checks `req.body` generated
 * by the `bodyParser(***REMOVED***` middleware, `req.query` generated
 * by `query(***REMOVED***`, and the "X-CSRF-Token" header field.
 *
 * This middleware requires session support, thus should be added
 * somewhere _below_ `session(***REMOVED***` and `cookieParser(***REMOVED***`.
 *
 * Options:
 *
 *    - `value` a function accepting the request, returning the token
 *
 * @param {Object} options
 * @api public
 */

module.exports = function csrf(options***REMOVED*** {
  options = options || {};
  var value = options.value || defaultValue;

  return function(req, res, next***REMOVED***{

    // already have one
    var secret = req.session.csrfSecret;
    if (secret***REMOVED*** return createToken(secret***REMOVED***;

    // generate secret
    uid(24, function(err, secret***REMOVED***{
      if (err***REMOVED*** return next(err***REMOVED***;
      req.session.csrfSecret = secret;
      createToken(secret***REMOVED***;
  ***REMOVED******REMOVED***;

    // generate the token
    function createToken(secret***REMOVED*** {
      var token;

      // lazy-load token
      req.csrfToken = function csrfToken(***REMOVED*** {
        return token || (token = saltedToken(secret***REMOVED******REMOVED***;
    ***REMOVED***;

      // ignore these methods
      if ('GET' == req.method || 'HEAD' == req.method || 'OPTIONS' == req.method***REMOVED*** return next(***REMOVED***;

      // determine user-submitted value
      var val = value(req***REMOVED***;

      // check
      if (!checkToken(val, secret***REMOVED******REMOVED*** {
        var err = new Error('invalid csrf token'***REMOVED***;
        err.status = 403;
        next(err***REMOVED***;
        return;
    ***REMOVED***

      next(***REMOVED***;
  ***REMOVED***
***REMOVED***
};

/**
 * Default value function, checking the `req.body`
 * and `req.query` for the CSRF token.
 *
 * @param {IncomingMessage} req
 * @return {String}
 * @api private
 */

function defaultValue(req***REMOVED*** {
  return (req.body && req.body._csrf***REMOVED***
    || (req.query && req.query._csrf***REMOVED***
    || (req.headers['x-csrf-token']***REMOVED***
    || (req.headers['x-xsrf-token']***REMOVED***;
}

/**
 * Return salted token.
 *
 * @param {String} secret
 * @return {String}
 * @api private
 */

function saltedToken(secret***REMOVED*** {
  return createToken(generateSalt(10***REMOVED***, secret***REMOVED***;
}

/**
 * Creates a CSRF token from a given salt and secret.
 *
 * @param {String} salt (should be 10 characters***REMOVED***
 * @param {String} secret
 * @return {String}
 * @api private
 */

function createToken(salt, secret***REMOVED*** {
  return salt + crypto
    .createHash('sha1'***REMOVED***
    .update(salt + secret***REMOVED***
    .digest('base64'***REMOVED***;
}

/**
 * Checks if a given CSRF token matches the given secret.
 *
 * @param {String} token
 * @param {String} secret
 * @return {Boolean}
 * @api private
 */

function checkToken(token, secret***REMOVED*** {
  if ('string' != typeof token***REMOVED*** return false;
  return token === createToken(token.slice(0, 10***REMOVED***, secret***REMOVED***;
}

/**
 * Generates a random salt, using a fast non-blocking PRNG (Math.random(***REMOVED******REMOVED***.
 *
 * @param {Number} length
 * @return {String}
 * @api private
 */

function generateSalt(length***REMOVED*** {
  var i, r = [];
  for (i = 0; i < length; ++i***REMOVED*** {
    r.push(SALTCHARS[Math.floor(Math.random(***REMOVED*** * SALTCHARS.length***REMOVED***]***REMOVED***;
***REMOVED***
  return r.join(''***REMOVED***;
}

var SALTCHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
