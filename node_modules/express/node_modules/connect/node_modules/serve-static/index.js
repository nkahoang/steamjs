/*!
 * Connect - static
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * Copyright(c***REMOVED*** 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var send = require('send'***REMOVED***;
var url = require('url'***REMOVED***;

/**
 * Static:
 *
 *   Static file server with the given `root` path.
 *
 * Examples:
 *
 *     var oneDay = 86400000;
 *     var serveStatic = require('serve-static'***REMOVED***;
 *
 *     connect(***REMOVED***
 *       .use(serveStatic(__dirname + '/public'***REMOVED******REMOVED***
 *
 *     connect(***REMOVED***
 *       .use(serveStatic(__dirname + '/public', { maxAge: oneDay }***REMOVED******REMOVED***
 *
 * Options:
 *
 *    - `maxAge`     Browser cache maxAge in milliseconds. defaults to 0
 *    - `hidden`     Allow transfer of hidden files. defaults to false
 *    - `redirect`   Redirect to trailing "/" when the pathname is a dir. defaults to true
 *    - `index`      Default file name, defaults to 'index.html'
 *
 * @param {String} root
 * @param {Object} options
 * @return {Function}
 * @api public
 */

exports = module.exports = function(root, options***REMOVED***{
  options = options || {};

  // root required
  if (!root***REMOVED*** throw new TypeError('root path required'***REMOVED***;

  // default redirect
  var redirect = false !== options.redirect;

  return function staticMiddleware(req, res, next***REMOVED*** {
    if ('GET' != req.method && 'HEAD' != req.method***REMOVED*** return next(***REMOVED***;
    var originalUrl = url.parse(req.originalUrl***REMOVED***;
    var path = parse(req***REMOVED***.pathname;

    if (path == '/' && originalUrl.pathname[originalUrl.pathname.length - 1] != '/'***REMOVED*** {
      return directory(***REMOVED***;
  ***REMOVED***

    function directory(***REMOVED*** {
      if (!redirect***REMOVED*** return next(***REMOVED***;
      var target;
      originalUrl.pathname += '/';
      target = url.format(originalUrl***REMOVED***;
      res.statusCode = 303;
      res.setHeader('Location', target***REMOVED***;
      res.end('Redirecting to ' + escape(target***REMOVED******REMOVED***;
  ***REMOVED***

    function error(err***REMOVED*** {
      if (404 == err.status***REMOVED*** return next(***REMOVED***;
      next(err***REMOVED***;
  ***REMOVED***

    send(req, path***REMOVED***
      .maxage(options.maxAge || 0***REMOVED***
      .root(root***REMOVED***
      .index(options.index || 'index.html'***REMOVED***
      .hidden(options.hidden***REMOVED***
      .on('error', error***REMOVED***
      .on('directory', directory***REMOVED***
      .pipe(res***REMOVED***;
***REMOVED***;
};

/**
 * Expose mime module.
 *
 * If you wish to extend the mime table use this
 * reference to the "mime" module in the npm registry.
 */

exports.mime = send.mime;

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

function escape(html***REMOVED*** {
  return String(html***REMOVED***
    .replace(/&(?!\w+;***REMOVED***/g, '&amp;'***REMOVED***
    .replace(/</g, '&lt;'***REMOVED***
    .replace(/>/g, '&gt;'***REMOVED***
    .replace(/"/g, '&quot;'***REMOVED***;
};

/**
 * Parse the `req` url.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @api private
 */

function parse(req***REMOVED*** {
  var parsed = url.parse(req.url***REMOVED***;

  if (parsed.auth && !parsed.protocol && ~parsed.href.indexOf('//'***REMOVED******REMOVED*** {
    // This parses pathnames, and a strange pathname like //r@e should work
    parsed = url.parse(req.url.replace(/@/g, '%40'***REMOVED******REMOVED***;
***REMOVED***

  return parsed;
};
