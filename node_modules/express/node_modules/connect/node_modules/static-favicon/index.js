/*!
 * Connect - favicon
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var fs = require('fs'***REMOVED***;
var crypto = require('crypto'***REMOVED***;

/**
 * Favicon:
 *
 * By default serves the connect favicon, or the favicon
 * located by the given `path`.
 *
 * Options:
 *
 *   - `maxAge`  cache-control max-age directive, defaulting to 1 day
 *
 * Examples:
 *
 *   Serve default favicon:
 *
 *     connect(***REMOVED***
 *       .use(connect.favicon(***REMOVED******REMOVED***
 *
 *   Serve favicon before logging for brevity:
 *
 *     connect(***REMOVED***
 *       .use(connect.favicon(***REMOVED******REMOVED***
 *       .use(connect.logger('dev'***REMOVED******REMOVED***
 *
 *   Serve custom favicon:
 *
 *     connect(***REMOVED***
 *       .use(connect.favicon('public/favicon.ico'***REMOVED******REMOVED***
 *
 * @param {String} path
 * @param {Object} options
 * @return {Function}
 * @api public
 */

module.exports = function favicon(path, options***REMOVED***{
  var options = options || {}
    , path = path || __dirname + '/../public/favicon.ico'
    , maxAge = options.maxAge || 86400000
    , icon; // favicon cache

  return function favicon(req, res, next***REMOVED***{
    if ('/favicon.ico' == req.url***REMOVED*** {
      if (icon***REMOVED*** {
        res.writeHead(200, icon.headers***REMOVED***;
        res.end(icon.body***REMOVED***;
    ***REMOVED*** else {
        fs.readFile(path, function(err, buf***REMOVED***{
          if (err***REMOVED*** return next(err***REMOVED***;
          icon = {
            headers: {
                'Content-Type': 'image/x-icon'
              , 'Content-Length': buf.length
              , 'ETag': '"' + md5(buf***REMOVED*** + '"'
              , 'Cache-Control': 'public, max-age=' + (maxAge / 1000***REMOVED***
          ***REMOVED***,
            body: buf
        ***REMOVED***;
          res.writeHead(200, icon.headers***REMOVED***;
          res.end(icon.body***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED*** else {
      next(***REMOVED***;
  ***REMOVED***
***REMOVED***;
};

function md5(str, encoding***REMOVED***{
  return crypto
    .createHash('md5'***REMOVED***
    .update(str, 'utf8'***REMOVED***
    .digest(encoding || 'hex'***REMOVED***;
};
