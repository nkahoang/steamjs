var assert = require('assert'***REMOVED***
  , Form = require('../'***REMOVED***.Form
  , boundary = '-----------------------------168072824752491622650073'
  , mb = 100
  , buffer = createMultipartBuffer(boundary, mb * 1024 * 1024***REMOVED***

var callbacks = {
  partBegin: -1,
  partEnd: -1,
  headerField: -1,
  headerValue: -1,
  partData: -1,
  end: -1,
};

var form = new Form({ boundary: boundary }***REMOVED***;

hijack('onParseHeaderField', function(***REMOVED*** {
  callbacks.headerField++;
}***REMOVED***;

hijack('onParseHeaderValue', function(***REMOVED*** {
  callbacks.headerValue++;
}***REMOVED***;

hijack('onParsePartBegin', function(***REMOVED*** {
  callbacks.partBegin++;
}***REMOVED***;

hijack('onParsePartData', function(***REMOVED*** {
  callbacks.partData++;
}***REMOVED***;

hijack('onParsePartEnd', function(***REMOVED*** {
  callbacks.partEnd++;
}***REMOVED***;

form.on('finish', function(***REMOVED*** {
  callbacks.end++;
}***REMOVED***;

var start = new Date(***REMOVED***;
form.write(buffer, function(err***REMOVED*** {
  var duration = new Date(***REMOVED*** - start;
  assert.ifError(err***REMOVED***;
  var mbPerSec = (mb / (duration / 1000***REMOVED******REMOVED***.toFixed(2***REMOVED***;
  console.log(mbPerSec+' mb/sec'***REMOVED***;
}***REMOVED***;

process.on('exit', function(***REMOVED*** {
  for (var k in callbacks***REMOVED*** {
    assert.equal(0, callbacks[k], k+' count off by '+callbacks[k]***REMOVED***;
***REMOVED***
}***REMOVED***;

function createMultipartBuffer(boundary, size***REMOVED*** {
  var head =
        '--'+boundary+'\r\n' +
        'content-disposition: form-data; name="field1"\r\n' +
        '\r\n'
    , tail = '\r\n--'+boundary+'--\r\n'
    , buffer = new Buffer(size***REMOVED***;

  buffer.write(head, 'ascii', 0***REMOVED***;
  buffer.write(tail, 'ascii', buffer.length - tail.length***REMOVED***;
  return buffer;
}

function hijack(name, fn***REMOVED*** {
  var oldFn = form[name];
  form[name] = function(***REMOVED*** {
    fn(***REMOVED***;
    return oldFn.apply(this, arguments***REMOVED***;
***REMOVED***;
}

