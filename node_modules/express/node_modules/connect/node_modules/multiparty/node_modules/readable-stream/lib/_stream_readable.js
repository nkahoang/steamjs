// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"***REMOVED***, to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray'***REMOVED***;
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer'***REMOVED***.Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events'***REMOVED***.EventEmitter;

/*<replacement>*/
if (!EE.listenerCount***REMOVED*** EE.listenerCount = function(emitter, type***REMOVED*** {
  return emitter.listeners(type***REMOVED***.length;
};
/*</replacement>*/

var Stream = require('stream'***REMOVED***;

/*<replacement>*/
var util = require('core-util-is'***REMOVED***;
util.inherits = require('inherits'***REMOVED***;
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util'***REMOVED***;
if (debug && debug.debuglog***REMOVED*** {
  debug = debug.debuglog('stream'***REMOVED***;
} else {
  debug = function (***REMOVED*** {};
}
/*</replacement>*/


util.inherits(Readable, Stream***REMOVED***;

function ReadableState(options, stream***REMOVED*** {
  options = options || {};

  // the point at which it stops calling _read(***REMOVED*** to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0***REMOVED*** ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n***REMOVED*** ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read(***REMOVED***ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe(***REMOVED***s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding***REMOVED*** {
    if (!StringDecoder***REMOVED***
      StringDecoder = require('string_decoder/'***REMOVED***.StringDecoder;
    this.decoder = new StringDecoder(options.encoding***REMOVED***;
    this.encoding = options.encoding;
***REMOVED***
}

function Readable(options***REMOVED*** {
  if (!(this instanceof Readable***REMOVED******REMOVED***
    return new Readable(options***REMOVED***;

  this._readableState = new ReadableState(options, this***REMOVED***;

  // legacy
  this.readable = true;

  Stream.call(this***REMOVED***;
}

// Manually shove something into the read(***REMOVED*** buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write(***REMOVED*** returns true if you should
// write(***REMOVED*** some more.
Readable.prototype.push = function(chunk, encoding***REMOVED*** {
  var state = this._readableState;

  if (util.isString(chunk***REMOVED*** && !state.objectMode***REMOVED*** {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding***REMOVED*** {
      chunk = new Buffer(chunk, encoding***REMOVED***;
      encoding = '';
  ***REMOVED***
***REMOVED***

  return readableAddChunk(this, state, chunk, encoding, false***REMOVED***;
};

// Unshift should *always* be something directly out of read(***REMOVED***
Readable.prototype.unshift = function(chunk***REMOVED*** {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true***REMOVED***;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront***REMOVED*** {
  var er = chunkInvalid(state, chunk***REMOVED***;
  if (er***REMOVED*** {
    stream.emit('error', er***REMOVED***;
***REMOVED*** else if (util.isNullOrUndefined(chunk***REMOVED******REMOVED*** {
    state.reading = false;
    if (!state.ended***REMOVED***
      onEofChunk(stream, state***REMOVED***;
***REMOVED*** else if (state.objectMode || chunk && chunk.length > 0***REMOVED*** {
    if (state.ended && !addToFront***REMOVED*** {
      var e = new Error('stream.push(***REMOVED*** after EOF'***REMOVED***;
      stream.emit('error', e***REMOVED***;
  ***REMOVED*** else if (state.endEmitted && addToFront***REMOVED*** {
      var e = new Error('stream.unshift(***REMOVED*** after end event'***REMOVED***;
      stream.emit('error', e***REMOVED***;
  ***REMOVED*** else {
      if (state.decoder && !addToFront && !encoding***REMOVED***
        chunk = state.decoder.write(chunk***REMOVED***;

      if (!addToFront***REMOVED***
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync***REMOVED*** {
        stream.emit('data', chunk***REMOVED***;
        stream.read(0***REMOVED***;
    ***REMOVED*** else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront***REMOVED***
          state.buffer.unshift(chunk***REMOVED***;
        else
          state.buffer.push(chunk***REMOVED***;

        if (state.needReadable***REMOVED***
          emitReadable(stream***REMOVED***;
    ***REMOVED***

      maybeReadMore(stream, state***REMOVED***;
  ***REMOVED***
***REMOVED*** else if (!addToFront***REMOVED*** {
    state.reading = false;
***REMOVED***

  return needMoreData(state***REMOVED***;
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push(***REMOVED*** triggered a
// readable event, and the user called read(largeNumber***REMOVED*** such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state***REMOVED*** {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0***REMOVED***;
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc***REMOVED*** {
  if (!StringDecoder***REMOVED***
    StringDecoder = require('string_decoder/'***REMOVED***.StringDecoder;
  this._readableState.decoder = new StringDecoder(enc***REMOVED***;
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n***REMOVED*** {
  if (n >= MAX_HWM***REMOVED*** {
    n = MAX_HWM;
***REMOVED*** else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1***REMOVED*** n |= n >> p;
    n++;
***REMOVED***
  return n;
}

function howMuchToRead(n, state***REMOVED*** {
  if (state.length === 0 && state.ended***REMOVED***
    return 0;

  if (state.objectMode***REMOVED***
    return n === 0 ? 0 : 1;

  if (isNaN(n***REMOVED*** || util.isNull(n***REMOVED******REMOVED*** {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length***REMOVED***
      return state.buffer[0].length;
    else
      return state.length;
***REMOVED***

  if (n <= 0***REMOVED***
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark***REMOVED***
    state.highWaterMark = roundUpToNextPowerOf2(n***REMOVED***;

  // don't have that much.  return null, unless we've ended.
  if (n > state.length***REMOVED*** {
    if (!state.ended***REMOVED*** {
      state.needReadable = true;
      return 0;
  ***REMOVED*** else
      return state.length;
***REMOVED***

  return n;
}

// you can override either this method, or the async _read(n***REMOVED*** below.
Readable.prototype.read = function(n***REMOVED*** {
  debug('read', n***REMOVED***;
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n***REMOVED*** || n > 0***REMOVED***
    state.emittedReadable = false;

  // if we're doing read(0***REMOVED*** to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended***REMOVED******REMOVED*** {
    debug('read: emitReadable', state.length, state.ended***REMOVED***;
    if (state.length === 0 && state.ended***REMOVED***
      endReadable(this***REMOVED***;
    else
      emitReadable(this***REMOVED***;
    return null;
***REMOVED***

  n = howMuchToRead(n, state***REMOVED***;

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended***REMOVED*** {
    if (state.length === 0***REMOVED***
      endReadable(this***REMOVED***;
    return null;
***REMOVED***

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet***REMOVED***, so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead***REMOVED***;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark***REMOVED*** {
    doRead = true;
    debug('length less than watermark', doRead***REMOVED***;
***REMOVED***

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading***REMOVED*** {
    doRead = false;
    debug('reading or ended', doRead***REMOVED***;
***REMOVED***

  if (doRead***REMOVED*** {
    debug('do read'***REMOVED***;
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0***REMOVED***
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark***REMOVED***;
    state.sync = false;
***REMOVED***

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading***REMOVED***
    n = howMuchToRead(nOrig, state***REMOVED***;

  var ret;
  if (n > 0***REMOVED***
    ret = fromList(n, state***REMOVED***;
  else
    ret = null;

  if (util.isNull(ret***REMOVED******REMOVED*** {
    state.needReadable = true;
    n = 0;
***REMOVED***

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended***REMOVED***
    state.needReadable = true;

  // If we tried to read(***REMOVED*** past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0***REMOVED***
    endReadable(this***REMOVED***;

  if (!util.isNull(ret***REMOVED******REMOVED***
    this.emit('data', ret***REMOVED***;

  return ret;
};

function chunkInvalid(state, chunk***REMOVED*** {
  var er = null;
  if (!util.isBuffer(chunk***REMOVED*** &&
      !util.isString(chunk***REMOVED*** &&
      !util.isNullOrUndefined(chunk***REMOVED*** &&
      !state.objectMode***REMOVED*** {
    er = new TypeError('Invalid non-string/buffer chunk'***REMOVED***;
***REMOVED***
  return er;
}


function onEofChunk(stream, state***REMOVED*** {
  if (state.decoder && !state.ended***REMOVED*** {
    var chunk = state.decoder.end(***REMOVED***;
    if (chunk && chunk.length***REMOVED*** {
      state.buffer.push(chunk***REMOVED***;
      state.length += state.objectMode ? 1 : chunk.length;
  ***REMOVED***
***REMOVED***
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream***REMOVED***;
}

// Don't emit readable right away in sync mode, because this can trigger
// another read(***REMOVED*** call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream***REMOVED*** {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable***REMOVED*** {
    debug('emitReadable', state.flowing***REMOVED***;
    state.emittedReadable = true;
    if (state.sync***REMOVED***
      process.nextTick(function(***REMOVED*** {
        emitReadable_(stream***REMOVED***;
    ***REMOVED******REMOVED***;
    else
      emitReadable_(stream***REMOVED***;
***REMOVED***
}

function emitReadable_(stream***REMOVED*** {
  debug('emit readable'***REMOVED***;
  stream.emit('readable'***REMOVED***;
  flow(stream***REMOVED***;
}


// at this point, the user has presumably seen the 'readable' event,
// and called read(***REMOVED*** to consume some data.  that may have triggered
// in turn another _read(n***REMOVED*** call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state***REMOVED*** {
  if (!state.readingMore***REMOVED*** {
    state.readingMore = true;
    process.nextTick(function(***REMOVED*** {
      maybeReadMore_(stream, state***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***
}

function maybeReadMore_(stream, state***REMOVED*** {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark***REMOVED*** {
    debug('maybeReadMore read 0'***REMOVED***;
    stream.read(0***REMOVED***;
    if (len === state.length***REMOVED***
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
***REMOVED***
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data***REMOVED*** where data is <= n in length.
// for virtual (non-string, non-buffer***REMOVED*** streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n***REMOVED*** {
  this.emit('error', new Error('not implemented'***REMOVED******REMOVED***;
};

Readable.prototype.pipe = function(dest, pipeOpts***REMOVED*** {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount***REMOVED*** {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest***REMOVED***;
      break;
***REMOVED***
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts***REMOVED***;

  var doEnd = (!pipeOpts || pipeOpts.end !== false***REMOVED*** &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted***REMOVED***
    process.nextTick(endFn***REMOVED***;
  else
    src.once('end', endFn***REMOVED***;

  dest.on('unpipe', onunpipe***REMOVED***;
  function onunpipe(readable***REMOVED*** {
    debug('onunpipe'***REMOVED***;
    if (readable === src***REMOVED*** {
      cleanup(***REMOVED***;
  ***REMOVED***
***REMOVED***

  function onend(***REMOVED*** {
    debug('onend'***REMOVED***;
    dest.end(***REMOVED***;
***REMOVED***

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once(***REMOVED***
  // handler in flow(***REMOVED***, but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src***REMOVED***;
  dest.on('drain', ondrain***REMOVED***;

  function cleanup(***REMOVED*** {
    debug('cleanup'***REMOVED***;
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose***REMOVED***;
    dest.removeListener('finish', onfinish***REMOVED***;
    dest.removeListener('drain', ondrain***REMOVED***;
    dest.removeListener('error', onerror***REMOVED***;
    dest.removeListener('unpipe', onunpipe***REMOVED***;
    src.removeListener('end', onend***REMOVED***;
    src.removeListener('end', cleanup***REMOVED***;
    src.removeListener('data', ondata***REMOVED***;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain***REMOVED******REMOVED***
      ondrain(***REMOVED***;
***REMOVED***

  src.on('data', ondata***REMOVED***;
  function ondata(chunk***REMOVED*** {
    debug('ondata'***REMOVED***;
    var ret = dest.write(chunk***REMOVED***;
    if (false === ret***REMOVED*** {
      debug('false write response, pause',
            src._readableState.awaitDrain***REMOVED***;
      src._readableState.awaitDrain++;
      src.pause(***REMOVED***;
  ***REMOVED***
***REMOVED***

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er***REMOVED*** {
    debug('onerror', er***REMOVED***;
    unpipe(***REMOVED***;
    dest.removeListener('error', onerror***REMOVED***;
    if (EE.listenerCount(dest, 'error'***REMOVED*** === 0***REMOVED***
      dest.emit('error', er***REMOVED***;
***REMOVED***
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error***REMOVED***
    dest.on('error', onerror***REMOVED***;
  else if (isArray(dest._events.error***REMOVED******REMOVED***
    dest._events.error.unshift(onerror***REMOVED***;
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose(***REMOVED*** {
    dest.removeListener('finish', onfinish***REMOVED***;
    unpipe(***REMOVED***;
***REMOVED***
  dest.once('close', onclose***REMOVED***;
  function onfinish(***REMOVED*** {
    debug('onfinish'***REMOVED***;
    dest.removeListener('close', onclose***REMOVED***;
    unpipe(***REMOVED***;
***REMOVED***
  dest.once('finish', onfinish***REMOVED***;

  function unpipe(***REMOVED*** {
    debug('unpipe'***REMOVED***;
    src.unpipe(dest***REMOVED***;
***REMOVED***

  // tell the dest that it's being piped to
  dest.emit('pipe', src***REMOVED***;

  // start the flow if it hasn't been started already.
  if (!state.flowing***REMOVED*** {
    debug('pipe resume'***REMOVED***;
    src.resume(***REMOVED***;
***REMOVED***

  return dest;
};

function pipeOnDrain(src***REMOVED*** {
  return function(***REMOVED*** {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain***REMOVED***;
    if (state.awaitDrain***REMOVED***
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data'***REMOVED******REMOVED*** {
      state.flowing = true;
      flow(src***REMOVED***;
  ***REMOVED***
***REMOVED***;
}


Readable.prototype.unpipe = function(dest***REMOVED*** {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0***REMOVED***
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1***REMOVED*** {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes***REMOVED***
      return this;

    if (!dest***REMOVED***
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest***REMOVED***
      dest.emit('unpipe', this***REMOVED***;
    return this;
***REMOVED***

  // slow case. multiple pipe destinations.

  if (!dest***REMOVED*** {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++***REMOVED***
      dests[i].emit('unpipe', this***REMOVED***;
    return this;
***REMOVED***

  // try to find the right one.
  var i = indexOf(state.pipes, dest***REMOVED***;
  if (i === -1***REMOVED***
    return this;

  state.pipes.splice(i, 1***REMOVED***;
  state.pipesCount -= 1;
  if (state.pipesCount === 1***REMOVED***
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this***REMOVED***;

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn***REMOVED*** {
  var res = Stream.prototype.on.call(this, ev, fn***REMOVED***;

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing***REMOVED*** {
    this.resume(***REMOVED***;
***REMOVED***

  if (ev === 'readable' && this.readable***REMOVED*** {
    var state = this._readableState;
    if (!state.readableListening***REMOVED*** {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading***REMOVED*** {
        var self = this;
        process.nextTick(function(***REMOVED*** {
          debug('readable nexttick read 0'***REMOVED***;
          self.read(0***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED*** else if (state.length***REMOVED*** {
        emitReadable(this, state***REMOVED***;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause(***REMOVED*** and resume(***REMOVED*** are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function(***REMOVED*** {
  var state = this._readableState;
  if (!state.flowing***REMOVED*** {
    debug('resume'***REMOVED***;
    state.flowing = true;
    if (!state.reading***REMOVED*** {
      debug('resume read 0'***REMOVED***;
      this.read(0***REMOVED***;
  ***REMOVED***
    resume(this, state***REMOVED***;
***REMOVED***
  return this;
};

function resume(stream, state***REMOVED*** {
  if (!state.resumeScheduled***REMOVED*** {
    state.resumeScheduled = true;
    process.nextTick(function(***REMOVED*** {
      resume_(stream, state***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***
}

function resume_(stream, state***REMOVED*** {
  state.resumeScheduled = false;
  stream.emit('resume'***REMOVED***;
  flow(stream***REMOVED***;
  if (state.flowing && !state.reading***REMOVED***
    stream.read(0***REMOVED***;
}

Readable.prototype.pause = function(***REMOVED*** {
  debug('call pause flowing=%j', this._readableState.flowing***REMOVED***;
  if (false !== this._readableState.flowing***REMOVED*** {
    debug('pause'***REMOVED***;
    this._readableState.flowing = false;
    this.emit('pause'***REMOVED***;
***REMOVED***
  return this;
};

function flow(stream***REMOVED*** {
  var state = stream._readableState;
  debug('flow', state.flowing***REMOVED***;
  if (state.flowing***REMOVED*** {
    do {
      var chunk = stream.read(***REMOVED***;
  ***REMOVED*** while (null !== chunk && state.flowing***REMOVED***;
***REMOVED***
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream***REMOVED*** {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function(***REMOVED*** {
    debug('wrapped end'***REMOVED***;
    if (state.decoder && !state.ended***REMOVED*** {
      var chunk = state.decoder.end(***REMOVED***;
      if (chunk && chunk.length***REMOVED***
        self.push(chunk***REMOVED***;
  ***REMOVED***

    self.push(null***REMOVED***;
***REMOVED******REMOVED***;

  stream.on('data', function(chunk***REMOVED*** {
    debug('wrapped data'***REMOVED***;
    if (state.decoder***REMOVED***
      chunk = state.decoder.write(chunk***REMOVED***;
    if (!chunk || !state.objectMode && !chunk.length***REMOVED***
      return;

    var ret = self.push(chunk***REMOVED***;
    if (!ret***REMOVED*** {
      paused = true;
      stream.pause(***REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream***REMOVED*** {
    if (util.isFunction(stream[i]***REMOVED*** && util.isUndefined(this[i]***REMOVED******REMOVED*** {
      this[i] = function(method***REMOVED*** { return function(***REMOVED*** {
        return stream[method].apply(stream, arguments***REMOVED***;
    ***REMOVED***}(i***REMOVED***;
  ***REMOVED***
***REMOVED***

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev***REMOVED*** {
    stream.on(ev, self.emit.bind(self, ev***REMOVED******REMOVED***;
***REMOVED******REMOVED***;

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n***REMOVED*** {
    debug('wrapped _read', n***REMOVED***;
    if (paused***REMOVED*** {
      paused = false;
      stream.resume(***REMOVED***;
  ***REMOVED***
***REMOVED***;

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state***REMOVED*** {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0***REMOVED***
    return null;

  if (length === 0***REMOVED***
    ret = null;
  else if (objectMode***REMOVED***
    ret = list.shift(***REMOVED***;
  else if (!n || n >= length***REMOVED*** {
    // read it all, truncate the array.
    if (stringMode***REMOVED***
      ret = list.join(''***REMOVED***;
    else
      ret = Buffer.concat(list, length***REMOVED***;
    list.length = 0;
***REMOVED*** else {
    // read just some of it.
    if (n < list[0].length***REMOVED*** {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n***REMOVED***;
      list[0] = buf.slice(n***REMOVED***;
  ***REMOVED*** else if (n === list[0].length***REMOVED*** {
      // first list is a perfect match
      ret = list.shift(***REMOVED***;
  ***REMOVED*** else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode***REMOVED***
        ret = '';
      else
        ret = new Buffer(n***REMOVED***;

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++***REMOVED*** {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length***REMOVED***;

        if (stringMode***REMOVED***
          ret += buf.slice(0, cpy***REMOVED***;
        else
          buf.copy(ret, c, 0, cpy***REMOVED***;

        if (cpy < buf.length***REMOVED***
          list[0] = buf.slice(cpy***REMOVED***;
        else
          list.shift(***REMOVED***;

        c += cpy;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  return ret;
}

function endReadable(stream***REMOVED*** {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0***REMOVED***
    throw new Error('endReadable called on non-empty stream'***REMOVED***;

  if (!state.endEmitted***REMOVED*** {
    state.ended = true;
    process.nextTick(function(***REMOVED*** {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0***REMOVED*** {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end'***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED***
}

function forEach (xs, f***REMOVED*** {
  for (var i = 0, l = xs.length; i < l; i++***REMOVED*** {
    f(xs[i], i***REMOVED***;
***REMOVED***
}

function indexOf (xs, x***REMOVED*** {
  for (var i = 0, l = xs.length; i < l; i++***REMOVED*** {
    if (xs[i] === x***REMOVED*** return i;
***REMOVED***
  return -1;
}
