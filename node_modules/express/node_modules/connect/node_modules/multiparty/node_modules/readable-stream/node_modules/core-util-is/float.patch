diff --git a/lib/util.js b/lib/util.js
index a03e874..9074e8e 100644
--- a/lib/util.js
+++ b/lib/util.js
@@ -19,430 +19,6 @@
 // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 // USE OR OTHER DEALINGS IN THE SOFTWARE.

-var formatRegExp = /%[sdj%]/g;
-exports.format = function(f***REMOVED*** {
-  if (!isString(f***REMOVED******REMOVED*** {
-    var objects = [];
-    for (var i = 0; i < arguments.length; i++***REMOVED*** {
-      objects.push(inspect(arguments[i]***REMOVED******REMOVED***;
-  ***REMOVED***
-    return objects.join(' '***REMOVED***;
-***REMOVED***
-
-  var i = 1;
-  var args = arguments;
-  var len = args.length;
-  var str = String(f***REMOVED***.replace(formatRegExp, function(x***REMOVED*** {
-    if (x === '%%'***REMOVED*** return '%';
-    if (i >= len***REMOVED*** return x;
-    switch (x***REMOVED*** {
-      case '%s': return String(args[i++]***REMOVED***;
-      case '%d': return Number(args[i++]***REMOVED***;
-      case '%j':
-        try {
-          return JSON.stringify(args[i++]***REMOVED***;
-      ***REMOVED*** catch (_***REMOVED*** {
-          return '[Circular]';
-      ***REMOVED***
-      default:
-        return x;
-  ***REMOVED***
-***REMOVED******REMOVED***;
-  for (var x = args[i]; i < len; x = args[++i]***REMOVED*** {
-    if (isNull(x***REMOVED*** || !isObject(x***REMOVED******REMOVED*** {
-      str += ' ' + x;
-  ***REMOVED*** else {
-      str += ' ' + inspect(x***REMOVED***;
-  ***REMOVED***
-***REMOVED***
-  return str;
-};
-
-
-// Mark that a method should not be used.
-// Returns a modified function which warns once by default.
-// If --no-deprecation is set, then it is a no-op.
-exports.deprecate = function(fn, msg***REMOVED*** {
-  // Allow for deprecating things in the process of starting up.
-  if (isUndefined(global.process***REMOVED******REMOVED*** {
-    return function(***REMOVED*** {
-      return exports.deprecate(fn, msg***REMOVED***.apply(this, arguments***REMOVED***;
-  ***REMOVED***;
-***REMOVED***
-
-  if (process.noDeprecation === true***REMOVED*** {
-    return fn;
-***REMOVED***
-
-  var warned = false;
-  function deprecated(***REMOVED*** {
-    if (!warned***REMOVED*** {
-      if (process.throwDeprecation***REMOVED*** {
-        throw new Error(msg***REMOVED***;
-    ***REMOVED*** else if (process.traceDeprecation***REMOVED*** {
-        console.trace(msg***REMOVED***;
-    ***REMOVED*** else {
-        console.error(msg***REMOVED***;
-    ***REMOVED***
-      warned = true;
-  ***REMOVED***
-    return fn.apply(this, arguments***REMOVED***;
-***REMOVED***
-
-  return deprecated;
-};
-
-
-var debugs = {};
-var debugEnviron;
-exports.debuglog = function(set***REMOVED*** {
-  if (isUndefined(debugEnviron***REMOVED******REMOVED***
-    debugEnviron = process.env.NODE_DEBUG || '';
-  set = set.toUpperCase(***REMOVED***;
-  if (!debugs[set]***REMOVED*** {
-    if (new RegExp('\\b' + set + '\\b', 'i'***REMOVED***.test(debugEnviron***REMOVED******REMOVED*** {
-      var pid = process.pid;
-      debugs[set] = function(***REMOVED*** {
-        var msg = exports.format.apply(exports, arguments***REMOVED***;
-        console.error('%s %d: %s', set, pid, msg***REMOVED***;
-    ***REMOVED***;
-  ***REMOVED*** else {
-      debugs[set] = function(***REMOVED*** {};
-  ***REMOVED***
-***REMOVED***
-  return debugs[set];
-};
-
-
-/**
- * Echos the value of a value. Trys to print the value out
- * in the best way possible given the different types.
- *
- * @param {Object} obj The object to print out.
- * @param {Object} opts Optional options object that alters the output.
- */
-/* legacy: obj, showHidden, depth, colors*/
-function inspect(obj, opts***REMOVED*** {
-  // default options
-  var ctx = {
-    seen: [],
-    stylize: stylizeNoColor
-***REMOVED***;
-  // legacy...
-  if (arguments.length >= 3***REMOVED*** ctx.depth = arguments[2];
-  if (arguments.length >= 4***REMOVED*** ctx.colors = arguments[3];
-  if (isBoolean(opts***REMOVED******REMOVED*** {
-    // legacy...
-    ctx.showHidden = opts;
-***REMOVED*** else if (opts***REMOVED*** {
-    // got an "options" object
-    exports._extend(ctx, opts***REMOVED***;
-***REMOVED***
-  // set default options
-  if (isUndefined(ctx.showHidden***REMOVED******REMOVED*** ctx.showHidden = false;
-  if (isUndefined(ctx.depth***REMOVED******REMOVED*** ctx.depth = 2;
-  if (isUndefined(ctx.colors***REMOVED******REMOVED*** ctx.colors = false;
-  if (isUndefined(ctx.customInspect***REMOVED******REMOVED*** ctx.customInspect = true;
-  if (ctx.colors***REMOVED*** ctx.stylize = stylizeWithColor;
-  return formatValue(ctx, obj, ctx.depth***REMOVED***;
-}
-exports.inspect = inspect;
-
-
-// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
-inspect.colors = {
-  'bold' : [1, 22],
-  'italic' : [3, 23],
-  'underline' : [4, 24],
-  'inverse' : [7, 27],
-  'white' : [37, 39],
-  'grey' : [90, 39],
-  'black' : [30, 39],
-  'blue' : [34, 39],
-  'cyan' : [36, 39],
-  'green' : [32, 39],
-  'magenta' : [35, 39],
-  'red' : [31, 39],
-  'yellow' : [33, 39]
-};
-
-// Don't use 'blue' not visible on cmd.exe
-inspect.styles = {
-  'special': 'cyan',
-  'number': 'yellow',
-  'boolean': 'yellow',
-  'undefined': 'grey',
-  'null': 'bold',
-  'string': 'green',
-  'date': 'magenta',
-  // "name": intentionally not styling
-  'regexp': 'red'
-};
-
-
-function stylizeWithColor(str, styleType***REMOVED*** {
-  var style = inspect.styles[styleType];
-
-  if (style***REMOVED*** {
-    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
-           '\u001b[' + inspect.colors[style][1] + 'm';
-***REMOVED*** else {
-    return str;
-***REMOVED***
-}
-
-
-function stylizeNoColor(str, styleType***REMOVED*** {
-  return str;
-}
-
-
-function arrayToHash(array***REMOVED*** {
-  var hash = {};
-
-  array.forEach(function(val, idx***REMOVED*** {
-    hash[val] = true;
-***REMOVED******REMOVED***;
-
-  return hash;
-}
-
-
-function formatValue(ctx, value, recurseTimes***REMOVED*** {
-  // Provide a hook for user-specified inspect functions.
-  // Check that value is an object with an inspect function on it
-  if (ctx.customInspect &&
-      value &&
-      isFunction(value.inspect***REMOVED*** &&
-      // Filter out the util module, it's inspect function is special
-      value.inspect !== exports.inspect &&
-      // Also filter out any prototype objects using the circular check.
-      !(value.constructor && value.constructor.prototype === value***REMOVED******REMOVED*** {
-    var ret = value.inspect(recurseTimes, ctx***REMOVED***;
-    if (!isString(ret***REMOVED******REMOVED*** {
-      ret = formatValue(ctx, ret, recurseTimes***REMOVED***;
-  ***REMOVED***
-    return ret;
-***REMOVED***
-
-  // Primitive types cannot have properties
-  var primitive = formatPrimitive(ctx, value***REMOVED***;
-  if (primitive***REMOVED*** {
-    return primitive;
-***REMOVED***
-
-  // Look up the keys of the object.
-  var keys = Object.keys(value***REMOVED***;
-  var visibleKeys = arrayToHash(keys***REMOVED***;
-
-  if (ctx.showHidden***REMOVED*** {
-    keys = Object.getOwnPropertyNames(value***REMOVED***;
-***REMOVED***
-
-  // Some type of object without properties can be shortcutted.
-  if (keys.length === 0***REMOVED*** {
-    if (isFunction(value***REMOVED******REMOVED*** {
-      var name = value.name ? ': ' + value.name : '';
-      return ctx.stylize('[Function' + name + ']', 'special'***REMOVED***;
-  ***REMOVED***
-    if (isRegExp(value***REMOVED******REMOVED*** {
-      return ctx.stylize(RegExp.prototype.toString.call(value***REMOVED***, 'regexp'***REMOVED***;
-  ***REMOVED***
-    if (isDate(value***REMOVED******REMOVED*** {
-      return ctx.stylize(Date.prototype.toString.call(value***REMOVED***, 'date'***REMOVED***;
-  ***REMOVED***
-    if (isError(value***REMOVED******REMOVED*** {
-      return formatError(value***REMOVED***;
-  ***REMOVED***
-***REMOVED***
-
-  var base = '', array = false, braces = ['{', '}'];
-
-  // Make Array say that they are Array
-  if (isArray(value***REMOVED******REMOVED*** {
-    array = true;
-    braces = ['[', ']'];
-***REMOVED***
-
-  // Make functions say that they are functions
-  if (isFunction(value***REMOVED******REMOVED*** {
-    var n = value.name ? ': ' + value.name : '';
-    base = ' [Function' + n + ']';
-***REMOVED***
-
-  // Make RegExps say that they are RegExps
-  if (isRegExp(value***REMOVED******REMOVED*** {
-    base = ' ' + RegExp.prototype.toString.call(value***REMOVED***;
-***REMOVED***
-
-  // Make dates with properties first say the date
-  if (isDate(value***REMOVED******REMOVED*** {
-    base = ' ' + Date.prototype.toUTCString.call(value***REMOVED***;
-***REMOVED***
-
-  // Make error with message first say the error
-  if (isError(value***REMOVED******REMOVED*** {
-    base = ' ' + formatError(value***REMOVED***;
-***REMOVED***
-
-  if (keys.length === 0 && (!array || value.length == 0***REMOVED******REMOVED*** {
-    return braces[0] + base + braces[1];
-***REMOVED***
-
-  if (recurseTimes < 0***REMOVED*** {
-    if (isRegExp(value***REMOVED******REMOVED*** {
-      return ctx.stylize(RegExp.prototype.toString.call(value***REMOVED***, 'regexp'***REMOVED***;
-  ***REMOVED*** else {
-      return ctx.stylize('[Object]', 'special'***REMOVED***;
-  ***REMOVED***
-***REMOVED***
-
-  ctx.seen.push(value***REMOVED***;
-
-  var output;
-  if (array***REMOVED*** {
-    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys***REMOVED***;
-***REMOVED*** else {
-    output = keys.map(function(key***REMOVED*** {
-      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array***REMOVED***;
-  ***REMOVED******REMOVED***;
-***REMOVED***
-
-  ctx.seen.pop(***REMOVED***;
-
-  return reduceToSingleString(output, base, braces***REMOVED***;
-}
-
-
-function formatPrimitive(ctx, value***REMOVED*** {
-  if (isUndefined(value***REMOVED******REMOVED***
-    return ctx.stylize('undefined', 'undefined'***REMOVED***;
-  if (isString(value***REMOVED******REMOVED*** {
-    var simple = '\'' + JSON.stringify(value***REMOVED***.replace(/^"|"$/g, ''***REMOVED***
-                                             .replace(/'/g, "\\'"***REMOVED***
-                                             .replace(/\\"/g, '"'***REMOVED*** + '\'';
-    return ctx.stylize(simple, 'string'***REMOVED***;
-***REMOVED***
-  if (isNumber(value***REMOVED******REMOVED*** {
-    // Format -0 as '-0'. Strict equality won't distinguish 0 from -0,
-    // so instead we use the fact that 1 / -0 < 0 whereas 1 / 0 > 0 .
-    if (value === 0 && 1 / value < 0***REMOVED***
-      return ctx.stylize('-0', 'number'***REMOVED***;
-    return ctx.stylize('' + value, 'number'***REMOVED***;
-***REMOVED***
-  if (isBoolean(value***REMOVED******REMOVED***
-    return ctx.stylize('' + value, 'boolean'***REMOVED***;
-  // For some reason typeof null is "object", so special case here.
-  if (isNull(value***REMOVED******REMOVED***
-    return ctx.stylize('null', 'null'***REMOVED***;
-}
-
-
-function formatError(value***REMOVED*** {
-  return '[' + Error.prototype.toString.call(value***REMOVED*** + ']';
-}
-
-
-function formatArray(ctx, value, recurseTimes, visibleKeys, keys***REMOVED*** {
-  var output = [];
-  for (var i = 0, l = value.length; i < l; ++i***REMOVED*** {
-    if (hasOwnProperty(value, String(i***REMOVED******REMOVED******REMOVED*** {
-      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
-          String(i***REMOVED***, true***REMOVED******REMOVED***;
-  ***REMOVED*** else {
-      output.push(''***REMOVED***;
-  ***REMOVED***
-***REMOVED***
-  keys.forEach(function(key***REMOVED*** {
-    if (!key.match(/^\d+$/***REMOVED******REMOVED*** {
-      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
-          key, true***REMOVED******REMOVED***;
-  ***REMOVED***
-***REMOVED******REMOVED***;
-  return output;
-}
-
-
-function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array***REMOVED*** {
-  var name, str, desc;
-  desc = Object.getOwnPropertyDescriptor(value, key***REMOVED*** || { value: value[key] };
-  if (desc.get***REMOVED*** {
-    if (desc.set***REMOVED*** {
-      str = ctx.stylize('[Getter/Setter]', 'special'***REMOVED***;
-  ***REMOVED*** else {
-      str = ctx.stylize('[Getter]', 'special'***REMOVED***;
-  ***REMOVED***
-***REMOVED*** else {
-    if (desc.set***REMOVED*** {
-      str = ctx.stylize('[Setter]', 'special'***REMOVED***;
-  ***REMOVED***
-***REMOVED***
-  if (!hasOwnProperty(visibleKeys, key***REMOVED******REMOVED*** {
-    name = '[' + key + ']';
-***REMOVED***
-  if (!str***REMOVED*** {
-    if (ctx.seen.indexOf(desc.value***REMOVED*** < 0***REMOVED*** {
-      if (isNull(recurseTimes***REMOVED******REMOVED*** {
-        str = formatValue(ctx, desc.value, null***REMOVED***;
-    ***REMOVED*** else {
-        str = formatValue(ctx, desc.value, recurseTimes - 1***REMOVED***;
-    ***REMOVED***
-      if (str.indexOf('\n'***REMOVED*** > -1***REMOVED*** {
-        if (array***REMOVED*** {
-          str = str.split('\n'***REMOVED***.map(function(line***REMOVED*** {
-            return '  ' + line;
-        ***REMOVED******REMOVED***.join('\n'***REMOVED***.substr(2***REMOVED***;
-      ***REMOVED*** else {
-          str = '\n' + str.split('\n'***REMOVED***.map(function(line***REMOVED*** {
-            return '   ' + line;
-        ***REMOVED******REMOVED***.join('\n'***REMOVED***;
-      ***REMOVED***
-    ***REMOVED***
-  ***REMOVED*** else {
-      str = ctx.stylize('[Circular]', 'special'***REMOVED***;
-  ***REMOVED***
-***REMOVED***
-  if (isUndefined(name***REMOVED******REMOVED*** {
-    if (array && key.match(/^\d+$/***REMOVED******REMOVED*** {
-      return str;
-  ***REMOVED***
-    name = JSON.stringify('' + key***REMOVED***;
-    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]****REMOVED***"$/***REMOVED******REMOVED*** {
-      name = name.substr(1, name.length - 2***REMOVED***;
-      name = ctx.stylize(name, 'name'***REMOVED***;
-  ***REMOVED*** else {
-      name = name.replace(/'/g, "\\'"***REMOVED***
-                 .replace(/\\"/g, '"'***REMOVED***
-                 .replace(/(^"|"$***REMOVED***/g, "'"***REMOVED***;
-      name = ctx.stylize(name, 'string'***REMOVED***;
-  ***REMOVED***
-***REMOVED***
-
-  return name + ': ' + str;
-}
-
-
-function reduceToSingleString(output, base, braces***REMOVED*** {
-  var numLinesEst = 0;
-  var length = output.reduce(function(prev, cur***REMOVED*** {
-    numLinesEst++;
-    if (cur.indexOf('\n'***REMOVED*** >= 0***REMOVED*** numLinesEst++;
-    return prev + cur.replace(/\u001b\[\d\d?m/g, ''***REMOVED***.length + 1;
-***REMOVED***, 0***REMOVED***;
-
-  if (length > 60***REMOVED*** {
-    return braces[0] +
-           (base === '' ? '' : base + '\n '***REMOVED*** +
-           ' ' +
-           output.join(',\n  '***REMOVED*** +
-           ' ' +
-           braces[1];
-***REMOVED***
-
-  return braces[0] + base + ' ' + output.join(', '***REMOVED*** + ' ' + braces[1];
-}
-
-
 // NOTE: These type checking functions intentionally don't use `instanceof`
 // because it is fragile and can be easily faked with `Object.create(***REMOVED***`.
 function isArray(ar***REMOVED*** {
@@ -522,166 +98,10 @@ function isPrimitive(arg***REMOVED*** {
 exports.isPrimitive = isPrimitive;

 function isBuffer(arg***REMOVED*** {
-  return arg instanceof Buffer;
+  return Buffer.isBuffer(arg***REMOVED***;
 }
 exports.isBuffer = isBuffer;

 function objectToString(o***REMOVED*** {
   return Object.prototype.toString.call(o***REMOVED***;
-}
-
-
-function pad(n***REMOVED*** {
-  return n < 10 ? '0' + n.toString(10***REMOVED*** : n.toString(10***REMOVED***;
-}
-
-
-var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
-              'Oct', 'Nov', 'Dec'];
-
-// 26 Feb 16:19:34
-function timestamp(***REMOVED*** {
-  var d = new Date(***REMOVED***;
-  var time = [pad(d.getHours(***REMOVED******REMOVED***,
-              pad(d.getMinutes(***REMOVED******REMOVED***,
-              pad(d.getSeconds(***REMOVED******REMOVED***].join(':'***REMOVED***;
-  return [d.getDate(***REMOVED***, months[d.getMonth(***REMOVED***], time].join(' '***REMOVED***;
-}
-
-
-// log is just a thin wrapper to console.log that prepends a timestamp
-exports.log = function(***REMOVED*** {
-  console.log('%s - %s', timestamp(***REMOVED***, exports.format.apply(exports, arguments***REMOVED******REMOVED***;
-};
-
-
-/**
- * Inherit the prototype methods from one constructor into another.
- *
- * The Function.prototype.inherits from lang.js rewritten as a standalone
- * function (not on Function.prototype***REMOVED***. NOTE: If this file is to be loaded
- * during bootstrapping this function needs to be rewritten using some native
- * functions as prototype setup using normal JavaScript does not work as
- * expected during bootstrapping (see mirror.js in r114903***REMOVED***.
- *
- * @param {function} ctor Constructor function which needs to inherit the
- *     prototype.
- * @param {function} superCtor Constructor function to inherit prototype from.
- */
-exports.inherits = function(ctor, superCtor***REMOVED*** {
-  ctor.super_ = superCtor;
-  ctor.prototype = Object.create(superCtor.prototype, {
-    constructor: {
-      value: ctor,
-      enumerable: false,
-      writable: true,
-      configurable: true
-  ***REMOVED***
-***REMOVED******REMOVED***;
-};
-
-exports._extend = function(origin, add***REMOVED*** {
-  // Don't do anything if add isn't an object
-  if (!add || !isObject(add***REMOVED******REMOVED*** return origin;
-
-  var keys = Object.keys(add***REMOVED***;
-  var i = keys.length;
-  while (i--***REMOVED*** {
-    origin[keys[i]] = add[keys[i]];
-***REMOVED***
-  return origin;
-};
-
-function hasOwnProperty(obj, prop***REMOVED*** {
-  return Object.prototype.hasOwnProperty.call(obj, prop***REMOVED***;
-}
-
-
-// Deprecated old stuff.
-
-exports.p = exports.deprecate(function(***REMOVED*** {
-  for (var i = 0, len = arguments.length; i < len; ++i***REMOVED*** {
-    console.error(exports.inspect(arguments[i]***REMOVED******REMOVED***;
-***REMOVED***
-}, 'util.p: Use console.error(***REMOVED*** instead'***REMOVED***;
-
-
-exports.exec = exports.deprecate(function(***REMOVED*** {
-  return require('child_process'***REMOVED***.exec.apply(this, arguments***REMOVED***;
-}, 'util.exec is now called `child_process.exec`.'***REMOVED***;
-
-
-exports.print = exports.deprecate(function(***REMOVED*** {
-  for (var i = 0, len = arguments.length; i < len; ++i***REMOVED*** {
-    process.stdout.write(String(arguments[i]***REMOVED******REMOVED***;
-***REMOVED***
-}, 'util.print: Use console.log instead'***REMOVED***;
-
-
-exports.puts = exports.deprecate(function(***REMOVED*** {
-  for (var i = 0, len = arguments.length; i < len; ++i***REMOVED*** {
-    process.stdout.write(arguments[i] + '\n'***REMOVED***;
-***REMOVED***
-}, 'util.puts: Use console.log instead'***REMOVED***;
-
-
-exports.debug = exports.deprecate(function(x***REMOVED*** {
-  process.stderr.write('DEBUG: ' + x + '\n'***REMOVED***;
-}, 'util.debug: Use console.error instead'***REMOVED***;
-
-
-exports.error = exports.deprecate(function(x***REMOVED*** {
-  for (var i = 0, len = arguments.length; i < len; ++i***REMOVED*** {
-    process.stderr.write(arguments[i] + '\n'***REMOVED***;
-***REMOVED***
-}, 'util.error: Use console.error instead'***REMOVED***;
-
-
-exports.pump = exports.deprecate(function(readStream, writeStream, callback***REMOVED*** {
-  var callbackCalled = false;
-
-  function call(a, b, c***REMOVED*** {
-    if (callback && !callbackCalled***REMOVED*** {
-      callback(a, b, c***REMOVED***;
-      callbackCalled = true;
-  ***REMOVED***
-***REMOVED***
-
-  readStream.addListener('data', function(chunk***REMOVED*** {
-    if (writeStream.write(chunk***REMOVED*** === false***REMOVED*** readStream.pause(***REMOVED***;
-***REMOVED******REMOVED***;
-
-  writeStream.addListener('drain', function(***REMOVED*** {
-    readStream.resume(***REMOVED***;
-***REMOVED******REMOVED***;
-
-  readStream.addListener('end', function(***REMOVED*** {
-    writeStream.end(***REMOVED***;
-***REMOVED******REMOVED***;
-
-  readStream.addListener('close', function(***REMOVED*** {
-    call(***REMOVED***;
-***REMOVED******REMOVED***;
-
-  readStream.addListener('error', function(err***REMOVED*** {
-    writeStream.end(***REMOVED***;
-    call(err***REMOVED***;
-***REMOVED******REMOVED***;
-
-  writeStream.addListener('error', function(err***REMOVED*** {
-    readStream.destroy(***REMOVED***;
-    call(err***REMOVED***;
-***REMOVED******REMOVED***;
-}, 'util.pump(***REMOVED***: Use readableStream.pipe(***REMOVED*** instead'***REMOVED***;
-
-
-var uv;
-exports._errnoException = function(err, syscall***REMOVED*** {
-  if (isUndefined(uv***REMOVED******REMOVED*** uv = process.binding('uv'***REMOVED***;
-  var errname = uv.errname(err***REMOVED***;
-  var e = new Error(syscall + ' ' + errname***REMOVED***;
-  e.code = errname;
-  e.errno = errname;
-  e.syscall = syscall;
-  return e;
-};
+}