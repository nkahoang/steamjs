
/**
 * Require the given path.
 *
 * @param {String} path
 * @return {Object} exports
 * @api public
 */

function require(path, parent, orig***REMOVED*** {
  var resolved = require.resolve(path***REMOVED***;

  // lookup failed
  if (null == resolved***REMOVED*** {
    orig = orig || path;
    parent = parent || 'root';
    var err = new Error('Failed to require "' + orig + '" from "' + parent + '"'***REMOVED***;
    err.path = orig;
    err.parent = parent;
    err.require = true;
    throw err;
***REMOVED***

  var module = require.modules[resolved];

  // perform real require(***REMOVED***
  // by invoking the module's
  // registered function
  if (!module.exports***REMOVED*** {
    module.exports = {};
    module.client = module.component = true;
    module.call(this, module.exports, require.relative(resolved***REMOVED***, module***REMOVED***;
***REMOVED***

  return module.exports;
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Registered aliases.
 */

require.aliases = {};

/**
 * Resolve `path`.
 *
 * Lookup:
 *
 *   - PATH/index.js
 *   - PATH.js
 *   - PATH
 *
 * @param {String} path
 * @return {String} path or null
 * @api private
 */

require.resolve = function(path***REMOVED*** {
  if (path.charAt(0***REMOVED*** === '/'***REMOVED*** path = path.slice(1***REMOVED***;
  var index = path + '/index.js';

  var paths = [
    path,
    path + '.js',
    path + '.json',
    path + '/index.js',
    path + '/index.json'
  ];

  for (var i = 0; i < paths.length; i++***REMOVED*** {
    var path = paths[i];
    if (require.modules.hasOwnProperty(path***REMOVED******REMOVED*** return path;
***REMOVED***

  if (require.aliases.hasOwnProperty(index***REMOVED******REMOVED*** {
    return require.aliases[index];
***REMOVED***
};

/**
 * Normalize `path` relative to the current path.
 *
 * @param {String} curr
 * @param {String} path
 * @return {String}
 * @api private
 */

require.normalize = function(curr, path***REMOVED*** {
  var segs = [];

  if ('.' != path.charAt(0***REMOVED******REMOVED*** return path;

  curr = curr.split('/'***REMOVED***;
  path = path.split('/'***REMOVED***;

  for (var i = 0; i < path.length; ++i***REMOVED*** {
    if ('..' == path[i]***REMOVED*** {
      curr.pop(***REMOVED***;
  ***REMOVED*** else if ('.' != path[i] && '' != path[i]***REMOVED*** {
      segs.push(path[i]***REMOVED***;
  ***REMOVED***
***REMOVED***

  return curr.concat(segs***REMOVED***.join('/'***REMOVED***;
};

/**
 * Register module at `path` with callback `definition`.
 *
 * @param {String} path
 * @param {Function} definition
 * @api private
 */

require.register = function(path, definition***REMOVED*** {
  require.modules[path] = definition;
};

/**
 * Alias a module definition.
 *
 * @param {String} from
 * @param {String} to
 * @api private
 */

require.alias = function(from, to***REMOVED*** {
  if (!require.modules.hasOwnProperty(from***REMOVED******REMOVED*** {
    throw new Error('Failed to alias "' + from + '", it does not exist'***REMOVED***;
***REMOVED***
  require.aliases[to] = from;
};

/**
 * Return a require function relative to the `parent` path.
 *
 * @param {String} parent
 * @return {Function}
 * @api private
 */

require.relative = function(parent***REMOVED*** {
  var p = require.normalize(parent, '..'***REMOVED***;

  /**
   * lastIndexOf helper.
   */

  function lastIndexOf(arr, obj***REMOVED*** {
    var i = arr.length;
    while (i--***REMOVED*** {
      if (arr[i] === obj***REMOVED*** return i;
  ***REMOVED***
    return -1;
***REMOVED***

  /**
   * The relative require(***REMOVED*** itself.
   */

  function localRequire(path***REMOVED*** {
    var resolved = localRequire.resolve(path***REMOVED***;
    return require(resolved, parent, path***REMOVED***;
***REMOVED***

  /**
   * Resolve relative to the parent.
   */

  localRequire.resolve = function(path***REMOVED*** {
    var c = path.charAt(0***REMOVED***;
    if ('/' == c***REMOVED*** return path.slice(1***REMOVED***;
    if ('.' == c***REMOVED*** return require.normalize(p, path***REMOVED***;

    // resolve deps by returning
    // the dep in the nearest "deps"
    // directory
    var segs = parent.split('/'***REMOVED***;
    var i = lastIndexOf(segs, 'deps'***REMOVED*** + 1;
    if (!i***REMOVED*** i = 0;
    path = segs.slice(0, i + 1***REMOVED***.join('/'***REMOVED*** + '/deps/' + path;
    return path;
***REMOVED***;

  /**
   * Check if module is defined at `path`.
   */

  localRequire.exists = function(path***REMOVED*** {
    return require.modules.hasOwnProperty(localRequire.resolve(path***REMOVED******REMOVED***;
***REMOVED***;

  return localRequire;
};
require.register("isarray/index.js", function(exports, require, module***REMOVED***{
module.exports = Array.isArray || function (arr***REMOVED*** {
  return Object.prototype.toString.call(arr***REMOVED*** == '[object Array]';
};

}***REMOVED***;
require.alias("isarray/index.js", "isarray/index.js"***REMOVED***;

