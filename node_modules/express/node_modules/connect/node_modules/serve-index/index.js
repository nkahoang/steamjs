
/*!
 * Connect - directory
 * Copyright(c***REMOVED*** 2011 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * Copyright(c***REMOVED*** 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

// TODO: arrow key navigation
// TODO: make icons extensible

/**
 * Module dependencies.
 */

var ***REMOVED***
  , fs = require('fs'***REMOVED***
  , parse = require('url'***REMOVED***.parse
  , ***REMOVED***
  , normalize = path.normalize
  , sep = path.sep
  , extname = path.extname
  , join = path.join;
var Batch = require('batch'***REMOVED***;
var Negotiator = require('negotiator'***REMOVED***;

/*!
 * Icon cache.
 */

var cache = {};

/*!
 * Default template.
 */

var defaultTemplate = join(__dirname, 'public', 'directory.html'***REMOVED***;

/*!
 * Stylesheet.
 */

var stylesheet = join(__dirname, 'public', 'style.css'***REMOVED***;

/**
 * Media types and the map for content negotiation.
 */

var mediaTypes = [
  'text/html',
  'text/plain',
  'application/json'
];

var mediaType = {
  'text/html': 'html',
  'text/plain': 'plain',
  'application/json': 'json'
};

/**
 * Directory:
 *
 * Serve directory listings with the given `root` path.
 *
 * Options:
 *
 *  - `hidden` display hidden (dot***REMOVED*** files. Defaults to false.
 *  - `icons`  display icons. Defaults to false.
 *  - `filter` Apply this filter function to files. Defaults to false.
 *  - `template` Optional path to html template. Defaults to a built-in template.
 *    The following tokens are replaced:
 *      - `{directory}` with the name of the directory.
 *      - `{files}` with the HTML of an unordered list of file links.
 *      - `{linked-path}` with the HTML of a link to the directory.
 *      - `{style}` with the built-in CSS and embedded images.
 *
 * @param {String} root
 * @param {Object} options
 * @return {Function}
 * @api public
 */

exports = module.exports = function directory(root, options***REMOVED***{
  options = options || {};

  // root required
  if (!root***REMOVED*** throw new Error('directory(***REMOVED*** root path required'***REMOVED***;
  var hidden = options.hidden
    , icons = options.icons
    , view = options.view || 'tiles'
    , filter = options.filter
    , root = normalize(root + sep***REMOVED***
    , template = options.template || defaultTemplate;

  return function directory(req, res, next***REMOVED*** {
    if ('GET' != req.method && 'HEAD' != req.method***REMOVED*** return next(***REMOVED***;

    var url = parse(req.url***REMOVED***
      , dir = decodeURIComponent(url.pathname***REMOVED***
      , path = normalize(join(root, dir***REMOVED******REMOVED***
      , originalUrl = parse(req.originalUrl***REMOVED***
      , originalDir = decodeURIComponent(originalUrl.pathname***REMOVED***
      , showUp = path != root;

    // null byte(s***REMOVED***, bad request
    if (~path.indexOf('\0'***REMOVED******REMOVED*** return next(createError(400***REMOVED******REMOVED***;

    // malicious path, forbidden
    if (0 != path.indexOf(root***REMOVED******REMOVED*** return next(createError(403***REMOVED******REMOVED***;

    // check if we have a directory
    fs.stat(path, function(err, stat***REMOVED***{
      if (err***REMOVED*** return 'ENOENT' == err.code
        ? next(***REMOVED***
        : next(err***REMOVED***;

      if (!stat.isDirectory(***REMOVED******REMOVED*** return next(***REMOVED***;

      // fetch files
      fs.readdir(path, function(err, files***REMOVED***{
        if (err***REMOVED*** return next(err***REMOVED***;
        if (!hidden***REMOVED*** files = removeHidden(files***REMOVED***;
        if (filter***REMOVED*** files = files.filter(filter***REMOVED***;
        files.sort(***REMOVED***;

        // content-negotiation
        var type = new Negotiator(req***REMOVED***.preferredMediaType(mediaTypes***REMOVED***;

        // not acceptable
        if (!type***REMOVED*** return next(createError(406***REMOVED******REMOVED***;
        exports[mediaType[type]](req, res, files, next, originalDir, showUp, icons, path, view, template***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;
};

/**
 * Respond with text/html.
 */

exports.html = function(req, res, files, next, dir, showUp, icons, path, view, template***REMOVED***{
  fs.readFile(template, 'utf8', function(err, str***REMOVED***{
    if (err***REMOVED*** return next(err***REMOVED***;
    fs.readFile(stylesheet, 'utf8', function(err, style***REMOVED***{
      if (err***REMOVED*** return next(err***REMOVED***;
      stat(path, files, function(err, stats***REMOVED***{
        if (err***REMOVED*** return next(err***REMOVED***;
        files = files.map(function(file, i***REMOVED***{ return { name: file, stat: stats[i] }; }***REMOVED***;
        files.sort(fileSort***REMOVED***;
        if (showUp***REMOVED*** files.unshift({ name: '..' }***REMOVED***;
        str = str
          .replace('{style}', style.concat(iconStyle(files, icons***REMOVED******REMOVED******REMOVED***
          .replace('{files}', html(files, dir, icons, view***REMOVED******REMOVED***
          .replace('{directory}', dir***REMOVED***
          .replace('{linked-path}', htmlPath(dir***REMOVED******REMOVED***;
        res.setHeader('Content-Type', 'text/html'***REMOVED***;
        res.setHeader('Content-Length', str.length***REMOVED***;
        res.end(str***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
};

/**
 * Respond with application/json.
 */

exports.json = function(req, res, files***REMOVED***{
  files = JSON.stringify(files***REMOVED***;
  res.setHeader('Content-Type', 'application/json'***REMOVED***;
  res.setHeader('Content-Length', files.length***REMOVED***;
  res.end(files***REMOVED***;
};

/**
 * Respond with text/plain.
 */

exports.plain = function(req, res, files***REMOVED***{
  files = files.join('\n'***REMOVED*** + '\n';
  res.setHeader('Content-Type', 'text/plain'***REMOVED***;
  res.setHeader('Content-Length', files.length***REMOVED***;
  res.end(files***REMOVED***;
};

/**
 * Generate an `Error` from the given status `code`
 * and optional `msg`.
 *
 * @param {Number} code
 * @param {String} msg
 * @return {Error}
 * @api private
 */

function createError(code, msg***REMOVED*** {
  var err = new Error(msg || http.STATUS_CODES[code]***REMOVED***;
  err.status = code;
  return err;
};

/**
 * Sort function for with directories first.
 */

function fileSort(a, b***REMOVED*** {
  return Number(b.stat && b.stat.isDirectory(***REMOVED******REMOVED*** - Number(a.stat && a.stat.isDirectory(***REMOVED******REMOVED*** ||
    String(a.name***REMOVED***.toLocaleLowerCase(***REMOVED***.localeCompare(String(b.name***REMOVED***.toLocaleLowerCase(***REMOVED******REMOVED***;
}

/**
 * Map html `dir`, returning a linked path.
 */

function htmlPath(dir***REMOVED*** {
  var curr = [];
  return dir.split('/'***REMOVED***.map(function(part***REMOVED***{
    curr.push(encodeURIComponent(part***REMOVED******REMOVED***;
    return part ? '<a href="' + curr.join('/'***REMOVED*** + '">' + part + '</a>' : '';
***REMOVED******REMOVED***.join(' / '***REMOVED***;
}

/**
 * Load icon images, return css string.
 */

function iconStyle (files, useIcons***REMOVED*** {
  if (!useIcons***REMOVED*** return '';
  var className;
  var i;
  var icon;
  var list = [];
  var rules = {};
  var selector;
  var selectors = {};
  var style = '';

  for (i = 0; i < files.length; i++***REMOVED*** {
    var file = files[i];

    var isDir = '..' == file.name || (file.stat && file.stat.isDirectory(***REMOVED******REMOVED***;
    icon = isDir ? icons.folder : icons[extname(file.name***REMOVED***] || icons.default;

    var ext = extname(file.name***REMOVED***;
    className = 'icon-' + (isDir ? 'directory' : (icons[ext] ? ext.substring(1***REMOVED*** : 'default'***REMOVED******REMOVED***;
    selector = '#files .' + className + ' .name';

    if (!rules[icon]***REMOVED*** {
      rules[icon] = 'background-image: url(data:image/png;base64,' + load(icon***REMOVED*** + '***REMOVED***;'
      selectors[icon] = [];
      list.push(icon***REMOVED***;
  ***REMOVED***

    if (!~selectors[icon].indexOf(selector***REMOVED******REMOVED*** {
      selectors[icon].push(selector***REMOVED***;
  ***REMOVED***
***REMOVED***

  for (i = 0; i < list.length; i++***REMOVED*** {
    icon = list[i];
    style += selectors[icon].join(',\n'***REMOVED*** + ' {\n  ' + rules[icon] + '\n}\n';
***REMOVED***

  return style;
}

/**
 * Map html `files`, returning an html unordered list.
 */

function html(files, dir, useIcons, view***REMOVED*** {
  	return '<ul id="files" class="view-'+view+'">'
    + (view == 'details' ? (
      '<li class="header">'
      + '<span class="name">Name</span>'
      + '<span class="size">Size</span>'
      + '<span class="date">Modified</span>'
      + '</li>'***REMOVED*** : ''***REMOVED***
    + files.map(function(file***REMOVED***{
    var isDir = '..' == file.name || (file.stat && file.stat.isDirectory(***REMOVED******REMOVED***
      , classes = []
      , path = dir.split('/'***REMOVED***.map(function (c***REMOVED*** { return encodeURIComponent(c***REMOVED***; }***REMOVED***;

    if (useIcons***REMOVED*** {
      var ext = extname(file.name***REMOVED***;
      ext = isDir ? '.directory' : (icons[ext] ? ext : '.default'***REMOVED***;
      classes.push('icon'***REMOVED***;
      classes.push('icon-' + ext.substring(1***REMOVED******REMOVED***;
  ***REMOVED***

    path.push(encodeURIComponent(file.name***REMOVED******REMOVED***;

    var date = file.name == '..' ? ''
      : file.stat.mtime.toDateString(***REMOVED***+' '+file.stat.mtime.toLocaleTimeString(***REMOVED***;
    var size = isDir ? '' : file.stat.size;

    return '<li><a href="'
      + normalizeSlashes(normalize(path.join('/'***REMOVED******REMOVED******REMOVED***
      + '" class="'
      + classes.join(' '***REMOVED*** + '"'
      + ' title="' + file.name + '">'
      + '<span class="name">'+file.name+'</span>'
      + '<span class="size">'+size+'</span>'
      + '<span class="date">'+date+'</span>'
      + '</a></li>';

***REMOVED******REMOVED***.join('\n'***REMOVED*** + '</ul>';
}

/**
 * Load and cache the given `icon`.
 *
 * @param {String} icon
 * @return {String}
 * @api private
 */

function load(icon***REMOVED*** {
  if (cache[icon]***REMOVED*** return cache[icon];
  return cache[icon] = fs.readFileSync(__dirname + '/public/icons/' + icon, 'base64'***REMOVED***;
}

/**
 * Normalizes the path separator from system separator
 * to URL separator, aka `/`.
 *
 * @param {String} path
 * @return {String}
 * @api private
 */

function normalizeSlashes(path***REMOVED*** {
  return path.split(sep***REMOVED***.join('/'***REMOVED***;
};

/**
 * Filter "hidden" `files`, aka files
 * beginning with a `.`.
 *
 * @param {Array} files
 * @return {Array}
 * @api private
 */

function removeHidden(files***REMOVED*** {
  return files.filter(function(file***REMOVED***{
    return '.' != file[0];
***REMOVED******REMOVED***;
}

/**
 * Stat all files and return array of stat
 * in same order.
 */

function stat(dir, files, cb***REMOVED*** {
  var batch = new Batch(***REMOVED***;

  batch.concurrency(10***REMOVED***;

  files.forEach(function(file***REMOVED***{
    batch.push(function(done***REMOVED***{
      fs.stat(join(dir, file***REMOVED***, done***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;

  batch.end(cb***REMOVED***;
}

/**
 * Icon map.
 */

var icons = {
    '.js': 'page_white_code_red.png'
  , '.json': 'page_white_code.png'
  , '.c': 'page_white_c.png'
  , '.h': 'page_white_h.png'
  , '.cc': 'page_white_cplusplus.png'
  , '.php': 'page_white_php.png'
  , '.rb': 'page_white_ruby.png'
  , '.erb': 'page_white_ruby.png'
  , '.cpp': 'page_white_cplusplus.png'
  , '.as': 'page_white_actionscript.png'
  , '.cfm': 'page_white_coldfusion.png'
  , '.cs': 'page_white_csharp.png'
  , '.java': 'page_white_cup.png'
  , '.jsp': 'page_white_cup.png'
  , '.dll': 'page_white_gear.png'
  , '.ini': 'page_white_gear.png'
  , '.asp': 'page_white_code.png'
  , '.aspx': 'page_white_code.png'
  , '.clj': 'page_white_code.png'
  , '.css': 'page_white_code.png'
  , '.sass': 'page_white_code.png'
  , '.scss': 'page_white_code.png'
  , '.less': 'page_white_code.png'
  , '.htm': 'page_white_code.png'
  , '.html': 'page_white_code.png'
  , '.xhtml': 'page_white_code.png'
  , '.lua': 'page_white_code.png'
  , '.m': 'page_white_code.png'
  , '.pl': 'page_white_code.png'
  , '.py': 'page_white_code.png'
  , '.vb': 'page_white_code.png'
  , '.vbs': 'page_white_code.png'
  , '.xml': 'page_white_code.png'
  , '.yaws': 'page_white_code.png'
  , '.map': 'map.png'

  , '.app': 'application_xp.png'
  , '.exe': 'application_xp.png'
  , '.bat': 'application_xp_terminal.png'
  , '.cgi': 'application_xp_terminal.png'
  , '.sh': 'application_xp_terminal.png'

  , '.avi': 'film.png'
  , '.flv': 'film.png'
  , '.mv4': 'film.png'
  , '.mov': 'film.png'
  , '.mp4': 'film.png'
  , '.mpeg': 'film.png'
  , '.mpg': 'film.png'
  , '.ogv': 'film.png'
  , '.rm': 'film.png'
  , '.webm': 'film.png'
  , '.wmv': 'film.png'
  , '.fnt': 'font.png'
  , '.otf': 'font.png'
  , '.ttf': 'font.png'
  , '.woff': 'font.png'
  , '.bmp': 'image.png'
  , '.gif': 'image.png'
  , '.ico': 'image.png'
  , '.jpeg': 'image.png'
  , '.jpg': 'image.png'
  , '.png': 'image.png'
  , '.psd': 'page_white_picture.png'
  , '.xcf': 'page_white_picture.png'
  , '.pdf': 'page_white_acrobat.png'
  , '.swf': 'page_white_flash.png'
  , '.ai': 'page_white_vector.png'
  , '.eps': 'page_white_vector.png'
  , '.ps': 'page_white_vector.png'
  , '.svg': 'page_white_vector.png'

  , '.ods': 'page_white_excel.png'
  , '.xls': 'page_white_excel.png'
  , '.xlsx': 'page_white_excel.png'
  , '.odp': 'page_white_powerpoint.png'
  , '.ppt': 'page_white_powerpoint.png'
  , '.pptx': 'page_white_powerpoint.png'
  , '.md': 'page_white_text.png'
  , '.srt': 'page_white_text.png'
  , '.txt': 'page_white_text.png'
  , '.doc': 'page_white_word.png'
  , '.docx': 'page_white_word.png'
  , '.odt': 'page_white_word.png'
  , '.rtf': 'page_white_word.png'

  , '.dmg': 'drive.png'
  , '.iso': 'cd.png'
  , '.7z': 'box.png'
  , '.apk': 'box.png'
  , '.bz2': 'box.png'
  , '.cab': 'box.png'
  , '.deb': 'box.png'
  , '.gz': 'box.png'
  , '.jar': 'box.png'
  , '.lz': 'box.png'
  , '.lzma': 'box.png'
  , '.msi': 'box.png'
  , '.pkg': 'box.png'
  , '.rar': 'box.png'
  , '.rpm': 'box.png'
  , '.tar': 'box.png'
  , '.tbz2': 'box.png'
  , '.tgz': 'box.png'
  , '.tlz': 'box.png'
  , '.xz': 'box.png'
  , '.zip': 'box.png'

  , '.accdb': 'page_white_database.png'
  , '.db': 'page_white_database.png'
  , '.dbf': 'page_white_database.png'
  , '.mdb': 'page_white_database.png'
  , '.pdb': 'page_white_database.png'
  , '.sql': 'page_white_database.png'

  , '.gam': 'controller.png'
  , '.rom': 'controller.png'
  , '.sav': 'controller.png'

  , 'folder': 'folder.png'
  , 'default': 'page_white.png'
};
