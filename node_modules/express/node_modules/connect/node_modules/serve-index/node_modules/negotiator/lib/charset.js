module.exports = preferredCharsets;
preferredCharsets.preferredCharsets = preferredCharsets;

function parseAcceptCharset(accept***REMOVED*** {
  return accept.split(','***REMOVED***.map(function(e***REMOVED*** {
    return parseCharset(e.trim(***REMOVED******REMOVED***;
***REMOVED******REMOVED***.filter(function(e***REMOVED*** {
    return e;
***REMOVED******REMOVED***;
}

function parseCharset(s***REMOVED*** {
  var match = s.match(/^\s*(\S+?***REMOVED***\s*(?:;(.****REMOVED******REMOVED***?$/***REMOVED***;
  if (!match***REMOVED*** return null;

  var charset = match[1];
  var q = 1;
  if (match[2]***REMOVED*** {
    var params = match[2].split(';'***REMOVED***
    for (var i = 0; i < params.length; i ++***REMOVED*** {
      var p = params[i].trim(***REMOVED***.split('='***REMOVED***;
      if (p[0] === 'q'***REMOVED*** {
        q = parseFloat(p[1]***REMOVED***;
        break;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  return {
    charset: charset,
    q: q
***REMOVED***;
}

function getCharsetPriority(charset, accepted***REMOVED*** {
  return (accepted.filter(function(a***REMOVED*** {
    return specify(charset, a***REMOVED***;
***REMOVED******REMOVED***.sort(function (a, b***REMOVED*** {
    // revsort
    return a.s > b.s ? -1 : 1;
***REMOVED******REMOVED***[0] || {q:0}***REMOVED***.q;
}

function specify(charset, spec***REMOVED*** {
  var s = 0;
  if(spec.charset === charset***REMOVED***{
    s |= 1;
***REMOVED*** else if (spec.charset !== '*' ***REMOVED*** {
    return null
***REMOVED***

  return {
    s: s,
    q: spec.q,
***REMOVED***
}

function preferredCharsets(accept, provided***REMOVED*** {
  accept = parseAcceptCharset(accept || ''***REMOVED***;
  if (provided***REMOVED*** {
    return provided.map(function(type***REMOVED*** {
      return [type, getCharsetPriority(type, accept***REMOVED***];
  ***REMOVED******REMOVED***.filter(function(pair***REMOVED*** {
      return pair[1] > 0;
  ***REMOVED******REMOVED***.sort(function(a, b***REMOVED*** {
      // revsort
      return a[1] > b[1] ? -1 : 1;
  ***REMOVED******REMOVED***.map(function(pair***REMOVED*** {
      return pair[0];
  ***REMOVED******REMOVED***;
***REMOVED*** else {
    return accept.sort(function (a, b***REMOVED*** {
      // revsort
      return a.q < b.q ? 1 : -1;
  ***REMOVED******REMOVED***.filter(function(type***REMOVED*** {
      return type.q > 0;
  ***REMOVED******REMOVED***.map(function(type***REMOVED*** {
      return type.charset;
  ***REMOVED******REMOVED***;
***REMOVED***
}
