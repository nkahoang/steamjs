/*!
 * Connect - errorHandler
 * Copyright(c***REMOVED*** 2010 Sencha Inc.
 * Copyright(c***REMOVED*** 2011 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var fs;
try {
  fs = require('graceful-fs'***REMOVED***;
} catch (_***REMOVED*** {
  fs = require('fs'***REMOVED***;
}

// environment

var env = process.env.NODE_ENV || 'development';

/**
 * Error handler:
 *
 * Development error handler, providing stack traces
 * and error message responses for requests accepting text, html,
 * or json.
 *
 * Text:
 *
 *   By default, and when _text/plain_ is accepted a simple stack trace
 *   or error message will be returned.
 *
 * JSON:
 *
 *   When _application/json_ is accepted, connect will respond with
 *   an object in the form of `{ "error": error }`.
 *
 * HTML:
 *
 *   When accepted connect will output a nice html stack trace.
 *
 * @return {Function}
 * @api public
 */

exports = module.exports = function errorHandler(***REMOVED***{
  return function errorHandler(err, req, res, next***REMOVED***{
    if (err.status***REMOVED*** res.statusCode = err.status;
    if (res.statusCode < 400***REMOVED*** res.statusCode = 500;
    if ('test' != env***REMOVED*** console.error(err.stack***REMOVED***;
    var accept = req.headers.accept || '';
    // html
    if (~accept.indexOf('html'***REMOVED******REMOVED*** {
      fs.readFile(__dirname + '/public/style.css', 'utf8', function(e, style***REMOVED***{
        fs.readFile(__dirname + '/public/error.html', 'utf8', function(e, html***REMOVED***{
          var stack = (err.stack || ''***REMOVED***
            .split('\n'***REMOVED***.slice(1***REMOVED***
            .map(function(v***REMOVED***{ return '<li>' + v + '</li>'; }***REMOVED***.join(''***REMOVED***;
            html = html
              .replace('{style}', style***REMOVED***
              .replace('{stack}', stack***REMOVED***
              .replace('{title}', exports.title***REMOVED***
              .replace('{statusCode}', res.statusCode***REMOVED***
              .replace(/\{error\}/g, escapeHTML(err.toString(***REMOVED***.replace(/\n/g, '<br/>'***REMOVED******REMOVED******REMOVED***;
            res.setHeader('Content-Type', 'text/html; charset=utf-8'***REMOVED***;
            res.end(html***REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
    // json
  ***REMOVED*** else if (~accept.indexOf('json'***REMOVED******REMOVED*** {
      var error = { message: err.message, stack: err.stack };
      for (var prop in err***REMOVED*** error[prop] = err[prop];
      var json = JSON.stringify({ error: error }***REMOVED***;
      res.setHeader('Content-Type', 'application/json'***REMOVED***;
      res.end(json***REMOVED***;
    // plain text
  ***REMOVED*** else {
      res.setHeader('Content-Type', 'text/plain'***REMOVED***;
      res.end(err.stack***REMOVED***;
  ***REMOVED***
***REMOVED***;
};

/**
 * Template title, framework authors may override this value.
 */

exports.title = 'Connect';


/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

function escapeHTML(html***REMOVED***{
  return String(html***REMOVED***
    .replace(/&(?!\w+;***REMOVED***/g, '&amp;'***REMOVED***
    .replace(/</g, '&lt;'***REMOVED***
    .replace(/>/g, '&gt;'***REMOVED***
    .replace(/"/g, '&quot;'***REMOVED***;
};