/**
 * Module dependencies.
 */

var crypto = require('crypto'***REMOVED***;

/**
 * Sign the given `val` with `secret`.
 *
 * @param {String} val
 * @param {String} secret
 * @return {String}
 * @api private
 */

exports.sign = function(val, secret***REMOVED***{
  if ('string' != typeof val***REMOVED*** throw new TypeError('cookie required'***REMOVED***;
  if ('string' != typeof secret***REMOVED*** throw new TypeError('secret required'***REMOVED***;
  return val + '.' + crypto
    .createHmac('sha256', secret***REMOVED***
    .update(val***REMOVED***
    .digest('base64'***REMOVED***
    .replace(/\=+$/, ''***REMOVED***;
};

/**
 * Unsign and decode the given `val` with `secret`,
 * returning `false` if the signature is invalid.
 *
 * @param {String} val
 * @param {String} secret
 * @return {String|Boolean}
 * @api private
 */

exports.unsign = function(val, secret***REMOVED***{
  if ('string' != typeof val***REMOVED*** throw new TypeError('cookie required'***REMOVED***;
  if ('string' != typeof secret***REMOVED*** throw new TypeError('secret required'***REMOVED***;
  var str = val.slice(0, val.lastIndexOf('.'***REMOVED******REMOVED***
    , mac = exports.sign(str, secret***REMOVED***;
  
  return exports.sign(mac, secret***REMOVED*** == exports.sign(val, secret***REMOVED*** ? str : false;
};
