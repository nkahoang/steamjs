{
  "name": "send",
  "version": "0.2.0",
  "description": "Better streaming static file server with Range and conditional-GET support",
  "keywords": [
    "static",
    "file",
    "server"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
***REMOVED***,
  "dependencies": {
    "debug": "*",
    "mime": "~1.2.9",
    "fresh": "~0.2.1",
    "range-parser": "~1.0.0"
***REMOVED***,
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "supertest": "0.0.1",
    "connect": "2.x"
***REMOVED***,
  "scripts": {
    "test": "make test"
***REMOVED***,
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/send.git"
***REMOVED***,
  "main": "index",
  "readme": "# send\n\n  Send is Connect's `static(***REMOVED***` extracted for generalized use, a streaming static file\n  server supporting partial responses (Ranges***REMOVED***, conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.\n\n## Installation\n\n    $ npm install send\n\n## Examples\n\n  Small:\n\n```js\nvar ***REMOVED***;\nvar send = require('send'***REMOVED***;\n\nvar app = http.createServer(function(req, res***REMOVED***{\n  send(req, req.url***REMOVED***.pipe(res***REMOVED***;\n}***REMOVED***.listen(3000***REMOVED***;\n```\n\n  Serving from a root directory with custom error-handling:\n\n```js\nvar ***REMOVED***;\nvar send = require('send'***REMOVED***;\nvar url = require('url'***REMOVED***;\n\nvar app = http.createServer(function(req, res***REMOVED***{\n  // your custom error-handling logic:\n  function error(err***REMOVED*** {\n    res.statusCode = err.status || 500;\n    res.end(err.message***REMOVED***;\n***REMOVED***\n\n  // your custom directory handling logic:\n  function redirect(***REMOVED*** {\n    res.statusCode = 301;\n    res.setHeader('Location', req.url + '/'***REMOVED***;\n    res.end('Redirecting to ' + req.url + '/'***REMOVED***;\n***REMOVED***\n\n  // transfer arbitrary files from within\n  // /www/example.com/public/*\n  send(req, url.parse(req.url***REMOVED***.pathname***REMOVED***\n  .root('/www/example.com/public'***REMOVED***\n  .on('error', error***REMOVED***\n  .on('directory', redirect***REMOVED***\n  .pipe(res***REMOVED***;\n}***REMOVED***.listen(3000***REMOVED***;\n```\n\n## API\n\n### Events\n\n  - `error` an error occurred `(err***REMOVED***`\n  - `directory` a directory was requested\n  - `file` a file was requested `(path, stat***REMOVED***`\n  - `stream` file streaming has started `(stream***REMOVED***`\n  - `end` streaming has completed\n\n### .root(dir***REMOVED***\n\n  Serve files relative to `path`. Aliased as `.from(dir***REMOVED***`.\n\n### .index(path***REMOVED***\n\n  By default send supports \"index.html\" files, to disable this\n  invoke `.index(false***REMOVED***` or to supply a new index pass a string.\n\n### .maxage(ms***REMOVED***\n\n  Provide a max-age in milliseconds for http caching, defaults to 0.\n\n### .hidden(bool***REMOVED***\n\n  Enable or disable transfer of hidden files, defaults to false.\n\n## Error-handling\n\n  By default when no `error` listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc.\n\n## Caching\n\n  It does _not_ perform internal caching, you should use a reverse proxy cache such\n  as Varnish for this, or those fancy things called CDNs. If your application is small enough that it would benefit from single-node memory caching, it's small enough that it does not need caching at all ;***REMOVED***.\n\n## Debugging\n\n To enable `debug(***REMOVED***` instrumentation output export __DEBUG__:\n\n```\n$ DEBUG=send node app\n```\n\n## Running tests\n\n```\n$ npm install\n$ make test\n```\n\n## License \n\n(The MIT License***REMOVED***\n\nCopyright (c***REMOVED*** 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'***REMOVED***, to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/visionmedia/send/issues"
***REMOVED***,
  "homepage": "https://github.com/visionmedia/send",
  "_id": "send@0.2.0",
  "dist": {
    "shasum": "1235399382427097fb4559faed20877ce27b187d"
***REMOVED***,
  "_from": "send@0.2.0",
  "_resolved": "https://registry.npmjs.org/send/-/send-0.2.0.tgz"
}
