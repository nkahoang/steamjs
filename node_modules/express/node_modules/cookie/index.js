
/// Serialize the a name value pair into a cookie string suitable for
/// http headers. An optional options object specified cookie parameters
///
/// serialize('foo', 'bar', { httpOnly: true }***REMOVED***
///   => "foo=bar; httpOnly"
///
/// @param {String} name
/// @param {String} val
/// @param {Object} options
/// @return {String}
var serialize = function(name, val, opt***REMOVED***{
    opt = opt || {};
    var enc = opt.encode || encode;
    var pairs = [name + '=' + enc(val***REMOVED***];

    if (null != opt.maxAge***REMOVED*** {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge***REMOVED******REMOVED*** throw new Error('maxAge should be a Number'***REMOVED***;
        pairs.push('Max-Age=' + maxAge***REMOVED***;
  ***REMOVED***

    if (opt.domain***REMOVED*** pairs.push('Domain=' + opt.domain***REMOVED***;
    if (opt.path***REMOVED*** pairs.push('Path=' + opt.path***REMOVED***;
    if (opt.expires***REMOVED*** pairs.push('Expires=' + opt.expires.toUTCString(***REMOVED******REMOVED***;
    if (opt.httpOnly***REMOVED*** pairs.push('HttpOnly'***REMOVED***;
    if (opt.secure***REMOVED*** pairs.push('Secure'***REMOVED***;

    return pairs.join('; '***REMOVED***;
};

/// Parse the given cookie header string into an object
/// The object has the various cookies as keys(names***REMOVED*** => values
/// @param {String} str
/// @return {Object}
var parse = function(str, opt***REMOVED*** {
    opt = opt || {};
    var obj = {}
    var pairs = str.split(/; */***REMOVED***;
    var dec = opt.decode || decode;

    pairs.forEach(function(pair***REMOVED*** {
        var eq_idx = pair.indexOf('='***REMOVED***

        // skip things that don't look like key=value
        if (eq_idx < 0***REMOVED*** {
            return;
      ***REMOVED***

        var key = pair.substr(0, eq_idx***REMOVED***.trim(***REMOVED***
        var val = pair.substr(++eq_idx, pair.length***REMOVED***.trim(***REMOVED***;

        // quoted values
        if ('"' == val[0]***REMOVED*** {
            val = val.slice(1, -1***REMOVED***;
      ***REMOVED***

        // only assign once
        if (undefined == obj[key]***REMOVED*** {
            try {
                obj[key] = dec(val***REMOVED***;
          ***REMOVED*** catch (e***REMOVED*** {
                obj[key] = val;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED******REMOVED***;

    return obj;
};

var encode = encodeURIComponent;
var decode = decodeURIComponent;

module.exports.serialize = serialize;
module.exports.parse = parse;
