#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander'***REMOVED***
  , mkdirp = require('mkdirp'***REMOVED***
  , pkg = require('../package.json'***REMOVED***
  , version = pkg.version
  , os = require('os'***REMOVED***
  , fs = require('fs'***REMOVED***;

// CLI

program
  .version(version***REMOVED***
  .usage('[options] [dir]'***REMOVED***
  .option('-s, --sessions', 'add session support'***REMOVED***
  .option('-e, --ejs', 'add ejs engine support (defaults to jade***REMOVED***'***REMOVED***
  .option('-J, --jshtml', 'add jshtml engine support (defaults to jade***REMOVED***'***REMOVED***
  .option('-H, --hogan', 'add hogan.js engine support'***REMOVED***
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus***REMOVED*** (defaults to plain css***REMOVED***'***REMOVED***
  .option('-f, --force', 'force on non-empty directory'***REMOVED***
  .parse(process.argv***REMOVED***;

// Path

var path = program.args.shift(***REMOVED*** || '.';

// end-of-line code

var eol = os.EOL

// Template engine

program.template = 'jade';
if (program.ejs***REMOVED*** program.template = 'ejs';
if (program.jshtml***REMOVED*** program.template = 'jshtml';
if (program.hogan***REMOVED*** program.template = 'hjs';

/**
 * Routes index template.
 */

var index = [
    ''
  , '/*'
  , ' * GET home page.'
  , ' */'
  , ''
  , 'exports.index = function(req, res***REMOVED***{'
  , '  res.render(\'index\', { title: \'Express\' }***REMOVED***;'
  , '};'
].join(eol***REMOVED***;

/**
 * Routes users template.
 */

var users = [
    ''
  , '/*'
  , ' * GET users listing.'
  , ' */'
  , ''
  , 'exports.list = function(req, res***REMOVED***{'
  , '  res.send("respond with a resource"***REMOVED***;'
  , '};'
].join(eol***REMOVED***;

/**
 * Jade layout template.
 */

var jadeLayout = [
    'doctype html'
  , 'html'
  , '  head'
  , '    title= title'
  , '    link(rel=\'stylesheet\', href=\'/stylesheets/style.css\'***REMOVED***'
  , '  body'
  , '    block content'
].join(eol***REMOVED***;

/**
 * Jade index template.
 */

var jadeIndex = [
    'extends layout'
  , ''
  , 'block content'
  , '  h1= title'
  , '  p Welcome to #{title}'
].join(eol***REMOVED***;

/**
 * EJS index template.
 */

var ejsIndex = [
    '<!DOCTYPE html>'
  , '<html>'
  , '  <head>'
  , '    <title><%= title %></title>'
  , '    <link rel=\'stylesheet\' href=\'/stylesheets/style.css\' />'
  , '  </head>'
  , '  <body>'
  , '    <h1><%= title %></h1>'
  , '    <p>Welcome to <%= title %></p>'
  , '  </body>'
  , '</html>'
].join(eol***REMOVED***;

/**
 * JSHTML layout template.
 */

var jshtmlLayout = [
    '<!DOCTYPE html>'
  , '<html>'
  , '  <head>'
  , '    <title> @write(title***REMOVED*** </title>'
  , '    <link rel=\'stylesheet\' href=\'/stylesheets/style.css\' />'
  , '  </head>'
  , '  <body>'
  , '    @write(body***REMOVED***'
  , '  </body>'
  , '</html>'
].join(eol***REMOVED***;

/**
 * JSHTML index template.
 */

var jshtmlIndex = [
    '<h1>@write(title***REMOVED***</h1>'
  , '<p>Welcome to @write(title***REMOVED***</p>'
].join(eol***REMOVED***;

/**
 * Hogan.js index template.
 */
var hoganIndex = [
    '<!DOCTYPE html>'
  , '<html>'
  , '  <head>'
  , '    <title>{{ title }}</title>'
  , '    <link rel=\'stylesheet\' href=\'/stylesheets/style.css\' />'
  , '  </head>'
  , '  <body>'
  , '    <h1>{{ title }}</h1>'
  , '    <p>Welcome to {{ title }}</p>'
  , '  </body>'
  , '</html>'
].join(eol***REMOVED***;

/**
 * Default css template.
 */

var css = [
    'body {'
  , '  padding: 50px;'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
  , '}'
  , ''
  , 'a {'
  , '  color: #00B7FF;'
  , '}'
].join(eol***REMOVED***;

/**
 * Default less template.
 */

var less = [
    'body {'
  , '  padding: 50px;'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;'
  , '}'
  , ''
  , 'a {'
  , '  color: #00B7FF;'
  , '}'
].join(eol***REMOVED***;

/**
 * Default stylus template.
 */

var stylus = [
    'body'
  , '  padding: 50px'
  , '  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif'
  , 'a'
  , '  color: #00B7FF'
].join(eol***REMOVED***;

/**
 * App template.
 */

var app = [
    ''
  , '/**'
  , ' * Module dependencies.'
  , ' */'
  , ''
  , 'var express = require(\'express\'***REMOVED***;'
  , 'var routes = require(\'./routes\'***REMOVED***;'
  , 'var user = require(\'./routes/user\'***REMOVED***;'
  , 'var http = require(\'http\'***REMOVED***;'
  , 'var path = require(\'path\'***REMOVED***;'
  , ''
  , 'var ***REMOVED***;'
  , ''
  , '// all environments'
  , 'app.set(\'port\', process.env.PORT || 3000***REMOVED***;'
  , 'app.set(\'views\', path.join(__dirname, \'views\'***REMOVED******REMOVED***;'
  , 'app.set(\'view engine\', \':TEMPLATE\'***REMOVED***;'
  , 'app.use(express.favicon(***REMOVED******REMOVED***;'
  , 'app.use(express.logger(\'dev\'***REMOVED******REMOVED***;'
  , 'app.use(express.json(***REMOVED******REMOVED***;'
  , 'app.use(express.urlencoded(***REMOVED******REMOVED***;'
  , 'app.use(express.methodOverride(***REMOVED******REMOVED***;{sess}'
  , 'app.use(app.router***REMOVED***;{css}'
  , 'app.use(express.static(path.join(__dirname, \'public\'***REMOVED******REMOVED******REMOVED***;'
  , ''
  , '// development only'
  , 'if (\'development\' == app.get(\'env\'***REMOVED******REMOVED*** {'
  , '  app.use(express.errorHandler(***REMOVED******REMOVED***;'
  , '}'
  , ''
  , 'app.get(\'/\', routes.index***REMOVED***;'
  , 'app.get(\'/users\', user.list***REMOVED***;'
  , ''
  , 'http.createServer(app***REMOVED***.listen(app.get(\'port\'***REMOVED***, function(***REMOVED***{'
  , '  console.log(\'Express server listening on port \' + app.get(\'port\'***REMOVED******REMOVED***;'
  , '}***REMOVED***;'
  , ''
].join(eol***REMOVED***;

// Generate application

(function createApplication(path***REMOVED*** {
  emptyDirectory(path, function(empty***REMOVED***{
    if (empty || program.force***REMOVED*** {
      createApplicationAt(path***REMOVED***;
  ***REMOVED*** else {
      program.confirm('destination is not empty, continue? ', function(ok***REMOVED***{
        if (ok***REMOVED*** {
          process.stdin.destroy(***REMOVED***;
          createApplicationAt(path***REMOVED***;
      ***REMOVED*** else {
          abort('aborting'***REMOVED***;
      ***REMOVED***
    ***REMOVED******REMOVED***;
  ***REMOVED***
***REMOVED******REMOVED***;
}***REMOVED***(path***REMOVED***;

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path***REMOVED*** {
  console.log(***REMOVED***;
  process.on('exit', function(***REMOVED***{
    console.log(***REMOVED***;
    console.log('   install dependencies:'***REMOVED***;
    console.log('     $ cd %s && npm install', path***REMOVED***;
    console.log(***REMOVED***;
    console.log('   run the app:'***REMOVED***;
    console.log('     $ node app'***REMOVED***;
    console.log(***REMOVED***;
***REMOVED******REMOVED***;

  mkdir(path, function(***REMOVED***{
    mkdir(path + '/public'***REMOVED***;
    mkdir(path + '/public/javascripts'***REMOVED***;
    mkdir(path + '/public/images'***REMOVED***;
    mkdir(path + '/public/stylesheets', function(***REMOVED***{
      switch (program.css***REMOVED*** {
        case 'less':
          write(path + '/public/stylesheets/style.less', less***REMOVED***;
          break;
        case 'stylus':
          write(path + '/public/stylesheets/style.styl', stylus***REMOVED***;
          break;
        default:
          write(path + '/public/stylesheets/style.css', css***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;

    mkdir(path + '/routes', function(***REMOVED***{
      write(path + '/routes/index.js', index***REMOVED***;
      write(path + '/routes/user.js', users***REMOVED***;
  ***REMOVED******REMOVED***;

    mkdir(path + '/views', function(***REMOVED***{
      switch (program.template***REMOVED*** {
        case 'ejs':
          write(path + '/views/index.ejs', ejsIndex***REMOVED***;
          break;
        case 'jade':
          write(path + '/views/layout.jade', jadeLayout***REMOVED***;
          write(path + '/views/index.jade', jadeIndex***REMOVED***;
          break;
        case 'jshtml':
          write(path + '/views/layout.jshtml', jshtmlLayout***REMOVED***;
          write(path + '/views/index.jshtml', jshtmlIndex***REMOVED***;
          break;
        case 'hjs':
          write(path + '/views/index.hjs', hoganIndex***REMOVED***;
          break;

    ***REMOVED***
  ***REMOVED******REMOVED***;

    // CSS Engine support
    switch (program.css***REMOVED*** {
      case 'less':
        app = app.replace('{css}', eol + 'app.use(require(\'less-middleware\'***REMOVED***({ src: path.join(__dirname, \'public\'***REMOVED*** }***REMOVED******REMOVED***;'***REMOVED***;
        break;
      case 'stylus':
        app = app.replace('{css}', eol + 'app.use(require(\'stylus\'***REMOVED***.middleware(path.join(__dirname, \'public\'***REMOVED******REMOVED******REMOVED***;'***REMOVED***;
        break;
      default:
        app = app.replace('{css}', ''***REMOVED***;
  ***REMOVED***

    // Session support
    app = app.replace('{sess}', program.sessions
      ? eol + 'app.use(express.cookieParser(\'your secret here\'***REMOVED******REMOVED***;' + eol + 'app.use(express.session(***REMOVED******REMOVED***;'
      : ''***REMOVED***;

    // Template support
    app = app.replace(':TEMPLATE', program.template***REMOVED***;

    // package.json
    var pkg = {
        name: 'application-name'
      , version: '0.0.1'
      , private: true
      , scripts: { start: 'node app.js' }
      , dependencies: {
        express: version
    ***REMOVED***
  ***REMOVED***

    if (program.template***REMOVED*** pkg.dependencies[program.template] = '*';

    // CSS Engine support
    switch (program.css***REMOVED*** {
      case 'less':
        pkg.dependencies['less-middleware'] = '~0.1.15';
        break;
      default:
        if (program.css***REMOVED*** {
          pkg.dependencies[program.css] = '*';
      ***REMOVED***
  ***REMOVED***

    write(path + '/package.json', JSON.stringify(pkg, null, 2***REMOVED******REMOVED***;
    write(path + '/app.js', app***REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn***REMOVED*** {
  fs.readdir(path, function(err, files***REMOVED***{
    if (err && 'ENOENT' != err.code***REMOVED*** throw err;
    fn(!files || !files.length***REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str***REMOVED*** {
  fs.writeFile(path, str***REMOVED***;
  console.log('   \x1b[36mcreate\x1b[0m : ' + path***REMOVED***;
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn***REMOVED*** {
  mkdirp(path, 0755, function(err***REMOVED***{
    if (err***REMOVED*** throw err;
    console.log('   \033[36mcreate\033[0m : ' + path***REMOVED***;
    fn && fn(***REMOVED***;
***REMOVED******REMOVED***;
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str***REMOVED*** {
  console.error(str***REMOVED***;
  process.exit(1***REMOVED***;
}
