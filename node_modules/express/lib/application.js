/**
 * Module dependencies.
 */

var connect = require('connect'***REMOVED***
  , Router = require('./router'***REMOVED***
  , methods = require('methods'***REMOVED***
  , middleware = require('./middleware'***REMOVED***
  , debug = require('debug'***REMOVED***('express:application'***REMOVED***
  , locals = require('./utils'***REMOVED***.locals
  , View = require('./view'***REMOVED***
  , utils = connect.utils
  , ***REMOVED***;

/**
 * Application prototype.
 */

var app = exports = module.exports = {};

/**
 * Initialize the server.
 *
 *   - setup default configuration
 *   - setup default middleware
 *   - setup route reflection methods
 *
 * @api private
 */

app.init = function(***REMOVED***{
  this.cache = {};
  this.settings = {};
  this.engines = {};
  this.defaultConfiguration(***REMOVED***;
};

/**
 * Initialize application configuration.
 *
 * @api private
 */

app.defaultConfiguration = function(***REMOVED***{
  // default settings
  this.enable('x-powered-by'***REMOVED***;
  this.enable('etag'***REMOVED***;
  this.set('env', process.env.NODE_ENV || 'development'***REMOVED***;
  this.set('subdomain offset', 2***REMOVED***;
  debug('booting in %s mode', this.get('env'***REMOVED******REMOVED***;

  // implicit middleware
  this.use(connect.query(***REMOVED******REMOVED***;
  this.use(middleware.init(this***REMOVED******REMOVED***;

  // inherit protos
  this.on('mount', function(parent***REMOVED***{
    this.request.__proto__ = parent.request;
    this.response.__proto__ = parent.response;
    this.engines.__proto__ = parent.engines;
    this.settings.__proto__ = parent.settings;
***REMOVED******REMOVED***;

  // router
  this._router = new Router(this***REMOVED***;
  this.routes = this._router.map;
  this.__defineGetter__('router', function(***REMOVED***{
    this._usedRouter = true;
    this._router.caseSensitive = this.enabled('case sensitive routing'***REMOVED***;
    this._router.strict = this.enabled('strict routing'***REMOVED***;
    return this._router.middleware;
***REMOVED******REMOVED***;

  // setup locals
  this.locals = locals(this***REMOVED***;

  // default locals
  this.locals.settings = this.settings;

  // default configuration
  this.set('view', View***REMOVED***;
  this.set('views', process.cwd(***REMOVED*** + '/views'***REMOVED***;
  this.set('jsonp callback name', 'callback'***REMOVED***;

  this.configure('development', function(***REMOVED***{
    this.set('json spaces', 2***REMOVED***;
***REMOVED******REMOVED***;

  this.configure('production', function(***REMOVED***{
    this.enable('view cache'***REMOVED***;
***REMOVED******REMOVED***;
};

/**
 * Proxy `connect#use(***REMOVED***` to apply settings to
 * mounted applications.
 *
 * @param {String|Function|Server} route
 * @param {Function|Server} fn
 * @return {app} for chaining
 * @api public
 */

app.use = function(route, fn***REMOVED***{
  var app;

  // default route to '/'
  if ('string' != typeof route***REMOVED*** fn = route, route = '/';

  // express app
  if (fn.handle && fn.set***REMOVED*** app = fn;

  // restore .app property on req and res
  if (app***REMOVED*** {
    app.route = route;
    fn = function(req, res, next***REMOVED*** {
      var orig = req.app;
      app.handle(req, res, function(err***REMOVED***{
        req.__proto__ = orig.request;
        res.__proto__ = orig.response;
        next(err***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***;
***REMOVED***

  connect.proto.use.call(this, route, fn***REMOVED***;

  // mounted an app
  if (app***REMOVED*** {
    app.parent = this;
    app.emit('mount', this***REMOVED***;
***REMOVED***

  return this;
};

/**
 * Register the given template engine callback `fn`
 * as `ext`.
 *
 * By default will `require(***REMOVED***` the engine based on the
 * file extension. For example if you try to render
 * a "foo.jade" file Express will invoke the following internally:
 *
 *     app.engine('jade', require('jade'***REMOVED***.__express***REMOVED***;
 *
 * For engines that do not provide `.__express` out of the box,
 * or if you wish to "map" a different extension to the template engine
 * you may use this method. For example mapping the EJS template engine to
 * ".html" files:
 *
 *     app.engine('html', require('ejs'***REMOVED***.renderFile***REMOVED***;
 *
 * In this case EJS provides a `.renderFile(***REMOVED***` method with
 * the same signature that Express expects: `(path, options, callback***REMOVED***`,
 * though note that it aliases this method as `ejs.__express` internally
 * so if you're using ".ejs" extensions you dont need to do anything.
 *
 * Some template engines do not follow this convention, the
 * [Consolidate.js](https://github.com/visionmedia/consolidate.js***REMOVED***
 * library was created to map all of node's popular template
 * engines to follow this convention, thus allowing them to
 * work seamlessly within Express.
 *
 * @param {String} ext
 * @param {Function} fn
 * @return {app} for chaining
 * @api public
 */

app.engine = function(ext, fn***REMOVED***{
  if ('function' != typeof fn***REMOVED*** throw new Error('callback function required'***REMOVED***;
  if ('.' != ext[0]***REMOVED*** ext = '.' + ext;
  this.engines[ext] = fn;
  return this;
};

/**
 * Map the given param placeholder `name`(s***REMOVED*** to the given callback(s***REMOVED***.
 *
 * Parameter mapping is used to provide pre-conditions to routes
 * which use normalized placeholders. For example a _:user_id_ parameter
 * could automatically load a user's information from the database without
 * any additional code,
 *
 * The callback uses the same signature as middleware, the only difference
 * being that the value of the placeholder is passed, in this case the _id_
 * of the user. Once the `next(***REMOVED***` function is invoked, just like middleware
 * it will continue on to execute the route, or subsequent parameter functions.
 *
 *      app.param('user_id', function(req, res, next, id***REMOVED***{
 *        User.find(id, function(err, user***REMOVED***{
 *          if (err***REMOVED*** {
 *            next(err***REMOVED***;
 *        ***REMOVED*** else if (user***REMOVED*** {
 *            req.user = user;
 *            next(***REMOVED***;
 *        ***REMOVED*** else {
 *            next(new Error('failed to load user'***REMOVED******REMOVED***;
 *        ***REMOVED***
 *      ***REMOVED******REMOVED***;
 *    ***REMOVED******REMOVED***;
 *
 * @param {String|Array} name
 * @param {Function} fn
 * @return {app} for chaining
 * @api public
 */

app.param = function(name, fn***REMOVED***{
  var self = this
    , fns = [].slice.call(arguments, 1***REMOVED***;

  // array
  if (Array.isArray(name***REMOVED******REMOVED*** {
    name.forEach(function(name***REMOVED***{
      fns.forEach(function(fn***REMOVED***{
        self.param(name, fn***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
  // param logic
***REMOVED*** else if ('function' == typeof name***REMOVED*** {
    this._router.param(name***REMOVED***;
  // single
***REMOVED*** else {
    if (':' == name[0]***REMOVED*** name = name.substr(1***REMOVED***;
    fns.forEach(function(fn***REMOVED***{
      self._router.param(name, fn***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***

  return this;
};

/**
 * Assign `setting` to `val`, or return `setting`'s value.
 *
 *    app.set('foo', 'bar'***REMOVED***;
 *    app.get('foo'***REMOVED***;
 *    // => "bar"
 *
 * Mounted servers inherit their parent server's settings.
 *
 * @param {String} setting
 * @param {String} val
 * @return {Server} for chaining
 * @api public
 */

app.set = function(setting, val***REMOVED***{
  if (1 == arguments.length***REMOVED*** {
    return this.settings[setting];
***REMOVED*** else {
    this.settings[setting] = val;
    return this;
***REMOVED***
};

/**
 * Return the app's absolute pathname
 * based on the parent(s***REMOVED*** that have
 * mounted it.
 *
 * For example if the application was
 * mounted as "/admin", which itself
 * was mounted as "/blog" then the
 * return value would be "/blog/admin".
 *
 * @return {String}
 * @api private
 */

app.path = function(***REMOVED***{
  return this.parent
    ? this.parent.path(***REMOVED*** + this.route
    : '';
};

/**
 * Check if `setting` is enabled (truthy***REMOVED***.
 *
 *    app.enabled('foo'***REMOVED***
 *    // => false
 *
 *    app.enable('foo'***REMOVED***
 *    app.enabled('foo'***REMOVED***
 *    // => true
 *
 * @param {String} setting
 * @return {Boolean}
 * @api public
 */

app.enabled = function(setting***REMOVED***{
  return !!this.set(setting***REMOVED***;
};

/**
 * Check if `setting` is disabled.
 *
 *    app.disabled('foo'***REMOVED***
 *    // => true
 *
 *    app.enable('foo'***REMOVED***
 *    app.disabled('foo'***REMOVED***
 *    // => false
 *
 * @param {String} setting
 * @return {Boolean}
 * @api public
 */

app.disabled = function(setting***REMOVED***{
  return !this.set(setting***REMOVED***;
};

/**
 * Enable `setting`.
 *
 * @param {String} setting
 * @return {app} for chaining
 * @api public
 */

app.enable = function(setting***REMOVED***{
  return this.set(setting, true***REMOVED***;
};

/**
 * Disable `setting`.
 *
 * @param {String} setting
 * @return {app} for chaining
 * @api public
 */

app.disable = function(setting***REMOVED***{
  return this.set(setting, false***REMOVED***;
};

/**
 * Configure callback for zero or more envs,
 * when no `env` is specified that callback will
 * be invoked for all environments. Any combination
 * can be used multiple times, in any order desired.
 *
 * Examples:
 *
 *    app.configure(function(***REMOVED***{
 *      // executed for all envs
 *  ***REMOVED******REMOVED***;
 *
 *    app.configure('stage', function(***REMOVED***{
 *      // executed staging env
 *  ***REMOVED******REMOVED***;
 *
 *    app.configure('stage', 'production', function(***REMOVED***{
 *      // executed for stage and production
 *  ***REMOVED******REMOVED***;
 *
 * Note:
 *
 *  These callbacks are invoked immediately, and
 *  are effectively sugar for the following:
 *
 *     var env = process.env.NODE_ENV || 'development';
 *
 *      switch (env***REMOVED*** {
 *        case 'development':
 *          ...
 *          break;
 *        case 'stage':
 *          ...
 *          break;
 *        case 'production':
 *          ...
 *          break;
 *    ***REMOVED***
 *
 * @param {String} env...
 * @param {Function} fn
 * @return {app} for chaining
 * @api public
 */

app.configure = function(env, fn***REMOVED***{
  var envs = 'all'
    , args = [].slice.call(arguments***REMOVED***;
  fn = args.pop(***REMOVED***;
  if (args.length***REMOVED*** envs = args;
  if ('all' == envs || ~envs.indexOf(this.settings.env***REMOVED******REMOVED*** fn.call(this***REMOVED***;
  return this;
};

/**
 * Delegate `.VERB(...***REMOVED***` calls to `router.VERB(...***REMOVED***`.
 */

methods.forEach(function(method***REMOVED***{
  app[method] = function(path***REMOVED***{
    if ('get' == method && 1 == arguments.length***REMOVED*** return this.set(path***REMOVED***;

    // deprecated
    if (Array.isArray(path***REMOVED******REMOVED*** {
      console.trace('passing an array to app.VERB(***REMOVED*** is deprecated and will be removed in 4.0'***REMOVED***;
  ***REMOVED***

    // if no router attached yet, attach the router
    if (!this._usedRouter***REMOVED*** this.use(this.router***REMOVED***;

    // setup route
    this._router[method].apply(this._router, arguments***REMOVED***;
    return this;
***REMOVED***;
}***REMOVED***;

/**
 * Special-cased "all" method, applying the given route `path`,
 * middleware, and callback to _every_ HTTP method.
 *
 * @param {String} path
 * @param {Function} ...
 * @return {app} for chaining
 * @api public
 */

app.all = function(path***REMOVED***{
  var args = arguments;
  methods.forEach(function(method***REMOVED***{
    app[method].apply(this, args***REMOVED***;
***REMOVED***, this***REMOVED***;
  return this;
};

// del -> delete alias

app.del = app.delete;

/**
 * Render the given view `name` name with `options`
 * and a callback accepting an error and the
 * rendered template string.
 *
 * Example:
 *
 *    app.render('email', { name: 'Tobi' }, function(err, html***REMOVED***{
 *      // ...
 *  ***REMOVED******REMOVED***
 *
 * @param {String} name
 * @param {String|Function} options or fn
 * @param {Function} fn
 * @api public
 */

app.render = function(name, options, fn***REMOVED***{
  var opts = {}
    , cache = this.cache
    , engines = this.engines
    , view;

  // support callback function as second arg
  if ('function' == typeof options***REMOVED*** {
    fn = options, options = {};
***REMOVED***

  // merge app.locals
  utils.merge(opts, this.locals***REMOVED***;

  // merge options._locals
  if (options._locals***REMOVED*** utils.merge(opts, options._locals***REMOVED***;

  // merge options
  utils.merge(opts, options***REMOVED***;

  // set .cache unless explicitly provided
  opts.cache = null == opts.cache
    ? this.enabled('view cache'***REMOVED***
    : opts.cache;

  // primed cache
  if (opts.cache***REMOVED*** view = cache[name];

  // view
  if (!view***REMOVED*** {
    view = new (this.get('view'***REMOVED******REMOVED***(name, {
      defaultEngine: this.get('view engine'***REMOVED***,
      root: this.get('views'***REMOVED***,
      engines: engines
  ***REMOVED******REMOVED***;

    if (!view.path***REMOVED*** {
      var err = new Error('Failed to lookup view "' + name + '" in views directory "' + view.root + '"'***REMOVED***;
      err.view = view;
      return fn(err***REMOVED***;
  ***REMOVED***

    // prime the cache
    if (opts.cache***REMOVED*** cache[name] = view;
***REMOVED***

  // render
  try {
    view.render(opts, fn***REMOVED***;
***REMOVED*** catch (err***REMOVED*** {
    fn(err***REMOVED***;
***REMOVED***
};

/**
 * Listen for connections.
 *
 * A node `http.Server` is returned, with this
 * application (which is a `Function`***REMOVED*** as its
 * callback. If you wish to create both an HTTP
 * and HTTPS server you may do so with the "http"
 * and "https" modules as shown here:
 *
 *    var ***REMOVED***
 *      , https = require('https'***REMOVED***
 *      , ***REMOVED***
 *      , ***REMOVED***;
 *
 *    http.createServer(app***REMOVED***.listen(80***REMOVED***;
 *    https.createServer({ ... }, app***REMOVED***.listen(443***REMOVED***;
 *
 * @return {http.Server}
 * @api public
 */

app.listen = function(***REMOVED***{
  var server = http.createServer(this***REMOVED***;
  return server.listen.apply(server, arguments***REMOVED***;
};
