
/**
 * Module dependencies.
 */

var mime = require('connect'***REMOVED***.mime
  , crc32 = require('buffer-crc32'***REMOVED***;

/**
 * toString ref.
 */

var toString = {}.toString;

/**
 * Return ETag for `body`.
 *
 * @param {String|Buffer} body
 * @return {String}
 * @api private
 */

exports.etag = function(body***REMOVED***{
  return '"' + crc32.signed(body***REMOVED*** + '"';
};

/**
 * Make `locals(***REMOVED***` bound to the given `obj`.
 *
 * This is used for `app.locals` and `res.locals`.
 *
 * @param {Object} obj
 * @return {Function}
 * @api private
 */

exports.locals = function(***REMOVED***{
  function locals(obj***REMOVED***{
    for (var key in obj***REMOVED*** locals[key] = obj[key];
    return obj;
***REMOVED***;

  return locals;
};

/**
 * Check if `path` looks absolute.
 *
 * @param {String} path
 * @return {Boolean}
 * @api private
 */

exports.isAbsolute = function(path***REMOVED***{
  if ('/' == path[0]***REMOVED*** return true;
  if (':' == path[1] && '\\' == path[2]***REMOVED*** return true;
  if ('\\\\' == path.substring(0, 2***REMOVED******REMOVED*** return true; // Microsoft Azure absolute path
};

/**
 * Flatten the given `arr`.
 *
 * @param {Array} arr
 * @return {Array}
 * @api private
 */

exports.flatten = function(arr, ret***REMOVED***{
  var ret = ret || []
    , len = arr.length;
  for (var i = 0; i < len; ++i***REMOVED*** {
    if (Array.isArray(arr[i]***REMOVED******REMOVED*** {
      exports.flatten(arr[i], ret***REMOVED***;
  ***REMOVED*** else {
      ret.push(arr[i]***REMOVED***;
  ***REMOVED***
***REMOVED***
  return ret;
};

/**
 * Normalize the given `type`, for example "html" becomes "text/html".
 *
 * @param {String} type
 * @return {Object}
 * @api private
 */

exports.normalizeType = function(type***REMOVED***{
  return ~type.indexOf('/'***REMOVED***
    ? acceptParams(type***REMOVED***
    : { value: mime.lookup(type***REMOVED***, params: {} };
};

/**
 * Normalize `types`, for example "html" becomes "text/html".
 *
 * @param {Array} types
 * @return {Array}
 * @api private
 */

exports.normalizeTypes = function(types***REMOVED***{
  var ret = [];

  for (var i = 0; i < types.length; ++i***REMOVED*** {
    ret.push(exports.normalizeType(types[i]***REMOVED******REMOVED***;
***REMOVED***

  return ret;
};

/**
 * Return the acceptable type in `types`, if any.
 *
 * @param {Array} types
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.acceptsArray = function(types, str***REMOVED***{
  // accept anything when Accept is not present
  if (!str***REMOVED*** return types[0];

  // parse
  var accepted = exports.parseAccept(str***REMOVED***
    , normalized = exports.normalizeTypes(types***REMOVED***
    , len = accepted.length;

  for (var i = 0; i < len; ++i***REMOVED*** {
    for (var j = 0, jlen = types.length; j < jlen; ++j***REMOVED*** {
      if (exports.accept(normalized[j], accepted[i]***REMOVED******REMOVED*** {
        return types[j];
    ***REMOVED***
  ***REMOVED***
***REMOVED***
};

/**
 * Check if `type(s***REMOVED***` are acceptable based on
 * the given `str`.
 *
 * @param {String|Array} type(s***REMOVED***
 * @param {String} str
 * @return {Boolean|String}
 * @api private
 */

exports.accepts = function(type, str***REMOVED***{
  if ('string' == typeof type***REMOVED*** type = type.split(/ *, */***REMOVED***;
  return exports.acceptsArray(type, str***REMOVED***;
};

/**
 * Check if `type` array is acceptable for `other`.
 *
 * @param {Object} type
 * @param {Object} other
 * @return {Boolean}
 * @api private
 */

exports.accept = function(type, other***REMOVED***{
  var t = type.value.split('/'***REMOVED***;
  return (t[0] == other.type || '*' == other.type***REMOVED***
    && (t[1] == other.subtype || '*' == other.subtype***REMOVED***
    && paramsEqual(type.params, other.params***REMOVED***;
};

/**
 * Check if accept params are equal.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Boolean}
 * @api private
 */

function paramsEqual(a, b***REMOVED***{
  return !Object.keys(a***REMOVED***.some(function(k***REMOVED*** {
    return a[k] != b[k];
***REMOVED******REMOVED***;
}

/**
 * Parse accept `str`, returning
 * an array objects containing
 * `.type` and `.subtype` along
 * with the values provided by
 * `parseQuality(***REMOVED***`.
 *
 * @param {Type} name
 * @return {Type}
 * @api private
 */

exports.parseAccept = function(str***REMOVED***{
  return exports
    .parseParams(str***REMOVED***
    .map(function(obj***REMOVED***{
      var parts = obj.value.split('/'***REMOVED***;
      obj.type = parts[0];
      obj.subtype = parts[1];
      return obj;
  ***REMOVED******REMOVED***;
};

/**
 * Parse quality `str`, returning an
 * array of objects with `.value`,
 * `.quality` and optional `.params`
 *
 * @param {String} str
 * @return {Array}
 * @api private
 */

exports.parseParams = function(str***REMOVED***{
  return str
    .split(/ *, */***REMOVED***
    .map(acceptParams***REMOVED***
    .filter(function(obj***REMOVED***{
      return obj.quality;
  ***REMOVED******REMOVED***
    .sort(function(a, b***REMOVED***{
      if (a.quality === b.quality***REMOVED*** {
        return a.originalIndex - b.originalIndex;
    ***REMOVED*** else {
        return b.quality - a.quality;
    ***REMOVED***
  ***REMOVED******REMOVED***;
};

/**
 * Parse accept params `str` returning an
 * object with `.value`, `.quality` and `.params`.
 * also includes `.originalIndex` for stable sorting
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function acceptParams(str, index***REMOVED*** {
  var parts = str.split(/ *; */***REMOVED***;
  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };

  for (var i = 1; i < parts.length; ++i***REMOVED*** {
    var pms = parts[i].split(/ *= */***REMOVED***;
    if ('q' == pms[0]***REMOVED*** {
      ret.quality = parseFloat(pms[1]***REMOVED***;
  ***REMOVED*** else {
      ret.params[pms[0]] = pms[1];
  ***REMOVED***
***REMOVED***

  return ret;
}

/**
 * Escape special characters in the given string of html.
 *
 * @param  {String} html
 * @return {String}
 * @api private
 */

exports.escape = function(html***REMOVED*** {
  return String(html***REMOVED***
    .replace(/&/g, '&amp;'***REMOVED***
    .replace(/"/g, '&quot;'***REMOVED***
    .replace(/</g, '&lt;'***REMOVED***
    .replace(/>/g, '&gt;'***REMOVED***;
};

/**
 * Normalize the given path string,
 * returning a regular expression.
 *
 * An empty array should be passed,
 * which will contain the placeholder
 * key names. For example "/user/:id" will
 * then contain ["id"].
 *
 * @param  {String|RegExp|Array} path
 * @param  {Array} keys
 * @param  {Boolean} sensitive
 * @param  {Boolean} strict
 * @return {RegExp}
 * @api private
 */

exports.pathRegexp = function(path, keys, sensitive, strict***REMOVED*** {
  if (toString.call(path***REMOVED*** == '[object RegExp]'***REMOVED*** return path;
  if (Array.isArray(path***REMOVED******REMOVED*** path = '(' + path.join('|'***REMOVED*** + '***REMOVED***';
  path = path
    .concat(strict ? '' : '/?'***REMOVED***
    .replace(/\/\(/g, '(?:/'***REMOVED***
    .replace(/(\/***REMOVED***?(\.***REMOVED***?:(\w+***REMOVED***(?:(\(.*?\***REMOVED******REMOVED******REMOVED***?(\?***REMOVED***?(\****REMOVED***?/g, function(_, slash, format, key, capture, optional, star***REMOVED***{
      keys.push({ name: key, optional: !! optional }***REMOVED***;
      slash = slash || '';
      return ''
        + (optional ? '' : slash***REMOVED***
        + '(?:'
        + (optional ? slash : ''***REMOVED***
        + (format || ''***REMOVED*** + (capture || (format && '([^/.]+?***REMOVED***' || '([^/]+?***REMOVED***'***REMOVED******REMOVED*** + '***REMOVED***'
        + (optional || ''***REMOVED***
        + (star ? '(/****REMOVED***?' : ''***REMOVED***;
  ***REMOVED******REMOVED***
    .replace(/([\/.]***REMOVED***/g, '\\$1'***REMOVED***
    .replace(/\*/g, '(.****REMOVED***'***REMOVED***;
  return new RegExp('^' + path + '$', sensitive ? '' : 'i'***REMOVED***;
}
