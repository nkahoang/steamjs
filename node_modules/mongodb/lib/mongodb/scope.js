var Cursor2 = require('./cursor'***REMOVED***.Cursor
  , Readable = require('stream'***REMOVED***.Readable
  , utils = require('./utils'***REMOVED***
  , inherits = require('util'***REMOVED***.inherits;

var Cursor = function Cursor(_scope_options, _cursor***REMOVED*** {
  //
  // Backward compatible methods
  this.toArray = function(callback***REMOVED*** {
    return _cursor.toArray(callback***REMOVED***;
***REMOVED***

  this.each = function(callback***REMOVED*** {
    return _cursor.each(callback***REMOVED***;
***REMOVED***

  this.next = function(callback***REMOVED*** {
    this.nextObject(callback***REMOVED***;
***REMOVED***

  this.nextObject = function(callback***REMOVED*** {
    return _cursor.nextObject(callback***REMOVED***;
***REMOVED***

  this.setReadPreference = function(readPreference, callback***REMOVED*** {
    _scope_options.readPreference = {readPreference: readPreference};
    _cursor.setReadPreference(readPreference, callback***REMOVED***;
    return this;
***REMOVED***

  this.batchSize = function(batchSize, callback***REMOVED*** {
    _scope_options.batchSize = batchSize;
    _cursor.batchSize(_scope_options.batchSize, callback***REMOVED***;
    return this;
***REMOVED***

  this.count = function(applySkipLimit, callback***REMOVED*** {
    return _cursor.count(applySkipLimit, callback***REMOVED***;
***REMOVED***

  this.stream = function(options***REMOVED*** {
    return _cursor.stream(options***REMOVED***;
***REMOVED***

  this.close = function(callback***REMOVED*** {
    return _cursor.close(callback***REMOVED***;
***REMOVED***

  this.explain = function(callback***REMOVED*** {
    return _cursor.explain(callback***REMOVED***;
***REMOVED***

  this.isClosed = function(callback***REMOVED*** {
    return _cursor.isClosed(***REMOVED***;
***REMOVED***

  this.rewind = function(***REMOVED*** {
    return _cursor.rewind(***REMOVED***;
***REMOVED***

  // Internal methods
  this.limit = function(limit, callback***REMOVED*** {
    _cursor.limit(limit, callback***REMOVED***;
    _scope_options.limit = limit;
    return this;
***REMOVED***

  this.skip = function(skip, callback***REMOVED*** {
    _cursor.skip(skip, callback***REMOVED***;
    _scope_options.skip = skip;
    return this;
***REMOVED***

  this.hint = function(hint***REMOVED*** {
    _scope_options.hint = hint;
    _cursor.hint = _scope_options.hint;
    return this;
***REMOVED***

  this.maxTimeMS = function(maxTimeMS***REMOVED*** {  
    _cursor.maxTimeMS(maxTimeMS***REMOVED***
    _scope_options.maxTimeMS = maxTimeMS;
    return this;
***REMOVED***,  

  this.sort = function(keyOrList, direction, callback***REMOVED*** {
    _cursor.sort(keyOrList, direction, callback***REMOVED***;
    _scope_options.sort = keyOrList;
    return this;
***REMOVED***,

  this.fields = function(fields***REMOVED*** {
    _fields = fields;
    _cursor.fields = _fields;
    return this;
***REMOVED***

  //
  // Backward compatible settings
  Object.defineProperty(this, "timeout", {
    get: function(***REMOVED*** {
      return _cursor.timeout;
  ***REMOVED***
***REMOVED******REMOVED***;

  Object.defineProperty(this, "items", {
    get: function(***REMOVED*** {
      return _cursor.items;
  ***REMOVED***
***REMOVED******REMOVED***;  

  Object.defineProperty(this, "readPreference", {
    get: function(***REMOVED*** {
      return _cursor.readPreference;
  ***REMOVED***
***REMOVED******REMOVED***;  
}

var Scope = function(collection, _selector, _fields, _scope_options***REMOVED*** {
  var self = this;

  // Ensure we have at least an empty cursor options object
  _scope_options = _scope_options || {};
  var _write_concern = _scope_options.write_concern || null;

  // Ensure default read preference
  // if(!_scope_options.readPreference***REMOVED*** _scope_options.readPreference = 'primary';

  // Set up the cursor
  var _cursor = new Cursor2(
        collection.db, collection, _selector
      , _fields, _scope_options
    ***REMOVED***;

  // Write branch options
  var writeOptions = {
    insert: function(documents, callback***REMOVED*** {
      // Merge together options
      var options = _write_concern || {};
      // Execute insert
      collection.insert(documents, options, callback***REMOVED***;
  ***REMOVED***,
    
    save: function(document, callback***REMOVED*** {
      // Merge together options
      var save_options = _write_concern || {};
      // Execute save
      collection.save(document, save_options, function(err, result***REMOVED*** {
        if(typeof result == 'number' && result == 1***REMOVED*** {
          return callback(null, document***REMOVED***;
      ***REMOVED***

        return callback(null, document***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***,

    find: function(selector***REMOVED*** {
      _selector = selector;
      return writeOptions;
  ***REMOVED***,

    //
    // Update is implicit multiple document update
    update: function(operations, callback***REMOVED*** {
      // Merge together options
      var update_options = _write_concern || {};
      
      // Set up options, multi is default operation
      update_options.multi = _scope_options.multi ? _scope_options.multi : true;
      if(_scope_options.upsert***REMOVED*** update_options.upsert = _scope_options.upsert;
      
      // Execute options
      collection.update(_selector, operations, update_options, function(err, result, obj***REMOVED*** {
        callback(err, obj***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED***,
***REMOVED***

  // Set write concern
  this.withWriteConcern = function(write_concern***REMOVED*** {
    // Save the current write concern to the Scope
    _scope_options.write_concern = write_concern;
    _write_concern = write_concern;
    // Only allow legal options
    return writeOptions;
***REMOVED***

  // Start find
  this.find = function(selector, options***REMOVED*** {
    // Save the current selector
    _selector = selector;
    // Set the cursor
    _cursor.selector = selector;
    // Return only legal read options
    return new Cursor(_scope_options, _cursor***REMOVED***;
***REMOVED***
}

exports.Scope = Scope;
