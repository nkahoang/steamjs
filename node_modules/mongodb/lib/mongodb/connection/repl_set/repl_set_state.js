/**
 * Interval state object constructor
 *
 * @ignore
 */
var ReplSetState = function ReplSetState (replset***REMOVED*** {
  this.errorMessages = [];
  this.secondaries = {};
  this.addresses = {};
  this.arbiters = {};
  this.passives = {};
  this.members = [];
  this.errors = {};
  this.setName = null;
  this.master = null;
  this.replset = replset;
}

ReplSetState.prototype.hasValidServers = function(***REMOVED*** {
  var validServers = [];
  if(this.master && this.master.isConnected(***REMOVED******REMOVED*** return true;

  if(this.secondaries***REMOVED*** {
    var keys = Object.keys(this.secondaries***REMOVED***
    for(var i = 0; i < keys.length; i++***REMOVED*** {
      if(this.secondaries[keys[i]].isConnected(***REMOVED******REMOVED***
        return true;
  ***REMOVED***
***REMOVED***

  return false;
}

ReplSetState.prototype.getAllReadServers = function(***REMOVED*** {
  var candidate_servers = [];
  for(var name in this.addresses***REMOVED*** {
    candidate_servers.push(this.addresses[name]***REMOVED***;
***REMOVED***

  // Return all possible read candidates
  return candidate_servers;
}

ReplSetState.prototype.addServer = function(server, master***REMOVED*** {
  server.name = master.me;

  if(master.ismaster***REMOVED*** {
    this.master = server;
    this.addresses[server.name] = server;
    this.replset.emit('joined', "primary", master, server***REMOVED***;
***REMOVED*** else if(master.secondary***REMOVED*** {
    this.secondaries[server.name] = server;
    this.addresses[server.name] = server;
    this.replset.emit('joined', "secondary", master, server***REMOVED***;
***REMOVED*** else if(master.arbiters***REMOVED*** {
    this.arbiters[server.name] = server;
    this.addresses[server.name] = server;
    this.replset.emit('joined', "arbiter", master, server***REMOVED***;
***REMOVED***
}

ReplSetState.prototype.contains = function(host***REMOVED*** {
  return this.addresses[host] != null;
}

ReplSetState.prototype.isPrimary = function(server***REMOVED*** {
  return this.master && this.master.name == server.name;
}

ReplSetState.prototype.isSecondary = function(server***REMOVED*** {
  return this.secondaries[server.name] != null;
}

exports.ReplSetState = ReplSetState;
