var fs = require('fs'***REMOVED***,
  ReadPreference = require('./read_preference'***REMOVED***.ReadPreference;

exports.parse = function(url, options***REMOVED*** {
  // Ensure we have a default options object if none set
  options = options || {};
  // Variables
  var connection_part = '';
  var auth_part = '';
  var query_string_part = '';
  var dbName = 'admin';

  // Must start with mongodb
  if(url.indexOf("mongodb://"***REMOVED*** != 0***REMOVED***
    throw Error("URL must be in the format mongodb://user:pass@host:port/dbname"***REMOVED***;
  // If we have a ? mark cut the query elements off
  if(url.indexOf("?"***REMOVED*** != -1***REMOVED*** {
    query_string_part = url.substr(url.indexOf("?"***REMOVED*** + 1***REMOVED***;
    connection_part = url.substring("mongodb://".length, url.indexOf("?"***REMOVED******REMOVED***
***REMOVED*** else {
    connection_part = url.substring("mongodb://".length***REMOVED***;
***REMOVED***

  // Check if we have auth params
  if(connection_part.indexOf("@"***REMOVED*** != -1***REMOVED*** {
    auth_part = connection_part.split("@"***REMOVED***[0];
    connection_part = connection_part.split("@"***REMOVED***[1];
***REMOVED***

  // Check if the connection string has a db
  if(connection_part.indexOf(".sock"***REMOVED*** != -1***REMOVED*** {
    if(connection_part.indexOf(".sock/"***REMOVED*** != -1***REMOVED*** {
      dbName = connection_part.split(".sock/"***REMOVED***[1];
      connection_part = connection_part.split("/", connection_part.indexOf(".sock"***REMOVED*** + ".sock".length***REMOVED***;
  ***REMOVED*** 
***REMOVED*** else if(connection_part.indexOf("/"***REMOVED*** != -1***REMOVED*** {
    dbName = connection_part.split("/"***REMOVED***[1];
    connection_part = connection_part.split("/"***REMOVED***[0];
***REMOVED***

  // Result object
  var object = {};

  // Pick apart the authentication part of the string
  var authPart = auth_part || '';
  var auth = authPart.split(':', 2***REMOVED***;
  if(options['uri_decode_auth']***REMOVED***{
    auth[0] = decodeURIComponent(auth[0]***REMOVED***;
    if(auth[1]***REMOVED***{
      auth[1] = decodeURIComponent(auth[1]***REMOVED***;
  ***REMOVED***
***REMOVED***

  // Add auth to final object if we have 2 elements
  if(auth.length == 2***REMOVED*** object.auth = {user: auth[0], password: auth[1]};

  // Variables used for temporary storage
  var hostPart;
  var urlOptions;
  var servers;
  var serverOptions = {socketOptions: {}};
  var dbOptions = {read_preference_tags: []};
  var replSetServersOptions = {socketOptions: {}};
  // Add server options to final object
  object.server_options = serverOptions;
  object.db_options = dbOptions;
  object.rs_options = replSetServersOptions;
  object.mongos_options = {};

  // Let's check if we are using a domain socket
  if(url.match(/\.sock/***REMOVED******REMOVED*** {
    // Split out the socket part
    var domainSocket = url.substring(
        url.indexOf("mongodb://"***REMOVED*** + "mongodb://".length
      , url.lastIndexOf(".sock"***REMOVED*** + ".sock".length***REMOVED***;
    // Clean out any auth stuff if any
    if(domainSocket.indexOf("@"***REMOVED*** != -1***REMOVED*** domainSocket = domainSocket.split("@"***REMOVED***[1];
    servers = [{domain_socket: domainSocket}];
***REMOVED*** else {
    // Split up the db
    hostPart = connection_part;
    // Parse all server results
    servers = hostPart.split(','***REMOVED***.map(function(h***REMOVED*** {
      var hostPort = h.split(':', 2***REMOVED***;
      var _host = hostPort[0] || 'localhost';
      var _port = hostPort[1] != null ? parseInt(hostPort[1], 10***REMOVED*** : 27017;
      // Check for localhost?safe=true style case
      if(_host.indexOf("?"***REMOVED*** != -1***REMOVED*** _host = _host.split(/\?/***REMOVED***[0];

      // Return the mapped object
      return {host: _host, port: _port};
  ***REMOVED******REMOVED***;
***REMOVED***

  // Get the db name
  object.dbName = dbName || 'admin';
  // Split up all the options
  urlOptions = (query_string_part || ''***REMOVED***.split(/[&;]/***REMOVED***;    
  // Ugh, we have to figure out which options go to which constructor manually.
  urlOptions.forEach(function(opt***REMOVED*** {
    if(!opt***REMOVED*** return;
    var splitOpt = opt.split('='***REMOVED***, name = splitOpt[0], value = splitOpt[1];
    // Options implementations
    switch(name***REMOVED*** {
      case 'slaveOk':
      case 'slave_ok':
        serverOptions.slave_ok = (value == 'true'***REMOVED***;
        dbOptions.slaveOk = (value == 'true'***REMOVED***;
        break;
      case 'maxPoolSize':
      case 'poolSize':
        serverOptions.poolSize = parseInt(value, 10***REMOVED***;
        replSetServersOptions.poolSize = parseInt(value, 10***REMOVED***;
        break;
      case 'autoReconnect':
      case 'auto_reconnect':
        serverOptions.auto_reconnect = (value == 'true'***REMOVED***;
        break;
      case 'minPoolSize':
        throw new Error("minPoolSize not supported"***REMOVED***;
      case 'maxIdleTimeMS':
        throw new Error("maxIdleTimeMS not supported"***REMOVED***;
      case 'waitQueueMultiple':
        throw new Error("waitQueueMultiple not supported"***REMOVED***;
      case 'waitQueueTimeoutMS':
        throw new Error("waitQueueTimeoutMS not supported"***REMOVED***;
      case 'uuidRepresentation':
        throw new Error("uuidRepresentation not supported"***REMOVED***;
      case 'ssl':
        if(value == 'prefer'***REMOVED*** {
          serverOptions.ssl = value;
          replSetServersOptions.ssl = value;
          break;
      ***REMOVED***
        serverOptions.ssl = (value == 'true'***REMOVED***;
        replSetServersOptions.ssl = (value == 'true'***REMOVED***;
        break;
      case 'replicaSet':
      case 'rs_name':
        replSetServersOptions.rs_name = value;
        break;
      case 'reconnectWait':
        replSetServersOptions.reconnectWait = parseInt(value, 10***REMOVED***;
        break;
      case 'retries':
        replSetServersOptions.retries = parseInt(value, 10***REMOVED***;
        break;
      case 'readSecondary':
      case 'read_secondary':
        replSetServersOptions.read_secondary = (value == 'true'***REMOVED***;
        break;
      case 'fsync':
        dbOptions.fsync = (value == 'true'***REMOVED***;
        break;
      case 'journal':
        dbOptions.journal = (value == 'true'***REMOVED***;
        break;
      case 'safe':
        dbOptions.safe = (value == 'true'***REMOVED***;
        break;
      case 'nativeParser':
      case 'native_parser':
        dbOptions.native_parser = (value == 'true'***REMOVED***;
        break;
      case 'connectTimeoutMS':
        serverOptions.socketOptions.connectTimeoutMS = parseInt(value, 10***REMOVED***;
        replSetServersOptions.socketOptions.connectTimeoutMS = parseInt(value, 10***REMOVED***;
        break;
      case 'socketTimeoutMS':
        serverOptions.socketOptions.socketTimeoutMS = parseInt(value, 10***REMOVED***;
        replSetServersOptions.socketOptions.socketTimeoutMS = parseInt(value, 10***REMOVED***;
        break;
      case 'w':
        dbOptions.w = value;
        break;
      case 'authSource':
        dbOptions.authSource = value;
        break;
      case 'gssapiServiceName':
        dbOptions.gssapiServiceName = value;
        break;
      case 'authMechanism':
        if(value == 'GSSAPI'***REMOVED*** {
          // If no password provided decode only the principal
          if(object.auth == null***REMOVED*** {
            var urlDecodeAuthPart = decodeURIComponent(authPart***REMOVED***;
            if(urlDecodeAuthPart.indexOf("@"***REMOVED*** == -1***REMOVED*** throw new Error("GSSAPI requires a provided principal"***REMOVED***;
            object.auth = {user: urlDecodeAuthPart, password: null};
        ***REMOVED*** else {
            object.auth.user = decodeURIComponent(object.auth.user***REMOVED***;
        ***REMOVED***
      ***REMOVED*** else if(value == 'MONGODB-X509'***REMOVED*** {
          object.auth = {user: decodeURIComponent(authPart***REMOVED***};
      ***REMOVED***
        
        // Only support GSSAPI or MONGODB-CR for now
        if(value != 'GSSAPI' 
          && value != 'MONGODB-X509'
          && value != 'MONGODB-CR'
          && value != 'PLAIN'***REMOVED*** 
            throw new Error("only GSSAPI, PLAIN, MONGODB-X509 or MONGODB-CR is supported by authMechanism"***REMOVED***;
        
        // Authentication mechanism
        dbOptions.authMechanism = value;
        break;
      case 'wtimeoutMS':
        dbOptions.wtimeout = parseInt(value, 10***REMOVED***;
        break;
      case 'readPreference':
        if(!ReadPreference.isValid(value***REMOVED******REMOVED*** throw new Error("readPreference must be either primary/primaryPreferred/secondary/secondaryPreferred/nearest"***REMOVED***;
        dbOptions.read_preference = value;
        break;
      case 'readPreferenceTags':
        // Decode the value
        value = decodeURIComponent(value***REMOVED***;
        // Contains the tag object
        var tagObject = {};
        if(value == null || value == ''***REMOVED*** {
          dbOptions.read_preference_tags.push(tagObject***REMOVED***;
          break;
      ***REMOVED***

        // Split up the tags
        var tags = value.split(/\,/***REMOVED***;
        for(var i = 0; i < tags.length; i++***REMOVED*** {
          var parts = tags[i].trim(***REMOVED***.split(/\:/***REMOVED***;
          tagObject[parts[0]] = parts[1];
      ***REMOVED***

        // Set the preferences tags
        dbOptions.read_preference_tags.push(tagObject***REMOVED***;
        break;
      default:
        break;
  ***REMOVED***
***REMOVED******REMOVED***;

  // No tags: should be null (not []***REMOVED***
  if(dbOptions.read_preference_tags.length === 0***REMOVED*** {
    dbOptions.read_preference_tags = null;
***REMOVED***

  // Validate if there are an invalid write concern combinations
  if((dbOptions.w == -1 || dbOptions.w == 0***REMOVED*** && (
      dbOptions.journal == true
      || dbOptions.fsync == true
      || dbOptions.safe == true***REMOVED******REMOVED*** throw new Error("w set to -1 or 0 cannot be combined with safe/w/journal/fsync"***REMOVED***

  // If no read preference set it to primary
  if(!dbOptions.read_preference***REMOVED*** dbOptions.read_preference = 'primary';

  // Add servers to result
  object.servers = servers;
  // Returned parsed object
  return object;
}
