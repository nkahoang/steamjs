var DbCommand = require('../commands/db_command'***REMOVED***.DbCommand
  , utils = require('../utils'***REMOVED***
  , format = require('util'***REMOVED***.format;

// Kerberos class
var Kerberos = null;
var MongoAuthProcess = null;
// Try to grab the Kerberos class
try {
  Kerberos = require('kerberos'***REMOVED***.Kerberos
  // Authentication process for Mongo
  MongoAuthProcess = require('kerberos'***REMOVED***.processes.MongoAuthProcess
} catch(err***REMOVED*** {}

var authenticate = function(db, username, password, authdb, options, callback***REMOVED*** {
  var numberOfConnections = 0;
  var errorObject = null;  
  // We don't have the Kerberos library
  if(Kerberos == null***REMOVED*** return callback(new Error("Kerberos library is not installed"***REMOVED******REMOVED***;

  if(options['connection'] != null***REMOVED*** {
    //if a connection was explicitly passed on options, then we have only one...
    numberOfConnections = 1;
***REMOVED*** else {
    // Get the amount of connections in the pool to ensure we have authenticated all comments
    numberOfConnections = db.serverConfig.allRawConnections(***REMOVED***.length;
    options['onAll'] = true;
***REMOVED***

  // Set the sspi server name
  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';

  // Grab all the connections
  var connections = db.serverConfig.allRawConnections(***REMOVED***;
  var error = null;
  
  // Authenticate all connections
  for(var i = 0; i < numberOfConnections; i++***REMOVED*** {
    // Start Auth process for a connection
    SSIPAuthenticate(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result***REMOVED*** {
      // Adjust number of connections left to connect
      numberOfConnections = numberOfConnections - 1;
      // If we have an error save it
      if(err***REMOVED*** error = err;

      // We are done
      if(numberOfConnections == 0***REMOVED*** {
        if(err***REMOVED*** return callback(err, false***REMOVED***;
        // We authenticated correctly save the credentials
        db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName***REMOVED***;
        // Return valid callback
        return callback(null, true***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;    
***REMOVED***
}

var SSIPAuthenticate = function(db, username, password, authdb, service_name, connection, callback***REMOVED*** {
  // --------------------------------------------------------------
  // Async Version
  // --------------------------------------------------------------
  var command = {
      saslStart: 1
    , mechanism: 'GSSAPI'
    , payload: ''
    , autoAuthorize: 1
***REMOVED***;

  // Create authenticator
  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, service_name***REMOVED***;

  // Execute first sasl step
  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'***REMOVED***, {connection:connection}, function(err, doc***REMOVED*** {
    if(err***REMOVED*** return callback(err***REMOVED***;
    doc = doc.documents[0];

    mongo_auth_process.init(username, password, function(err***REMOVED*** {
      if(err***REMOVED*** return callback(err***REMOVED***;

      mongo_auth_process.transition(doc.payload, function(err, payload***REMOVED*** {
        if(err***REMOVED*** return callback(err***REMOVED***;

        // Perform the next step against mongod
        var command = {
            saslContinue: 1
          , conversationId: doc.conversationId
          , payload: payload
      ***REMOVED***;

        // Execute the command
        db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'***REMOVED***, {connection:connection}, function(err, doc***REMOVED*** {
          if(err***REMOVED*** return callback(err***REMOVED***;
          doc = doc.documents[0];

          mongo_auth_process.transition(doc.payload, function(err, payload***REMOVED*** {
            if(err***REMOVED*** return callback(err***REMOVED***;

            // Perform the next step against mongod
            var command = {
                saslContinue: 1
              , conversationId: doc.conversationId
              , payload: payload
          ***REMOVED***;

            // Execute the command
            db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'***REMOVED***, {connection:connection}, function(err, doc***REMOVED*** {
              if(err***REMOVED*** return callback(err***REMOVED***;
              doc = doc.documents[0];
              
              mongo_auth_process.transition(doc.payload, function(err, payload***REMOVED*** {
                // Perform the next step against mongod
                var command = {
                    saslContinue: 1
                  , conversationId: doc.conversationId
                  , payload: payload
              ***REMOVED***;

                // Execute the command
                db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'***REMOVED***, {connection:connection}, function(err, doc***REMOVED*** {
                  if(err***REMOVED*** return callback(err***REMOVED***;
                  doc = doc.documents[0];

                  if(doc.done***REMOVED*** return callback(null, true***REMOVED***;
                  callback(new Error("Authentication failed"***REMOVED***, false***REMOVED***;
              ***REMOVED******REMOVED***;        
            ***REMOVED******REMOVED***;
          ***REMOVED******REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;  
}

exports.authenticate = authenticate;