var DbCommand = require('../commands/db_command'***REMOVED***.DbCommand
  , utils = require('../utils'***REMOVED***
  , format = require('util'***REMOVED***.format;

// Kerberos class
var Kerberos = null;
var MongoAuthProcess = null;
// Try to grab the Kerberos class
try {
  Kerberos = require('kerberos'***REMOVED***.Kerberos
  // Authentication process for Mongo
  MongoAuthProcess = require('kerberos'***REMOVED***.processes.MongoAuthProcess
} catch(err***REMOVED*** {}

var authenticate = function(db, username, password, authdb, options, callback***REMOVED*** {
  var numberOfConnections = 0;
  var errorObject = null;  
  // We don't have the Kerberos library
  if(Kerberos == null***REMOVED*** return callback(new Error("Kerberos library is not installed"***REMOVED******REMOVED***;  

  if(options['connection'] != null***REMOVED*** {
    //if a connection was explicitly passed on options, then we have only one...
    numberOfConnections = 1;
***REMOVED*** else {
    // Get the amount of connections in the pool to ensure we have authenticated all comments
    numberOfConnections = db.serverConfig.allRawConnections(***REMOVED***.length;
    options['onAll'] = true;
***REMOVED***

  // Grab all the connections
  var connections = options['connection'] != null ? [options['connection']] : db.serverConfig.allRawConnections(***REMOVED***;
  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';
  var error = null;
  // Authenticate all connections
  for(var i = 0; i < numberOfConnections; i++***REMOVED*** {

    // Start Auth process for a connection
    GSSAPIInitialize(db, username, password, authdb, gssapiServiceName, connections[i], function(err, result***REMOVED*** {
      // Adjust number of connections left to connect
      numberOfConnections = numberOfConnections - 1;
      // If we have an error save it
      if(err***REMOVED*** error = err;

      // We are done
      if(numberOfConnections == 0***REMOVED*** {
        if(err***REMOVED*** return callback(error, false***REMOVED***;
        // We authenticated correctly save the credentials
        db.serverConfig.auth.add('GSSAPI', db.databaseName, username, password, authdb, gssapiServiceName***REMOVED***;
        // Return valid callback
        return callback(null, true***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;    
***REMOVED***
}

//
// Initialize step
var GSSAPIInitialize = function(db, username, password, authdb, gssapiServiceName, connection, callback***REMOVED*** {
  // Create authenticator
  var mongo_auth_process = new MongoAuthProcess(connection.socketOptions.host, connection.socketOptions.port, gssapiServiceName***REMOVED***;

  // Perform initialization
  mongo_auth_process.init(username, password, function(err, context***REMOVED*** {
    if(err***REMOVED*** return callback(err, false***REMOVED***;

    // Perform the first step
    mongo_auth_process.transition('', function(err, payload***REMOVED*** {
      if(err***REMOVED*** return callback(err, false***REMOVED***;

      // Call the next db step
      MongoDBGSSAPIFirstStep(mongo_auth_process, payload, db, username, password, authdb, connection, callback***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
}

//
// Perform first step against mongodb
var MongoDBGSSAPIFirstStep = function(mongo_auth_process, payload, db, username, password, authdb, connection, callback***REMOVED*** {
  // Build the sasl start command
  var command = {
      saslStart: 1
    , mechanism: 'GSSAPI'
    , payload: payload
    , autoAuthorize: 1
***REMOVED***;

  // Execute first sasl step
  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'***REMOVED***, {connection:connection}, function(err, doc***REMOVED*** {
    if(err***REMOVED*** return callback(err, false***REMOVED***;
    // Get the payload
    doc = doc.documents[0];
    var db_payload = doc.payload;

    mongo_auth_process.transition(doc.payload, function(err, payload***REMOVED*** {
      if(err***REMOVED*** return callback(err, false***REMOVED***;

      // MongoDB API Second Step
      MongoDBGSSAPISecondStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
}

//
// Perform first step against mongodb
var MongoDBGSSAPISecondStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback***REMOVED*** {
  // Build Authentication command to send to MongoDB
  var command = {
      saslContinue: 1
    , conversationId: doc.conversationId
    , payload: payload
***REMOVED***;

  // Execute the command
  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'***REMOVED***, {connection:connection}, function(err, doc***REMOVED*** {
    if(err***REMOVED*** return callback(err, false***REMOVED***;

    // Get the result document
    doc = doc.documents[0];

    // Call next transition for kerberos
    mongo_auth_process.transition(doc.payload, function(err, payload***REMOVED*** {
      if(err***REMOVED*** return callback(err, false***REMOVED***;

      // Call the last and third step
      MongoDBGSSAPIThirdStep(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback***REMOVED***;
  ***REMOVED******REMOVED***;    
***REMOVED******REMOVED***;
}

var MongoDBGSSAPIThirdStep = function(mongo_auth_process, payload, doc, db, username, password, authdb, connection, callback***REMOVED*** {
  // Build final command
  var command = {
      saslContinue: 1
    , conversationId: doc.conversationId
    , payload: payload
***REMOVED***;

  // Let's finish the auth process against mongodb
  db._executeQueryCommand(DbCommand.createDbCommand(db, command, {}, '$external'***REMOVED***, {connection:connection}, function(err, doc***REMOVED*** {
    if(err***REMOVED*** return callback(err, false***REMOVED***;

    mongo_auth_process.transition(null, function(err, payload***REMOVED*** {
      if(err***REMOVED*** return callback(err, false***REMOVED***;
      callback(null, true***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
}

exports.authenticate = authenticate;