var Binary = require('bson'***REMOVED***.Binary,
  ObjectID = require('bson'***REMOVED***.ObjectID;

/**
 * Class for representing a single chunk in GridFS.
 *
 * @class
 *
 * @param file {GridStore} The {@link GridStore} object holding this chunk.
 * @param mongoObject {object} The mongo object representation of this chunk.
 *
 * @throws Error when the type of data field for {@link mongoObject} is not
 *     supported. Currently supported types for data field are instances of
 *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}
 *     from the bson module
 *
 * @see Chunk#buildMongoObject
 */
var Chunk = exports.Chunk = function(file, mongoObject, writeConcern***REMOVED*** {
  if(!(this instanceof Chunk***REMOVED******REMOVED*** return new Chunk(file, mongoObject***REMOVED***;

  this.file = file;
  var self = this;
  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;
  this.writeConcern = writeConcern || {w:1};
  this.objectId = mongoObjectFinal._id == null ? new ObjectID(***REMOVED*** : mongoObjectFinal._id;
  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;
  this.data = new Binary(***REMOVED***;

  if(mongoObjectFinal.data == null***REMOVED*** {
***REMOVED*** else if(typeof mongoObjectFinal.data == "string"***REMOVED*** {
    var buffer = new Buffer(mongoObjectFinal.data.length***REMOVED***;
    buffer.write(mongoObjectFinal.data, 'binary', 0***REMOVED***;
    this.data = new Binary(buffer***REMOVED***;
***REMOVED*** else if(Array.isArray(mongoObjectFinal.data***REMOVED******REMOVED*** {
    var buffer = new Buffer(mongoObjectFinal.data.length***REMOVED***;
    buffer.write(mongoObjectFinal.data.join(''***REMOVED***, 'binary', 0***REMOVED***;
    this.data = new Binary(buffer***REMOVED***;
***REMOVED*** else if(mongoObjectFinal.data instanceof Binary || Object.prototype.toString.call(mongoObjectFinal.data***REMOVED*** == "[object Binary]"***REMOVED*** {
    this.data = mongoObjectFinal.data;
***REMOVED*** else if(Buffer.isBuffer(mongoObjectFinal.data***REMOVED******REMOVED*** {
***REMOVED*** else {
    throw Error("Illegal chunk format"***REMOVED***;
***REMOVED***
  
  // Update position
  this.internalPosition = 0;
};

/**
 * Writes a data to this object and advance the read/write head.
 *
 * @param data {string} the data to write 
 * @param callback {function(*, GridStore***REMOVED***} This will be called after executing
 *     this method. The first parameter will contain null and the second one
 *     will contain a reference to this object.
 */
Chunk.prototype.write = function(data, callback***REMOVED*** {
  this.data.write(data, this.internalPosition***REMOVED***;
  this.internalPosition = this.data.length(***REMOVED***;
  if(callback != null***REMOVED*** return callback(null, this***REMOVED***;
  return this;
};

/**
 * Reads data and advances the read/write head.
 *
 * @param length {number} The length of data to read.
 *
 * @return {string} The data read if the given length will not exceed the end of
 *     the chunk. Returns an empty String otherwise.
 */
Chunk.prototype.read = function(length***REMOVED*** {
  // Default to full read if no index defined
  length = length == null || length == 0 ? this.length(***REMOVED*** : length;

  if(this.length(***REMOVED*** - this.internalPosition + 1 >= length***REMOVED*** {
    var data = this.data.read(this.internalPosition, length***REMOVED***;
    this.internalPosition = this.internalPosition + length;
    return data;
***REMOVED*** else {
    return '';
***REMOVED***
};

Chunk.prototype.readSlice = function(length***REMOVED*** {
  if ((this.length(***REMOVED*** - this.internalPosition***REMOVED*** >= length***REMOVED*** {
    var data = null;
    if (this.data.buffer != null***REMOVED*** { //Pure BSON
      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length***REMOVED***;
  ***REMOVED*** else { //Native BSON
      data = new Buffer(length***REMOVED***;
      length = this.data.readInto(data, this.internalPosition***REMOVED***;
  ***REMOVED***
    this.internalPosition = this.internalPosition + length;
    return data;
***REMOVED*** else {
    return null;
***REMOVED***
};

/**
 * Checks if the read/write head is at the end.
 *
 * @return {boolean} Whether the read/write head has reached the end of this
 *     chunk.
 */
Chunk.prototype.eof = function(***REMOVED*** {
  return this.internalPosition == this.length(***REMOVED*** ? true : false;
};

/**
 * Reads one character from the data of this chunk and advances the read/write
 * head.
 *
 * @return {string} a single character data read if the the read/write head is
 *     not at the end of the chunk. Returns an empty String otherwise.
 */
Chunk.prototype.getc = function(***REMOVED*** {
  return this.read(1***REMOVED***;
};

/**
 * Clears the contents of the data in this chunk and resets the read/write head
 * to the initial position.
 */
Chunk.prototype.rewind = function(***REMOVED*** {
  this.internalPosition = 0;
  this.data = new Binary(***REMOVED***;
};

/**
 * Saves this chunk to the database. Also overwrites existing entries having the
 * same id as this chunk.
 *
 * @param callback {function(*, GridStore***REMOVED***} This will be called after executing
 *     this method. The first parameter will contain null and the second one
 *     will contain a reference to this object.
 */
Chunk.prototype.save = function(options, callback***REMOVED*** {
  var self = this;
  if(typeof options == 'function'***REMOVED*** {
    callback = options;
    options = {};
***REMOVED***

  self.file.chunkCollection(function(err, collection***REMOVED*** {
    if(err***REMOVED*** return callback(err***REMOVED***;

    // Merge the options
    var writeOptions = {};
    for(var name in options***REMOVED*** writeOptions[name] = options[name];
    for(var name in self.writeConcern***REMOVED*** writeOptions[name] = self.writeConcern[name];    

    // collection.remove({'_id':self.objectId}, self.writeConcern, function(err, result***REMOVED*** {
    collection.remove({'_id':self.objectId}, writeOptions, function(err, result***REMOVED*** {
      if(err***REMOVED*** return callback(err***REMOVED***;

      if(self.data.length(***REMOVED*** > 0***REMOVED*** {
        self.buildMongoObject(function(mongoObject***REMOVED*** {
          var options = {forceServerObjectId:true};
          for(var name in self.writeConcern***REMOVED*** {
            options[name] = self.writeConcern[name];
        ***REMOVED***

          collection.insert(mongoObject, writeOptions, function(err, collection***REMOVED*** {
            callback(err, self***REMOVED***;
        ***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***;
    ***REMOVED*** else {
        callback(null, self***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED******REMOVED***;
};

/**
 * Creates a mongoDB object representation of this chunk.
 *
 * @param callback {function(Object***REMOVED***} This will be called after executing this 
 *     method. The object will be passed to the first parameter and will have
 *     the structure:
 *        
 *        <pre><code>
 *        {
 *          '_id' : , // {number} id for this chunk
 *          'files_id' : , // {number} foreign key to the file collection
 *          'n' : , // {number} chunk number
 *          'data' : , // {bson#Binary} the chunk data itself
 *      ***REMOVED***
 *        </code></pre>
 *
 * @see <a href="http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}">MongoDB GridFS Chunk Object Structure</a>
 */
Chunk.prototype.buildMongoObject = function(callback***REMOVED*** {
  var mongoObject = {
    'files_id': this.file.fileId,
    'n': this.chunkNumber,
    'data': this.data};
  // If we are saving using a specific ObjectId
  if(this.objectId != null***REMOVED*** mongoObject._id = this.objectId;

  callback(mongoObject***REMOVED***;
};

/**
 * @return {number} the length of the data
 */
Chunk.prototype.length = function(***REMOVED*** {
  return this.data.length(***REMOVED***;
};

/**
 * The position of the read/write head
 * @name position
 * @lends Chunk#
 * @field
 */
Object.defineProperty(Chunk.prototype, "position", { enumerable: true
  , get: function (***REMOVED*** {
      return this.internalPosition;
  ***REMOVED***
  , set: function(value***REMOVED*** {
      this.internalPosition = value;
  ***REMOVED***
}***REMOVED***;

/**
 * The default chunk size
 * @constant
 */
Chunk.DEFAULT_CHUNK_SIZE = 1024 * 255;
