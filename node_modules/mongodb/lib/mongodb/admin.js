/*!
 * Module dependencies.
 */
var Collection = require('./collection'***REMOVED***.Collection,
    Cursor = require('./cursor'***REMOVED***.Cursor,
    DbCommand = require('./commands/db_command'***REMOVED***.DbCommand,
    utils = require('./utils'***REMOVED***;

/**
 * Allows the user to access the admin functionality of MongoDB
 *
 * @class Represents the Admin methods of MongoDB.
 * @param {Object} db Current db instance we wish to perform Admin operations on.
 * @return {Function} Constructor for Admin type.
 */
function Admin(db***REMOVED*** {
  if(!(this instanceof Admin***REMOVED******REMOVED*** return new Admin(db***REMOVED***;

  /**
   * Retrieve the server information for the current
   * instance of the db client
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from buildInfo or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.buildInfo = function(callback***REMOVED*** {
    this.serverInfo(callback***REMOVED***;
***REMOVED***

  /**
   * Retrieve the server information for the current
   * instance of the db client
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverInfo or null if an error occured.
   * @return {null} Returns no result
   * @api private
   */
  this.serverInfo = function(callback***REMOVED*** {
    db.executeDbAdminCommand({buildinfo:1}, function(err, doc***REMOVED*** {
      if(err != null***REMOVED*** return callback(err, null***REMOVED***;
      return callback(null, doc.documents[0]***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Retrieve this db's server status.
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from serverStatus or null if an error occured.
   * @return {null}
   * @api public
   */
  this.serverStatus = function(callback***REMOVED*** {
    var self = this;

    db.executeDbAdminCommand({serverStatus: 1}, function(err, doc***REMOVED*** {
      if(err == null && doc.documents[0].ok === 1***REMOVED*** {
        callback(null, doc.documents[0]***REMOVED***;
    ***REMOVED*** else {
        if(err***REMOVED*** return callback(err, false***REMOVED***;
        return callback(utils.toError(doc.documents[0]***REMOVED***, false***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED***;

  /**
   * Retrieve the current profiling Level for MongoDB
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from profilingLevel or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.profilingLevel = function(callback***REMOVED*** {
    var self = this;

    db.executeDbAdminCommand({profile:-1}, function(err, doc***REMOVED*** {
      doc = doc.documents[0];

      if(err == null && doc.ok === 1***REMOVED*** {
        var was = doc.was;
        if(was == 0***REMOVED*** return callback(null, "off"***REMOVED***;
        if(was == 1***REMOVED*** return callback(null, "slow_only"***REMOVED***;
        if(was == 2***REMOVED*** return callback(null, "all"***REMOVED***;
          return callback(new Error("Error: illegal profiling level value " + was***REMOVED***, null***REMOVED***;
    ***REMOVED*** else {
        err != null ? callback(err, null***REMOVED*** : callback(new Error("Error with profile command"***REMOVED***, null***REMOVED***;
    ***REMOVED***
  ***REMOVED******REMOVED***;
***REMOVED***;

  /**
   * Ping the MongoDB server and retrieve results
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from ping or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.ping = function(options, callback***REMOVED*** {
    // Unpack calls
    var args = Array.prototype.slice.call(arguments, 0***REMOVED***;
    db.executeDbAdminCommand({ping: 1}, args.pop(***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Authenticate against MongoDB
   *
   * @param {String} username The user name for the authentication.
   * @param {String} password The password for the authentication.
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from authenticate or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.authenticate = function(username, password, callback***REMOVED*** {
    db.authenticate(username, password, {authdb: 'admin'}, function(err, doc***REMOVED*** {
      return callback(err, doc***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED***

  /**
   * Logout current authenticated user
   *
   * @param {Object} [options] Optional parameters to the command.
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from logout or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.logout = function(callback***REMOVED*** {
    db.logout({authdb: 'admin'},  function(err, doc***REMOVED*** {
      return callback(err, doc***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED***

  /**
   * Add a user to the MongoDB server, if the user exists it will
   * overwrite the current password
   *
   * Options
   *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option***REMOVED***
   *  - **fsync**, (Boolean, default:false***REMOVED*** write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
   *  - **j**, (Boolean, default:false***REMOVED*** write waits for journal sync before returning
   *
   * @param {String} username The user name for the authentication.
   * @param {String} password The password for the authentication.
   * @param {Object} [options] additional options during update.
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from addUser or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.addUser = function(username, password, options, callback***REMOVED*** {
    var args = Array.prototype.slice.call(arguments, 2***REMOVED***;
    callback = args.pop(***REMOVED***;
    options = args.length ? args.shift(***REMOVED*** : {};
    // Set the db name to admin
    options.dbName = 'admin';
    // Add user
    db.addUser(username, password, options, function(err, doc***REMOVED*** {
      return callback(err, doc***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED***
  /**
   * Remove a user from the MongoDB server
   *
   * Options
   *  - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
   *  - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option***REMOVED***
   *  - **fsync**, (Boolean, default:false***REMOVED*** write waits for fsync before returning, from MongoDB 2.6 on, fsync cannot be combined with journal
   *  - **j**, (Boolean, default:false***REMOVED*** write waits for journal sync before returning
   *
   * @param {String} username The user name for the authentication.
   * @param {Object} [options] additional options during update.
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from removeUser or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.removeUser = function(username, options, callback***REMOVED*** {
    var self = this;
    var args = Array.prototype.slice.call(arguments, 1***REMOVED***;
    callback = args.pop(***REMOVED***;
    options = args.length ? args.shift(***REMOVED*** : {};
    options.dbName = 'admin';

    db.removeUser(username, options, function(err, doc***REMOVED*** {
      return callback(err, doc***REMOVED***;
  ***REMOVED******REMOVED***
***REMOVED***

  /**
   * Set the current profiling level of MongoDB
   *
   * @param {String} level The new profiling level (off, slow_only, all***REMOVED***
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from setProfilingLevel or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.setProfilingLevel = function(level, callback***REMOVED*** {
    var self = this;
    var command = {};
    var profile = 0;

    if(level == "off"***REMOVED*** {
      profile = 0;
  ***REMOVED*** else if(level == "slow_only"***REMOVED*** {
      profile = 1;
  ***REMOVED*** else if(level == "all"***REMOVED*** {
      profile = 2;
  ***REMOVED*** else {
      return callback(new Error("Error: illegal profiling level value " + level***REMOVED******REMOVED***;
  ***REMOVED***

    // Set up the profile number
    command['profile'] = profile;

    db.executeDbAdminCommand(command, function(err, doc***REMOVED*** {
      doc = doc.documents[0];

      if(err == null && doc.ok === 1***REMOVED***
        return callback(null, level***REMOVED***;
      return err != null ? callback(err, null***REMOVED*** : callback(new Error("Error with profile command"***REMOVED***, null***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  /**
   * Retrive the current profiling information for MongoDB
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from profilingInfo or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.profilingInfo = function(callback***REMOVED*** {
    try {
      new Cursor(db, new Collection(db, DbCommand.SYSTEM_PROFILE_COLLECTION***REMOVED***, {}, {}, {dbName: 'admin'}***REMOVED***.toArray(function(err, items***REMOVED*** {
          return callback(err, items***REMOVED***;
    ***REMOVED******REMOVED***;
  ***REMOVED*** catch (err***REMOVED*** {
      return callback(err, null***REMOVED***;
  ***REMOVED***
***REMOVED***;

  /**
   * Execute a db command against the Admin database
   *
   * @param {Object} command A command object `{ping:1}`.
   * @param {Object} [options] Optional parameters to the command.
   * @param {Function} callback this will be called after executing this method. The command always return the whole result of the command as the second parameter.
   * @return {null} Returns no result
   * @api public
   */
  this.command = function(command, options, callback***REMOVED*** {
    var self = this;
    var args = Array.prototype.slice.call(arguments, 1***REMOVED***;
    callback = args.pop(***REMOVED***;
    options = args.length ? args.shift(***REMOVED*** : {};

    // Execute a command
    db.executeDbAdminCommand(command, options, function(err, doc***REMOVED*** {
      // Ensure change before event loop executes
      return callback != null ? callback(err, doc***REMOVED*** : null;
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Validate an existing collection
   *
   * @param {String} collectionName The name of the collection to validate.
   * @param {Object} [options] Optional parameters to the command.
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from validateCollection or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.validateCollection = function(collectionName, options, callback***REMOVED*** {
    var args = Array.prototype.slice.call(arguments, 1***REMOVED***;
    callback = args.pop(***REMOVED***;
    options = args.length ? args.shift(***REMOVED*** : {};

    var self = this;
    var command = {validate: collectionName};
    var keys = Object.keys(options***REMOVED***;

    // Decorate command with extra options
    for(var i = 0; i < keys.length; i++***REMOVED*** {
      if(options.hasOwnProperty(keys[i]***REMOVED******REMOVED*** {
        command[keys[i]] = options[keys[i]];
    ***REMOVED***
  ***REMOVED***

    db.command(command, function(err, doc***REMOVED*** {
      if(err != null***REMOVED*** return callback(err, null***REMOVED***;

      if(doc.ok === 0***REMOVED***
        return callback(new Error("Error with validate command"***REMOVED***, null***REMOVED***;
      if(doc.result != null && doc.result.constructor != String***REMOVED***
        return callback(new Error("Error with validation data"***REMOVED***, null***REMOVED***;
      if(doc.result != null && doc.result.match(/exception|corrupt/***REMOVED*** != null***REMOVED***
        return callback(new Error("Error: invalid collection " + collectionName***REMOVED***, null***REMOVED***;
      if(doc.valid != null && !doc.valid***REMOVED***
        return callback(new Error("Error: invalid collection " + collectionName***REMOVED***, null***REMOVED***;

      return callback(null, doc***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;

  /**
   * List the available databases
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from listDatabases or null if an error occured.
   * @return {null} Returns no result
   * @api public
   */
  this.listDatabases = function(callback***REMOVED*** {
    // Execute the listAllDatabases command
    db.executeDbAdminCommand({listDatabases:1}, {}, function(err, doc***REMOVED*** {
      if(err != null***REMOVED*** return callback(err, null***REMOVED***;
      return callback(null, doc.documents[0]***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***

  /**
   * Get ReplicaSet status
   *
   * @param {Function} callback this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from replSetGetStatus or null if an error occured.
   * @return {null}
   * @api public
   */
  this.replSetGetStatus = function(callback***REMOVED*** {
    var self = this;

    db.executeDbAdminCommand({replSetGetStatus:1}, function(err, doc***REMOVED*** {
      if(err == null && doc.documents[0].ok === 1***REMOVED***
        return callback(null, doc.documents[0]***REMOVED***;
      if(err***REMOVED*** return callback(err, false***REMOVED***;
      return callback(utils.toError(doc.documents[0]***REMOVED***, false***REMOVED***;
  ***REMOVED******REMOVED***;
***REMOVED***;
};

/**
 * @ignore
 */
exports.Admin = Admin;
