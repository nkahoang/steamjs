jasmine.TrivialReporter = function(doc***REMOVED*** {
  this.document = doc || document;
  this.suiteDivs = {};
  this.logRunningSpecs = false;
};

jasmine.TrivialReporter.prototype.createDom = function(type, attrs, childrenVarArgs***REMOVED*** {
  var el = document.createElement(type***REMOVED***;

  for (var i = 2; i < arguments.length; i++***REMOVED*** {
    var child = arguments[i];

    if (typeof child === 'string'***REMOVED*** {
      el.appendChild(document.createTextNode(child***REMOVED******REMOVED***;
  ***REMOVED*** else {
      if (child***REMOVED*** { el.appendChild(child***REMOVED***; }
  ***REMOVED***
***REMOVED***

  for (var attr in attrs***REMOVED*** {
    if (attr == "className"***REMOVED*** {
      el[attr] = attrs[attr];
  ***REMOVED*** else {
      el.setAttribute(attr, attrs[attr]***REMOVED***;
  ***REMOVED***
***REMOVED***

  return el;
};

jasmine.TrivialReporter.prototype.reportRunnerStarting = function(runner***REMOVED*** {
  var showPassed, showSkipped;

  this.outerDiv = this.createDom('div', { className: 'jasmine_reporter' },
      this.createDom('div', { className: 'banner' },
        this.createDom('div', { className: 'logo' },
            this.createDom('span', { className: 'title' }, "Jasmine"***REMOVED***,
            this.createDom('span', { className: 'version' }, runner.env.versionString(***REMOVED******REMOVED******REMOVED***,
        this.createDom('div', { className: 'options' },
            "Show ",
            showPassed = this.createDom('input', { id: "__jasmine_TrivialReporter_showPassed__", type: 'checkbox' }***REMOVED***,
            this.createDom('label', { "for": "__jasmine_TrivialReporter_showPassed__" }, " passed "***REMOVED***,
            showSkipped = this.createDom('input', { id: "__jasmine_TrivialReporter_showSkipped__", type: 'checkbox' }***REMOVED***,
            this.createDom('label', { "for": "__jasmine_TrivialReporter_showSkipped__" }, " skipped"***REMOVED***
            ***REMOVED***
          ***REMOVED***,

      this.runnerDiv = this.createDom('div', { className: 'runner running' },
          this.createDom('a', { className: 'run_spec', href: '?' }, "run all"***REMOVED***,
          this.runnerMessageSpan = this.createDom('span', {}, "Running..."***REMOVED***,
          this.finishedAtSpan = this.createDom('span', { className: 'finished-at' }, ""***REMOVED******REMOVED***
      ***REMOVED***;

  this.document.body.appendChild(this.outerDiv***REMOVED***;

  var suites = runner.suites(***REMOVED***;
  for (var i = 0; i < suites.length; i++***REMOVED*** {
    var suite = suites[i];
    var suiteDiv = this.createDom('div', { className: 'suite' },
        this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(suite.getFullName(***REMOVED******REMOVED*** }, "run"***REMOVED***,
        this.createDom('a', { className: 'description', href: '?spec=' + encodeURIComponent(suite.getFullName(***REMOVED******REMOVED*** }, suite.description***REMOVED******REMOVED***;
    this.suiteDivs[suite.id] = suiteDiv;
    var parentDiv = this.outerDiv;
    if (suite.parentSuite***REMOVED*** {
      parentDiv = this.suiteDivs[suite.parentSuite.id];
  ***REMOVED***
    parentDiv.appendChild(suiteDiv***REMOVED***;
***REMOVED***

  this.startedAt = new Date(***REMOVED***;

  var self = this;
  showPassed.onclick = function(evt***REMOVED*** {
    if (showPassed.checked***REMOVED*** {
      self.outerDiv.className += ' show-passed';
  ***REMOVED*** else {
      self.outerDiv.className = self.outerDiv.className.replace(/ show-passed/, ''***REMOVED***;
  ***REMOVED***
***REMOVED***;

  showSkipped.onclick = function(evt***REMOVED*** {
    if (showSkipped.checked***REMOVED*** {
      self.outerDiv.className += ' show-skipped';
  ***REMOVED*** else {
      self.outerDiv.className = self.outerDiv.className.replace(/ show-skipped/, ''***REMOVED***;
  ***REMOVED***
***REMOVED***;
};

jasmine.TrivialReporter.prototype.reportRunnerResults = function(runner***REMOVED*** {
  var results = runner.results(***REMOVED***;
  var className = (results.failedCount > 0***REMOVED*** ? "runner failed" : "runner passed";
  this.runnerDiv.setAttribute("class", className***REMOVED***;
  //do it twice for IE
  this.runnerDiv.setAttribute("className", className***REMOVED***;
  var specs = runner.specs(***REMOVED***;
  var specCount = 0;
  for (var i = 0; i < specs.length; i++***REMOVED*** {
    if (this.specFilter(specs[i]***REMOVED******REMOVED*** {
      specCount++;
  ***REMOVED***
***REMOVED***
  var message = "" + specCount + " spec" + (specCount == 1 ? "" : "s" ***REMOVED*** + ", " + results.failedCount + " failure" + ((results.failedCount == 1***REMOVED*** ? "" : "s"***REMOVED***;
  message += " in " + ((new Date(***REMOVED***.getTime(***REMOVED*** - this.startedAt.getTime(***REMOVED******REMOVED*** / 1000***REMOVED*** + "s";
  this.runnerMessageSpan.replaceChild(this.createDom('a', { className: 'description', href: '?'}, message***REMOVED***, this.runnerMessageSpan.firstChild***REMOVED***;

  this.finishedAtSpan.appendChild(document.createTextNode("Finished at " + new Date(***REMOVED***.toString(***REMOVED******REMOVED******REMOVED***;
};

jasmine.TrivialReporter.prototype.reportSuiteResults = function(suite***REMOVED*** {
  var results = suite.results(***REMOVED***;
  var status = results.passed(***REMOVED*** ? 'passed' : 'failed';
  if (results.totalCount === 0***REMOVED*** { // todo: change this to check results.skipped
    status = 'skipped';
***REMOVED***
  this.suiteDivs[suite.id].className += " " + status;
};

jasmine.TrivialReporter.prototype.reportSpecStarting = function(spec***REMOVED*** {
  if (this.logRunningSpecs***REMOVED*** {
    this.log('>> Jasmine Running ' + spec.suite.description + ' ' + spec.description + '...'***REMOVED***;
***REMOVED***
};

jasmine.TrivialReporter.prototype.reportSpecResults = function(spec***REMOVED*** {
  var results = spec.results(***REMOVED***;
  var status = results.passed(***REMOVED*** ? 'passed' : 'failed';
  if (results.skipped***REMOVED*** {
    status = 'skipped';
***REMOVED***
  var specDiv = this.createDom('div', { className: 'spec '  + status },
      this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(spec.getFullName(***REMOVED******REMOVED*** }, "run"***REMOVED***,
      this.createDom('a', {
        className: 'description',
        href: '?spec=' + encodeURIComponent(spec.getFullName(***REMOVED******REMOVED***,
        title: spec.getFullName(***REMOVED***
    ***REMOVED***, spec.description***REMOVED******REMOVED***;


  var resultItems = results.getItems(***REMOVED***;
  var messagesDiv = this.createDom('div', { className: 'messages' }***REMOVED***;
  for (var i = 0; i < resultItems.length; i++***REMOVED*** {
    var result = resultItems[i];

    if (result.type == 'log'***REMOVED*** {
      messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage log'}, result.toString(***REMOVED******REMOVED******REMOVED***;
  ***REMOVED*** else if (result.type == 'expect' && result.passed && !result.passed(***REMOVED******REMOVED*** {
      messagesDiv.appendChild(this.createDom('div', {className: 'resultMessage fail'}, result.message***REMOVED******REMOVED***;

      if (result.trace.stack***REMOVED*** {
        messagesDiv.appendChild(this.createDom('div', {className: 'stackTrace'}, result.trace.stack***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  if (messagesDiv.childNodes.length > 0***REMOVED*** {
    specDiv.appendChild(messagesDiv***REMOVED***;
***REMOVED***

  this.suiteDivs[spec.suite.id].appendChild(specDiv***REMOVED***;
};

jasmine.TrivialReporter.prototype.log = function(***REMOVED*** {
  var console = jasmine.getGlobal(***REMOVED***.console;
  if (console && console.log***REMOVED*** {
    if (console.log.apply***REMOVED*** {
      console.log.apply(console, arguments***REMOVED***;
  ***REMOVED*** else {
      console.log(arguments***REMOVED***; // ie fix: console.log.apply doesn't exist on ie
  ***REMOVED***
***REMOVED***
};

jasmine.TrivialReporter.prototype.getLocation = function(***REMOVED*** {
  return this.document.location;
};

jasmine.TrivialReporter.prototype.specFilter = function(spec***REMOVED*** {
  var paramMap = {};
  var params = this.getLocation(***REMOVED***.search.substring(1***REMOVED***.split('&'***REMOVED***;
  for (var i = 0; i < params.length; i++***REMOVED*** {
    var p = params[i].split('='***REMOVED***;
    paramMap[decodeURIComponent(p[0]***REMOVED***] = decodeURIComponent(p[1]***REMOVED***;
***REMOVED***

  if (!paramMap.spec***REMOVED*** {
    return true;
***REMOVED***
  return spec.getFullName(***REMOVED***.indexOf(paramMap.spec***REMOVED*** === 0;
};
