// Copyright (c***REMOVED*** 2008, Fair Oaks Labs, Inc.
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//  * Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
//  * Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 
//  * Neither the name of Fair Oaks Labs, Inc. nor the names of its contributors
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION***REMOVED*** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE***REMOVED***
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
//
// Modifications to writeIEEE754 to support negative zeroes made by Brian White

var readIEEE754 = function(buffer, offset, endian, mLen, nBytes***REMOVED*** {
  var e, m,
      bBE = (endian === 'big'***REMOVED***,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen***REMOVED*** - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = bBE ? 0 : (nBytes - 1***REMOVED***,
      d = bBE ? 1 : -1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits***REMOVED******REMOVED*** - 1***REMOVED***;
  s >>= (-nBits***REMOVED***;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8***REMOVED***;

  m = e & ((1 << (-nBits***REMOVED******REMOVED*** - 1***REMOVED***;
  e >>= (-nBits***REMOVED***;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8***REMOVED***;

  if (e === 0***REMOVED*** {
    e = 1 - eBias;
***REMOVED*** else if (e === eMax***REMOVED*** {
    return m ? NaN : ((s ? -1 : 1***REMOVED*** * Infinity***REMOVED***;
***REMOVED*** else {
    m = m + Math.pow(2, mLen***REMOVED***;
    e = e - eBias;
***REMOVED***
  return (s ? -1 : 1***REMOVED*** * m * Math.pow(2, e - mLen***REMOVED***;
};

var writeIEEE754 = function(buffer, value, offset, endian, mLen, nBytes***REMOVED*** {
  var e, m, c,
      bBE = (endian === 'big'***REMOVED***,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen***REMOVED*** - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24***REMOVED*** - Math.pow(2, -77***REMOVED*** : 0***REMOVED***,
      i = bBE ? (nBytes-1***REMOVED*** : 0,
      d = bBE ? -1 : 1,
      s = value < 0 || (value === 0 && 1 / value < 0***REMOVED*** ? 1 : 0;

  value = Math.abs(value***REMOVED***;

  if (isNaN(value***REMOVED*** || value === Infinity***REMOVED*** {
    m = isNaN(value***REMOVED*** ? 1 : 0;
    e = eMax;
***REMOVED*** else {
    e = Math.floor(Math.log(value***REMOVED*** / Math.LN2***REMOVED***;
    if (value * (c = Math.pow(2, -e***REMOVED******REMOVED*** < 1***REMOVED*** {
      e--;
      c *= 2;
  ***REMOVED***
    if (e+eBias >= 1***REMOVED*** {
      value += rt / c;
  ***REMOVED*** else {
      value += rt * Math.pow(2, 1 - eBias***REMOVED***;
  ***REMOVED***
    if (value * c >= 2***REMOVED*** {
      e++;
      c /= 2;
  ***REMOVED***

    if (e + eBias >= eMax***REMOVED*** {
      m = 0;
      e = eMax;
  ***REMOVED*** else if (e + eBias >= 1***REMOVED*** {
      m = (value * c - 1***REMOVED*** * Math.pow(2, mLen***REMOVED***;
      e = e + eBias;
  ***REMOVED*** else {
      m = value * Math.pow(2, eBias - 1***REMOVED*** * Math.pow(2, mLen***REMOVED***;
      e = 0;
  ***REMOVED***
***REMOVED***

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8***REMOVED***;

  e = (e << mLen***REMOVED*** | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8***REMOVED***;

  buffer[offset + i - d] |= s * 128;
};

exports.readIEEE754 = readIEEE754;
exports.writeIEEE754 = writeIEEE754;