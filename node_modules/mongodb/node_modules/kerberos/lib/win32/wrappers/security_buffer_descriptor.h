#ifndef SECURITY_BUFFER_DESCRIPTOR_H
#define SECURITY_BUFFER_DESCRIPTOR_H

#include <node.h>
#include <node_object_wrap.h>
#include <v8.h>

#include <windows.h>
#include <sspi.h>

using namespace v8;
using namespace node;

class SecurityBufferDescriptor : public ObjectWrap {  
  public:    
    Persistent<Array> arrayObject;
    SecBufferDesc secBufferDesc;
    
    SecurityBufferDescriptor(***REMOVED***;
    SecurityBufferDescriptor(Persistent<Array> arrayObject***REMOVED***;
    ~SecurityBufferDescriptor(***REMOVED***;    

    // Has instance check
    static inline bool HasInstance(Handle<Value> val***REMOVED*** {
      if (!val->IsObject(***REMOVED******REMOVED*** return false;
      Local<Object> obj = val->ToObject(***REMOVED***;
      return constructor_template->HasInstance(obj***REMOVED***;
  ***REMOVED***;

    char *toBuffer(***REMOVED***;
    size_t bufferSize(***REMOVED***;

    // Functions available from V8
    static void Initialize(Handle<Object> target***REMOVED***;    
    static Handle<Value> ToBuffer(const Arguments &args***REMOVED***;

    // Constructor used for creating new Long objects from C++
    static Persistent<FunctionTemplate> constructor_template;
    
  private:
    static Handle<Value> New(const Arguments &args***REMOVED***;
};

#endif