#include "kerberos.h"
#include <stdlib.h>
#include <tchar.h>
#include "base64.h"
#include "wrappers/security_buffer.h"
#include "wrappers/security_buffer_descriptor.h"
#include "wrappers/security_context.h"
#include "wrappers/security_credentials.h"

Persistent<FunctionTemplate> Kerberos::constructor_template;

// VException object (causes throw in calling code***REMOVED***
static Handle<Value> VException(const char *msg***REMOVED*** {
  HandleScope scope;
  return ThrowException(Exception::Error(String::New(msg***REMOVED******REMOVED******REMOVED***;
}

Kerberos::Kerberos(***REMOVED*** : ObjectWrap(***REMOVED*** {
}

void Kerberos::Initialize(v8::Handle<v8::Object> target***REMOVED*** {
  // Grab the scope of the call from Node
  HandleScope scope;
  // Define a new function template
  Local<FunctionTemplate> t = FunctionTemplate::New(Kerberos::New***REMOVED***;
  constructor_template = Persistent<FunctionTemplate>::New(t***REMOVED***;
  constructor_template->InstanceTemplate(***REMOVED***->SetInternalFieldCount(1***REMOVED***;
  constructor_template->SetClassName(String::NewSymbol("Kerberos"***REMOVED******REMOVED***;
  // Set the symbol
  target->ForceSet(String::NewSymbol("Kerberos"***REMOVED***, constructor_template->GetFunction(***REMOVED******REMOVED***;
}

Handle<Value> Kerberos::New(const Arguments &args***REMOVED*** {
  // Load the security.dll library
  load_library(***REMOVED***;
  // Create a Kerberos instance
  Kerberos *kerberos = new Kerberos(***REMOVED***;
  // Return the kerberos object
  kerberos->Wrap(args.This(***REMOVED******REMOVED***;
  return args.This(***REMOVED***;
}

// Exporting function
extern "C" void init(Handle<Object> target***REMOVED*** {
  HandleScope scope;
  Kerberos::Initialize(target***REMOVED***;
  SecurityContext::Initialize(target***REMOVED***;
  SecurityBuffer::Initialize(target***REMOVED***;
  SecurityBufferDescriptor::Initialize(target***REMOVED***;
  SecurityCredentials::Initialize(target***REMOVED***;
}

NODE_MODULE(kerberos, init***REMOVED***;
