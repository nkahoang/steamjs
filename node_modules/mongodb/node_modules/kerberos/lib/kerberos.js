var kerberos = require('../build/Release/kerberos'***REMOVED***
  , KerberosNative = kerberos.Kerberos;

var Kerberos = function(***REMOVED*** {
  this._native_kerberos = new KerberosNative(***REMOVED***; 
}

Kerberos.prototype.authGSSClientInit = function(uri, flags, callback***REMOVED*** {
  return this._native_kerberos.authGSSClientInit(uri, flags, callback***REMOVED***;
}

Kerberos.prototype.authGSSClientStep = function(context, challenge, callback***REMOVED*** {
  if(typeof challenge == 'function'***REMOVED*** {
    callback = challenge;
    challenge = '';
***REMOVED***

  return this._native_kerberos.authGSSClientStep(context, challenge, callback***REMOVED***;
}

Kerberos.prototype.authGSSClientUnwrap = function(context, challenge, callback***REMOVED*** {
  if(typeof challenge == 'function'***REMOVED*** {
    callback = challenge;
    challenge = '';
***REMOVED***

  return this._native_kerberos.authGSSClientUnwrap(context, challenge, callback***REMOVED***;
}

Kerberos.prototype.authGSSClientWrap = function(context, challenge, user_name, callback***REMOVED*** {
  if(typeof user_name == 'function'***REMOVED*** {
    callback = user_name;
    user_name = '';
***REMOVED***

  return this._native_kerberos.authGSSClientWrap(context, challenge, user_name, callback***REMOVED***;
}

Kerberos.prototype.authGSSClientClean = function(context, callback***REMOVED*** {
  return this._native_kerberos.authGSSClientClean(context, callback***REMOVED***;
}

Kerberos.prototype.acquireAlternateCredentials = function(user_name, password, domain***REMOVED*** {
  return this._native_kerberos.acquireAlternateCredentials(user_name, password, domain***REMOVED***; 
}

Kerberos.prototype.prepareOutboundPackage = function(principal, inputdata***REMOVED*** {
  return this._native_kerberos.prepareOutboundPackage(principal, inputdata***REMOVED***; 
}

Kerberos.prototype.decryptMessage = function(challenge***REMOVED*** {
  return this._native_kerberos.decryptMessage(challenge***REMOVED***;
}

Kerberos.prototype.encryptMessage = function(challenge***REMOVED*** {
  return this._native_kerberos.encryptMessage(challenge***REMOVED***; 
}

Kerberos.prototype.queryContextAttribute = function(attribute***REMOVED*** {
  if(typeof attribute != 'number' && attribute != 0x00***REMOVED*** throw new Error("Attribute not supported"***REMOVED***;
  return this._native_kerberos.queryContextAttribute(attribute***REMOVED***;
}

// Some useful result codes
Kerberos.AUTH_GSS_CONTINUE     = 0;
Kerberos.AUTH_GSS_COMPLETE     = 1;
     
// Some useful gss flags 
Kerberos.GSS_C_DELEG_FLAG      = 1;
Kerberos.GSS_C_MUTUAL_FLAG     = 2;
Kerberos.GSS_C_REPLAY_FLAG     = 4;
Kerberos.GSS_C_SEQUENCE_FLAG   = 8;
Kerberos.GSS_C_CONF_FLAG       = 16; 
Kerberos.GSS_C_INTEG_FLAG      = 32;
Kerberos.GSS_C_ANON_FLAG       = 64;
Kerberos.GSS_C_PROT_READY_FLAG = 128; 
Kerberos.GSS_C_TRANS_FLAG      = 256;

// Export Kerberos class
exports.Kerberos = Kerberos;

// If we have SSPI (windows***REMOVED***
if(kerberos.SecurityCredentials***REMOVED*** {
  // Put all SSPI classes in it's own namespace
  exports.SSIP = {
      SecurityCredentials: require('./win32/wrappers/security_credentials'***REMOVED***.SecurityCredentials
    , SecurityContext: require('./win32/wrappers/security_context'***REMOVED***.SecurityContext
    , SecurityBuffer: require('./win32/wrappers/security_buffer'***REMOVED***.SecurityBuffer
    , SecurityBufferDescriptor: require('./win32/wrappers/security_buffer_descriptor'***REMOVED***.SecurityBufferDescriptor
***REMOVED***
}
