#include "kerberos_context.h"

Persistent<FunctionTemplate> KerberosContext::constructor_template;

KerberosContext::KerberosContext(***REMOVED*** : ObjectWrap(***REMOVED*** {
}

KerberosContext::~KerberosContext(***REMOVED*** {
}

KerberosContext* KerberosContext::New(***REMOVED*** {
  HandleScope scope;
  
  Local<Object> obj = constructor_template->GetFunction(***REMOVED***->NewInstance(***REMOVED***;
  KerberosContext *kerberos_context = ObjectWrap::Unwrap<KerberosContext>(obj***REMOVED***;  
  
  return kerberos_context;
}

Handle<Value> KerberosContext::New(const Arguments &args***REMOVED*** {
  HandleScope scope;    
  // Create code object
  KerberosContext *kerberos_context = new KerberosContext(***REMOVED***;
  // Wrap it
  kerberos_context->Wrap(args.This(***REMOVED******REMOVED***;
  // Return the object
  return args.This(***REMOVED***;    
}

static Persistent<String> response_symbol;

void KerberosContext::Initialize(Handle<Object> target***REMOVED*** {
  // Grab the scope of the call from Node
  HandleScope scope;
  // Define a new function template
  Local<FunctionTemplate> t = FunctionTemplate::New(New***REMOVED***;
  constructor_template = Persistent<FunctionTemplate>::New(t***REMOVED***;
  constructor_template->InstanceTemplate(***REMOVED***->SetInternalFieldCount(1***REMOVED***;
  constructor_template->SetClassName(String::NewSymbol("KerberosContext"***REMOVED******REMOVED***;

  // Property symbols
  response_symbol = NODE_PSYMBOL("response"***REMOVED***;
    
  // Getter for the response
  constructor_template->InstanceTemplate(***REMOVED***->SetAccessor(response_symbol, ResponseGetter***REMOVED***;

  // Set up the Symbol for the Class on the Module
  target->Set(String::NewSymbol("KerberosContext"***REMOVED***, constructor_template->GetFunction(***REMOVED******REMOVED***;
}

//
// Response Setter / Getter
Handle<Value> KerberosContext::ResponseGetter(Local<String> property, const AccessorInfo& info***REMOVED*** {
  HandleScope scope;
  gss_client_state *state;

  // Unpack the object
  KerberosContext *context = ObjectWrap::Unwrap<KerberosContext>(info.Holder(***REMOVED******REMOVED***;
  // Let's grab the response
  state = context->state;
  // No state no response
  if(state == NULL || state->response == NULL***REMOVED*** return scope.Close(Null(***REMOVED******REMOVED***;
  // Return the response
  return scope.Close(String::New(state->response***REMOVED******REMOVED***;
}









