exports.setUp = function(callback***REMOVED*** {
  callback(***REMOVED***;
}

exports.tearDown = function(callback***REMOVED*** {
  callback(***REMOVED***;
}

exports['Initialize a set of security credentials'] = function(test***REMOVED*** {
  var SecurityCredentials = require('../../lib/sspi.js'***REMOVED***.SecurityCredentials;

  // Aquire some credentials
  try {
    var credentials = SecurityCredentials.aquire('Kerberos', 'dev1@10GEN.ME', 'a'***REMOVED***;    
***REMOVED*** catch(err***REMOVED*** {    
    console.dir(err***REMOVED***
    test.ok(false***REMOVED***;
***REMOVED***



  // console.dir(SecurityCredentials***REMOVED***;

  // var SecurityBufferDescriptor = require('../../lib/sspi.js'***REMOVED***.SecurityBufferDescriptor
  //   SecurityBuffer = require('../../lib/sspi.js'***REMOVED***.SecurityBuffer;

  // // Create descriptor with single Buffer
  // var securityDescriptor = new SecurityBufferDescriptor(100***REMOVED***;
  // try {
  //   // Fail to work due to no valid Security Buffer
  //   securityDescriptor = new SecurityBufferDescriptor(["hello"]***REMOVED***;
  //   test.ok(false***REMOVED***;
  // } catch(err***REMOVED***{}

  // // Should Correctly construct SecurityBuffer
  // var buffer = new SecurityBuffer(SecurityBuffer.DATA, 100***REMOVED***;
  // securityDescriptor = new SecurityBufferDescriptor([buffer]***REMOVED***;
  // // Should correctly return a buffer
  // var result = securityDescriptor.toBuffer(***REMOVED***;
  // test.equal(100, result.length***REMOVED***;

  // // Should Correctly construct SecurityBuffer
  // var buffer = new SecurityBuffer(SecurityBuffer.DATA, new Buffer("hello world"***REMOVED******REMOVED***;
  // securityDescriptor = new SecurityBufferDescriptor([buffer]***REMOVED***;
  // var result = securityDescriptor.toBuffer(***REMOVED***;
  // test.equal("hello world", result.toString(***REMOVED******REMOVED***;

  // // Test passing in more than one Buffer
  // var buffer = new SecurityBuffer(SecurityBuffer.DATA, new Buffer("hello world"***REMOVED******REMOVED***;
  // var buffer2 = new SecurityBuffer(SecurityBuffer.STREAM, new Buffer("adam and eve"***REMOVED******REMOVED***;
  // securityDescriptor = new SecurityBufferDescriptor([buffer, buffer2]***REMOVED***;
  // var result = securityDescriptor.toBuffer(***REMOVED***;
  // test.equal("hello worldadam and eve", result.toString(***REMOVED******REMOVED***;
  test.done(***REMOVED***;
}