#!/usr/bin/env node

var colors = require('colors'***REMOVED***,
    fs = require('fs'***REMOVED***,
    _ = require('underscore'***REMOVED***,
    metrics = require('metrics'***REMOVED***,

    // `node diff_multi_bench_output.js before.txt after.txt`
    before = process.argv[2],
    after = process.argv[3];

if (!before || !after***REMOVED*** {
    console.log('Please supply two file arguments:'***REMOVED***;
    var n = __filename;
    n = n.substring(n.lastIndexOf('/', n.length***REMOVED******REMOVED***;
    console.log('    ./' + n + ' multiBenchBefore.txt multiBenchAfter.txt'***REMOVED***;
    console.log('To generate multiBenchBefore.txt, run'***REMOVED***;
    console.log('    node multi_bench.js > multiBenchBefore.txt'***REMOVED***;
    console.log('Thank you for benchmarking responsibly.'***REMOVED***;
    return;
}

var before_lines = fs.readFileSync(before, 'utf8'***REMOVED***.split('\n'***REMOVED***,
    after_lines = fs.readFileSync(after, 'utf8'***REMOVED***.split('\n'***REMOVED***;

console.log('Comparing before,', before.green, '(', before_lines.length,
    'lines***REMOVED***', 'to after,', after.green, '(', after_lines.length, 'lines***REMOVED***'***REMOVED***;

var total_ops = new metrics.Histogram.createUniformHistogram(***REMOVED***;

before_lines.forEach(function(b, i***REMOVED*** {
    var a = after_lines[i];
    if (!a || !b || !b.trim(***REMOVED*** || !a.trim(***REMOVED******REMOVED*** {
        // console.log('#ignored#', '>'+a+'<', '>'+b+'<'***REMOVED***;
        return;
  ***REMOVED***

    b_words = b.split(' '***REMOVED***.filter(is_whitespace***REMOVED***;
    a_words = a.split(' '***REMOVED***.filter(is_whitespace***REMOVED***;

    var ops =
        [b_words, a_words]
        .map(function(words***REMOVED*** {
            // console.log(words***REMOVED***;
            return parseInt10(words.slice(-2, -1***REMOVED******REMOVED***;
      ***REMOVED******REMOVED***.filter(function(num***REMOVED*** {
            var isNaN = !num && num !== 0;
            return !isNaN;
      ***REMOVED******REMOVED***;
    if (ops.length != 2***REMOVED*** return

    var delta = ops[1] - ops[0];
    var pct = ((delta / ops[0]***REMOVED*** * 100***REMOVED***.toPrecision(3***REMOVED***;

    total_ops.update(delta***REMOVED***;

    delta = humanize_diff(delta***REMOVED***;
    pct = humanize_diff(pct, '%'***REMOVED***;
    console.log(
        // name of test
        command_name(a_words***REMOVED*** == command_name(b_words***REMOVED***
            ? command_name(a_words***REMOVED*** + ':'
            : '404:',
        // results of test
        ops.join(' -> '***REMOVED***, 'ops/sec (âˆ†', delta, pct, '***REMOVED***'***REMOVED***;
}***REMOVED***;

console.log('Mean difference in ops/sec:', humanize_diff(total_ops.mean(***REMOVED***.toPrecision(6***REMOVED******REMOVED******REMOVED***;

function is_whitespace(s***REMOVED*** {
    return !!s.trim(***REMOVED***;
}

function parseInt10(s***REMOVED*** {
    return parseInt(s, 10***REMOVED***;
}

// green if greater than 0, red otherwise
function humanize_diff(num, unit***REMOVED*** {
    unit = unit || "";
    if (num > 0***REMOVED*** {
        return ('+' + num + unit***REMOVED***.green;
  ***REMOVED***
    return ('' + num + unit***REMOVED***.red;
}

function command_name(words***REMOVED*** {
    var line = words.join(' '***REMOVED***;
    return line.substr(0, line.indexOf(','***REMOVED******REMOVED***;
}
