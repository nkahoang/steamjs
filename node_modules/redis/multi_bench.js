var redis = require("./index"***REMOVED***,
    metrics = require("metrics"***REMOVED***,
    num_clients = parseInt(process.argv[2], 10***REMOVED*** || 5,
    num_requests = 20000,
    tests = [],
    versions_logged = false,
    client_options = {
        return_buffers: false
  ***REMOVED***,
    small_str, large_str, small_buf, large_buf;

redis.debug_mode = false;

function lpad(input, len, chr***REMOVED*** {
    var str = input.toString(***REMOVED***;
    chr = chr || " ";

    while (str.length < len***REMOVED*** {
        str = chr + str;
  ***REMOVED***
    return str;
}

metrics.Histogram.prototype.print_line = function (***REMOVED*** {
    var obj = this.printObj(***REMOVED***;
    
    return lpad(obj.min, 4***REMOVED*** + "/" + lpad(obj.max, 4***REMOVED*** + "/" + lpad(obj.mean.toFixed(2***REMOVED***, 7***REMOVED*** + "/" + lpad(obj.p95.toFixed(2***REMOVED***, 7***REMOVED***;
};

function Test(args***REMOVED*** {
    this.args = args;
    
    this.callback = null;
    this.clients = [];
    this.clients_ready = 0;
    this.commands_sent = 0;
    this.commands_completed = 0;
    this.max_pipeline = this.args.pipeline || num_requests;
    this.client_options = args.client_options || client_options;
    
    this.connect_latency = new metrics.Histogram(***REMOVED***;
    this.ready_latency = new metrics.Histogram(***REMOVED***;
    this.command_latency = new metrics.Histogram(***REMOVED***;
}

Test.prototype.run = function (callback***REMOVED*** {
    var i;

    this.callback = callback;

    for (i = 0; i < num_clients ; i++***REMOVED*** {
        this.new_client(i***REMOVED***;
  ***REMOVED***
};

Test.prototype.new_client = function (id***REMOVED*** {
    var self = this, new_client;
    
    new_client = redis.createClient(6379, "127.0.0.1", this.client_options***REMOVED***;
    new_client.create_time = Date.now(***REMOVED***;

    new_client.on("connect", function (***REMOVED*** {
        self.connect_latency.update(Date.now(***REMOVED*** - new_client.create_time***REMOVED***;
  ***REMOVED******REMOVED***;

    new_client.on("ready", function (***REMOVED*** {
        if (! versions_logged***REMOVED*** {
            console.log("Client count: " + num_clients + ", node version: " + process.versions.node + ", server version: " +
                new_client.server_info.redis_version + ", parser: " + new_client.reply_parser.name***REMOVED***;
            versions_logged = true;
      ***REMOVED***
        self.ready_latency.update(Date.now(***REMOVED*** - new_client.create_time***REMOVED***;
        self.clients_ready++;
        if (self.clients_ready === self.clients.length***REMOVED*** {
            self.on_clients_ready(***REMOVED***;
      ***REMOVED***
  ***REMOVED******REMOVED***;

    self.clients[id] = new_client;
};

Test.prototype.on_clients_ready = function (***REMOVED*** {
    process.stdout.write(lpad(this.args.descr, 13***REMOVED*** + ", " + lpad(this.args.pipeline, 5***REMOVED*** + "/" + this.clients_ready + " "***REMOVED***;
    this.test_start = Date.now(***REMOVED***;

    this.fill_pipeline(***REMOVED***;
};

Test.prototype.fill_pipeline = function (***REMOVED*** {
    var pipeline = this.commands_sent - this.commands_completed;

    while (this.commands_sent < num_requests && pipeline < this.max_pipeline***REMOVED*** {
        this.commands_sent++;
        pipeline++;
        this.send_next(***REMOVED***;
  ***REMOVED***
    
    if (this.commands_completed === num_requests***REMOVED*** {
        this.print_stats(***REMOVED***;
        this.stop_clients(***REMOVED***;
  ***REMOVED***
};

Test.prototype.stop_clients = function (***REMOVED*** {
    var self = this;
    
    this.clients.forEach(function (client, pos***REMOVED*** {
        if (pos === self.clients.length - 1***REMOVED*** {
            client.quit(function (err, res***REMOVED*** {
                self.callback(***REMOVED***;
          ***REMOVED******REMOVED***;
      ***REMOVED*** else {
            client.quit(***REMOVED***;
      ***REMOVED***
  ***REMOVED******REMOVED***;
};

Test.prototype.send_next = function (***REMOVED*** {
    var self = this,
        cur_client = this.commands_sent % this.clients.length,
        start = Date.now(***REMOVED***;

    this.clients[cur_client][this.args.command](this.args.args, function (err, res***REMOVED*** {
        if (err***REMOVED*** {
            throw err;
      ***REMOVED***
        self.commands_completed++;
        self.command_latency.update(Date.now(***REMOVED*** - start***REMOVED***;
        self.fill_pipeline(***REMOVED***;
  ***REMOVED******REMOVED***;
};

Test.prototype.print_stats = function (***REMOVED*** {
    var duration = Date.now(***REMOVED*** - this.test_start;
    
    console.log("min/max/avg/p95: " + this.command_latency.print_line(***REMOVED*** + " " + lpad(duration, 6***REMOVED*** + "ms total, " +
        lpad((num_requests / (duration / 1000***REMOVED******REMOVED***.toFixed(2***REMOVED***, 8***REMOVED*** + " ops/sec"***REMOVED***;
};

small_str = "1234";
small_buf = new Buffer(small_str***REMOVED***;
large_str = (new Array(4097***REMOVED***.join("-"***REMOVED******REMOVED***;
large_buf = new Buffer(large_str***REMOVED***;

tests.push(new Test({descr: "PING", command: "ping", args: [], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "PING", command: "ping", args: [], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "PING", command: "ping", args: [], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "PING", command: "ping", args: [], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "SET small str", command: "set", args: ["foo_rand000000000000", small_str], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET small str", command: "set", args: ["foo_rand000000000000", small_str], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET small str", command: "set", args: ["foo_rand000000000000", small_str], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET small str", command: "set", args: ["foo_rand000000000000", small_str], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "SET small buf", command: "set", args: ["foo_rand000000000000", small_buf], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET small buf", command: "set", args: ["foo_rand000000000000", small_buf], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET small buf", command: "set", args: ["foo_rand000000000000", small_buf], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET small buf", command: "set", args: ["foo_rand000000000000", small_buf], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "GET small str", command: "get", args: ["foo_rand000000000000"], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET small str", command: "get", args: ["foo_rand000000000000"], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET small str", command: "get", args: ["foo_rand000000000000"], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET small str", command: "get", args: ["foo_rand000000000000"], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "GET small buf", command: "get", args: ["foo_rand000000000000"], pipeline: 1, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET small buf", command: "get", args: ["foo_rand000000000000"], pipeline: 50, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET small buf", command: "get", args: ["foo_rand000000000000"], pipeline: 200, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET small buf", command: "get", args: ["foo_rand000000000000"], pipeline: 20000, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;

tests.push(new Test({descr: "SET large str", command: "set", args: ["foo_rand000000000001", large_str], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET large str", command: "set", args: ["foo_rand000000000001", large_str], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET large str", command: "set", args: ["foo_rand000000000001", large_str], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET large str", command: "set", args: ["foo_rand000000000001", large_str], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "SET large buf", command: "set", args: ["foo_rand000000000001", large_buf], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET large buf", command: "set", args: ["foo_rand000000000001", large_buf], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET large buf", command: "set", args: ["foo_rand000000000001", large_buf], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "SET large buf", command: "set", args: ["foo_rand000000000001", large_buf], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "GET large str", command: "get", args: ["foo_rand000000000001"], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET large str", command: "get", args: ["foo_rand000000000001"], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET large str", command: "get", args: ["foo_rand000000000001"], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET large str", command: "get", args: ["foo_rand000000000001"], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "GET large buf", command: "get", args: ["foo_rand000000000001"], pipeline: 1, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET large buf", command: "get", args: ["foo_rand000000000001"], pipeline: 50, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET large buf", command: "get", args: ["foo_rand000000000001"], pipeline: 200, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;
tests.push(new Test({descr: "GET large buf", command: "get", args: ["foo_rand000000000001"], pipeline: 20000, client_opts: { return_buffers: true} }***REMOVED******REMOVED***;

tests.push(new Test({descr: "INCR", command: "incr", args: ["counter_rand000000000000"], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "INCR", command: "incr", args: ["counter_rand000000000000"], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "INCR", command: "incr", args: ["counter_rand000000000000"], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "INCR", command: "incr", args: ["counter_rand000000000000"], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "LPUSH", command: "lpush", args: ["mylist", small_str], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LPUSH", command: "lpush", args: ["mylist", small_str], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LPUSH", command: "lpush", args: ["mylist", small_str], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LPUSH", command: "lpush", args: ["mylist", small_str], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "LRANGE 10", command: "lrange", args: ["mylist", "0", "9"], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LRANGE 10", command: "lrange", args: ["mylist", "0", "9"], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LRANGE 10", command: "lrange", args: ["mylist", "0", "9"], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LRANGE 10", command: "lrange", args: ["mylist", "0", "9"], pipeline: 20000}***REMOVED******REMOVED***;

tests.push(new Test({descr: "LRANGE 100", command: "lrange", args: ["mylist", "0", "99"], pipeline: 1}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LRANGE 100", command: "lrange", args: ["mylist", "0", "99"], pipeline: 50}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LRANGE 100", command: "lrange", args: ["mylist", "0", "99"], pipeline: 200}***REMOVED******REMOVED***;
tests.push(new Test({descr: "LRANGE 100", command: "lrange", args: ["mylist", "0", "99"], pipeline: 20000}***REMOVED******REMOVED***;

function next(***REMOVED*** {
    var test = tests.shift(***REMOVED***;
    if (test***REMOVED*** {
        test.run(function (***REMOVED*** {
            next(***REMOVED***;
      ***REMOVED******REMOVED***;
  ***REMOVED*** else {
        console.log("End of tests."***REMOVED***;
        process.exit(0***REMOVED***;
  ***REMOVED***
}

next(***REMOVED***;
