// Queue class adapted from Tim Caswell's pattern library
// http://github.com/creationix/pattern/blob/master/lib/pattern/queue.js

function Queue(***REMOVED*** {
    this.tail = [];
    this.head = [];
    this.offset = 0;
}

Queue.prototype.shift = function (***REMOVED*** {
    if (this.offset === this.head.length***REMOVED*** {
        var tmp = this.head;
        tmp.length = 0;
        this.head = this.tail;
        this.tail = tmp;
        this.offset = 0;
        if (this.head.length === 0***REMOVED*** {
            return;
      ***REMOVED***
  ***REMOVED***
    return this.head[this.offset++]; // sorry, JSLint
};

Queue.prototype.push = function (item***REMOVED*** {
    return this.tail.push(item***REMOVED***;
};

Queue.prototype.forEach = function (fn, thisv***REMOVED*** {
    var array = this.head.slice(this.offset***REMOVED***, i, il;

    array.push.apply(array, this.tail***REMOVED***;

    if (thisv***REMOVED*** {
        for (i = 0, il = array.length; i < il; i += 1***REMOVED*** {
            fn.call(thisv, array[i], i, array***REMOVED***;
      ***REMOVED***
  ***REMOVED*** else {
        for (i = 0, il = array.length; i < il; i += 1***REMOVED*** {
            fn(array[i], i, array***REMOVED***;
      ***REMOVED***
  ***REMOVED***

    return array;
};

Queue.prototype.getLength = function (***REMOVED*** {
    return this.head.length - this.offset + this.tail.length;
};
    
Object.defineProperty(Queue.prototype, "length", {
    get: function (***REMOVED*** {
        return this.getLength(***REMOVED***;
  ***REMOVED***
}***REMOVED***;


if (typeof module !== "undefined" && module.exports***REMOVED*** {
    module.exports = Queue;
}
